<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SemanticKernel.Graph</name>
    </assembly>
    <members>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns">
            <summary>
            Provides optional, production-grade implementations of well-known academic and
            enterprise resilience patterns for graph execution.
            </summary>
            <remarks>
            Included patterns:
            - Circuit Breaker: Prevents cascading failures by short‑circuiting failing operations
            - Bulkhead: Enforces resource isolation to avoid cross‑contamination between workloads
            - Timeout: Enables time‑bounded execution (covered in Bulkhead execution control)
            - Retry with Exponential Backoff: Retries transient failures with backoff and optional jitter
            - Cache‑Aside: Side‑cache strategy with background refresh and eviction
            - Saga (conceptual hook): Distributed transaction composition (not implemented in this file)
            
            Unless otherwise specified, instances are safe for concurrent use as documented per type.
            </remarks>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState">
            <summary>
            Represents the current state of a circuit breaker.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState.Closed">
            <summary>Closed circuit — operations are executed normally.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState.Open">
            <summary>Open circuit — failures detected; operations are short‑circuited.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState.HalfOpen">
            <summary>Half‑open circuit — probing limited executions to test recovery.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOptions">
            <summary>
            Configuration options for the <see cref="T:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOptions.FailureThreshold">
            <summary>
            The number of consecutive failures required to transition the circuit to
            <see cref="F:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState.Open"/>. Defaults to 5.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOptions.OpenTimeout">
            <summary>
            The minimum duration to keep the circuit open before attempting half‑open probing.
            Defaults to 30 seconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOptions.HalfOpenRetryCount">
            <summary>
            The maximum number of probe executions allowed while in
            <see cref="F:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState.HalfOpen"/> before re‑opening the circuit. Defaults to 3.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOptions.FailureWindow">
            <summary>
            The time window after which failure counters decay back to zero while the circuit is closed.
            Defaults to 1 minute.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker">
            <summary>
            Implements the Circuit Breaker pattern to protect systems from cascading failures.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker.#ctor(SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker"/>.
            </summary>
            <param name="options">Circuit breaker configuration. If null, sensible defaults are used.</param>
            <param name="logger">Optional logger for state transitions and diagnostics.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker.State">
            <summary>
            Gets the current state of the circuit breaker.
            The state may change over time based on failures and timeouts.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an operation guarded by the circuit breaker.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="operation">The operation to execute.</param>
            <param name="fallback">Optional fallback to execute when the circuit is open.</param>
            <returns>The operation result.</returns>
            <exception cref="T:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOpenException">Thrown when the circuit is open and no fallback is provided.</exception>
            <remarks>
            When the circuit is <see cref="F:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState.HalfOpen"/>, the number of allowed probe
            executions is limited by <see cref="P:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOptions.HalfOpenRetryCount"/>.
            </remarks>
            <example>
            This example demonstrates executing an HTTP call with a fallback:
            <code>
            var breaker = new CircuitBreaker();
            var response = await breaker.ExecuteAsync(
                () => httpClient.GetStringAsync(url),
                () => Task.FromResult("fallback"));
            </code>
            </example>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker.OnSuccess">
            <summary>
            Records a successful operation and updates the circuit state accordingly.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker.OnFailure(System.Exception)">
            <summary>
            Records a failed operation and transitions the circuit state when thresholds are exceeded.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreaker.UpdateStateIfNeeded">
            <summary>
            Evaluates time-based transitions for <see cref="F:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState.Open"/> and decays
            failure counts while <see cref="F:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState.Closed"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOpenException">
            <summary>
            Exception thrown when the circuit breaker is open and an operation is attempted without a fallback.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOpenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerOpenException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadOptions">
            <summary>
            Configuration options for the <see cref="T:SemanticKernel.Graph.Core.AcademicPatterns.Bulkhead"/> pattern.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadOptions.MaxConcurrency">
            <summary>The maximum number of concurrent operations allowed. Defaults to 10.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadOptions.AcquisitionTimeout">
            <summary>
            The maximum time to wait for an available slot before rejecting the operation.
            Defaults to 30 seconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadOptions.ExecutionTimeout">
            <summary>
            The maximum allowed duration of an operation once admitted. Defaults to 5 minutes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.Bulkhead">
            <summary>
            Implements the Bulkhead isolation pattern.
            Prevents a slow or failing operation from exhausting shared resources and impacting others.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.Bulkhead.#ctor(SemanticKernel.Graph.Core.AcademicPatterns.BulkheadOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Core.AcademicPatterns.Bulkhead"/>.
            </summary>
            <param name="options">Bulkhead configuration. If null, sensible defaults are used.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.Bulkhead.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes an operation admitted by the bulkhead.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="operation">The operation to execute. Receives a cancellation token that is canceled when the execution timeout elapses.</param>
            <param name="cancellationToken">A caller cancellation token.</param>
            <returns>The operation result.</returns>
            <exception cref="T:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadRejectedException">Thrown when no slot is available within <see cref="P:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadOptions.AcquisitionTimeout"/>.</exception>
            <exception cref="T:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadTimeoutException">Thrown when the operation exceeds <see cref="P:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadOptions.ExecutionTimeout"/>.</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.Bulkhead.AvailableSlots">
            <summary>
            Gets the current number of available slots in the bulkhead.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.Bulkhead.Dispose">
            <summary>
            Releases resources used by the bulkhead.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadRejectedException">
            <summary>
            Exception thrown when a bulkhead rejects an operation due to lack of capacity.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadRejectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadTimeoutException">
            <summary>
            Exception thrown when an operation exceeds the bulkhead execution timeout.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.BulkheadTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoffOptions">
            <summary>
            Configuration options for exponential backoff retry operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoffOptions.MaxRetries">
            <summary>The maximum number of retry attempts. Defaults to 3.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoffOptions.InitialDelay">
            <summary>The initial delay between attempts. Defaults to 100 milliseconds.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoffOptions.BackoffMultiplier">
            <summary>The exponential multiplier applied to the delay. Defaults to 2.0.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoffOptions.MaxDelay">
            <summary>The maximum delay between attempts. Defaults to 30 seconds.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoffOptions.EnableJitter">
            <summary>Whether to add jitter to randomize delays (±25%). Defaults to true.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoff">
            <summary>
            Provides helpers to execute operations with retries using exponential backoff.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoff.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Exception,System.Boolean},SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoffOptions,SemanticKernel.Graph.Integration.IGraphLogger,System.Threading.CancellationToken)">
            <summary>
            Executes an operation with retries and exponential backoff.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="operation">The operation to execute.</param>
            <param name="shouldRetry">Predicate to determine if a given exception is retryable.</param>
            <param name="options">Retry configuration. If null, sensible defaults are used.</param>
            <param name="logger">Optional logger for retry diagnostics.</param>
            <param name="cancellationToken">A cancellation token that cancels the waiting between retries.</param>
            <returns>The operation result.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the operation fails without an exception captured.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoff.CalculateDelay(System.Int32,SemanticKernel.Graph.Core.AcademicPatterns.ExponentialBackoffOptions)">
            <summary>
            Calculates the next delay interval based on the attempt number and options.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.CacheAsideOptions">
            <summary>
            Configuration options for the Cache‑Aside pattern.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheAsideOptions.DefaultTtl">
            <summary>The default time‑to‑live (TTL) for cache entries. Defaults to 30 minutes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheAsideOptions.MaxCacheSize">
            <summary>The maximum number of entries allowed in the cache. Defaults to 1000.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheAsideOptions.EnableBackgroundRefresh">
            <summary>Whether to enable background refresh when entries approach expiration. Defaults to true.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheAsideOptions.RefreshThreshold">
            <summary>
            The threshold (as a fraction of TTL) after which a background refresh is triggered
            for a cache hit. Defaults to 0.8 (80%).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2">
            <summary>
            Implements the Cache‑Aside pattern with intelligent background refresh and basic eviction.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2.#ctor(SemanticKernel.Graph.Core.AcademicPatterns.CacheAsideOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2"/> cache.
            </summary>
            <param name="options">Cache configuration. If null, sensible defaults are used.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2.GetOrSetAsync(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Nullable{System.TimeSpan})">
            <summary>
            Gets a value from the cache or loads and stores it using the provided loader function.
            </summary>
            <param name="key">The cache key.</param>
            <param name="loader">The asynchronous value loader when there is a cache miss.</param>
            <param name="ttl">Optional per‑item TTL overriding <see cref="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheAsideOptions.DefaultTtl"/>.</param>
            <returns>The cached or freshly loaded value.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the cache has already been disposed.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2.Evict(`0)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key">The cache key.</param>
            <returns><c>true</c> if the item was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2.Clear">
            <summary>
            Clears the entire cache.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2.Count">
            <summary>
            Gets the current number of items stored in the cache.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2.CleanupExpiredEntries(System.Object)">
            <summary>
            Removes expired entries based on <see cref="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheAsideOptions.DefaultTtl"/>.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2.Dispose">
            <summary>
            Releases resources used by the cache and stops background cleanup.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AcademicPatterns.CacheEntry`1">
            <summary>
            Cache entry with metadata used internally by <see cref="T:SemanticKernel.Graph.Core.AcademicPatterns.CacheAside`2"/>.
            </summary>
            <typeparam name="T">The stored value type.</typeparam>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheEntry`1.Value">
            <summary>The stored value.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AcademicPatterns.CacheEntry`1.CreatedAt">
            <summary>The timestamp when this entry was created.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AdvancedOptimizationEngine">
             <summary>
             Data‑driven optimization engine that analyzes historical execution metrics and automatically applies
             intelligent improvements across performance, reliability, scalability, and consistency.
             </summary>
             <remarks>
             Strategies implemented:
             - Adaptive caching: usage‑pattern aware caching with dynamic TTL adjustments
             - Path optimization: hotspot detection and slow‑path remediation for frequent execution paths
             - Resource governance: proactive allocation via pooled resources and throttling signals
             - Predictive scaling: trend‑based recommendations for scale‑out and scale‑in
             - Hot‑path detection: prioritized focus on the highest impact sections of the graph
            
             Thread‑safety: public APIs are safe for concurrent use. Internals rely on concurrent collections and timers.
             Disposal: calling <see cref="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.Dispose"/> terminates periodic tasks and releases resources. The instance should not be used after disposal.
             </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.#ctor(SemanticKernel.Graph.Core.AdvancedOptimizationOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Core.AdvancedOptimizationEngine"/>.
            </summary>
            <param name="options">Optimization configuration. If null, sensible defaults are used.</param>
            <param name="logger">Optional logger for diagnostics and insights.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.AnalyzeAndOptimizeAsync(SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Analyzes graph execution metrics and produces optimization recommendations.
            </summary>
            <param name="metrics">The graph performance metrics to analyze.</param>
            <returns>A comprehensive <see cref="T:SemanticKernel.Graph.Core.OptimizationResult"/> containing recommended improvements.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="metrics"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the engine has been disposed.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.GetNodeOptimizationRecommendationsAsync(System.String,SemanticKernel.Graph.Core.NodeExecutionMetrics)">
            <summary>
            Generates optimization recommendations for a specific node.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <param name="nodeMetrics">The node execution metrics.</param>
            <returns>A <see cref="T:SemanticKernel.Graph.Core.NodeOptimizationRecommendations"/> instance with prioritized actions.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="nodeId"/> is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="nodeMetrics"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.ExportOptimizationData">
            <summary>
            Exports a compact JSON snapshot of optimization profiles and subsystem statistics.
            </summary>
            <returns>A JSON document suitable for external analysis or diagnostics.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.AnalyzePathPatternsAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,SemanticKernel.Graph.Core.ExecutionPathMetrics})">
            <summary>
            Analyzes execution patterns for path‑level optimizations and returns actionable items.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.AnalyzeNodePerformanceAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,SemanticKernel.Graph.Core.NodeExecutionMetrics})">
            <summary>
            Analyzes individual node performance and returns prioritized optimizations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.CalculateOptimizationImpact(SemanticKernel.Graph.Core.NodeExecutionMetrics)">
            <summary>
            Estimates the potential impact of an optimization based on time, frequency, and latency.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.RunOptimizationCycle(System.Object)">
            <summary>
            Executes the periodic optimization cycle, performing housekeeping and score updates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.CleanupOldProfiles">
            <summary>
            Removes stale profiles that have not been updated within the retention window.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.UpdateOptimizationScores">
            <summary>
            Updates optimization scores based on observed trends.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedOptimizationEngine.Dispose">
            <summary>
            Releases resources used by the optimization engine and stops periodic work.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AdvancedOptimizationOptions">
            <summary>
            Configuration for the <see cref="T:SemanticKernel.Graph.Core.AdvancedOptimizationEngine"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.OptimizationInterval">
            <summary>The interval between optimization analysis runs. Defaults to 15 minutes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.HotPathThreshold">
            <summary>The execution count threshold to classify a path as hot. Defaults to 100.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.SlowPathThreshold">
            <summary>The average execution time threshold to classify a path as slow. Defaults to 5s.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.HighLatencyThreshold">
            <summary>The average execution time threshold to classify a node as high latency. Defaults to 2s.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.MinimumSuccessRate">
            <summary>The minimum acceptable success rate percentage for nodes. Defaults to 95.0.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.HighUsageThreshold">
            <summary>The total execution threshold to classify a node as high usage. Defaults to 1000.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.TopNodesAnalysisCount">
            <summary>How many top nodes (by total time) to include in deep analysis. Defaults to 10.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.ProfileRetentionPeriod">
            <summary>Retention period after which unused profiles are pruned. Defaults to 7 days.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.CacheOptions">
            <summary>Options for the adaptive cache subsystem.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedOptimizationOptions.ScalingOptions">
            <summary>Options for the predictive scaling subsystem.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AdaptiveCacheOptions">
            <summary>
            Configuration for the adaptive cache subsystem used by the optimization engine.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdaptiveCacheOptions.MaxCacheSize">
            <summary>The maximum number of items to retain in the cache. Defaults to 10,000.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdaptiveCacheOptions.BaseTtl">
            <summary>The base TTL applied to cached items. Defaults to 30 minutes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdaptiveCacheOptions.EnableTtlAdaptation">
            <summary>Whether to enable automatic TTL adaptation based on usage patterns.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdaptiveCacheOptions.AnalysisInterval">
            <summary>The cadence at which the cache is analyzed. Defaults to 5 minutes.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PredictiveScalingOptions">
            <summary>
            Configuration for the predictive scaling subsystem.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PredictiveScalingOptions.TrendAnalysisWindow">
            <summary>The rolling window used for trend analysis. Defaults to 2 hours.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PredictiveScalingOptions.ScalingThreshold">
            <summary>The threshold that triggers scale recommendations (0.0 to 1.0). Defaults to 0.8.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PredictiveScalingOptions.PredictionInterval">
            <summary>The prediction interval for forecasting demand. Defaults to 10 minutes.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.OptimizationResult">
            <summary>
            The aggregate result of an optimization analysis run.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationResult.PathOptimizations">
            <summary>Path‑level optimizations that target frequent or slow execution routes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationResult.NodeOptimizations">
            <summary>Node‑level optimizations that target specific bottlenecks.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationResult.CacheOptimizations">
            <summary>Cache‑related optimizations recommended by the adaptive cache subsystem.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationResult.ScalingRecommendations">
            <summary>Predictive scale‑out/scale‑in recommendations.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationResult.AnalysisTime">
            <summary>Total time spent analyzing metrics.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationResult.TotalOptimizations">
            <summary>Total number of optimization items produced.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PathOptimization">
            <summary>
            Describes an optimization opportunity for a specific execution path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimization.PathKey">
            <summary>The path key identifying the execution route.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimization.Type">
            <summary>The category of optimization.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimization.Description">
            <summary>Human‑readable description of the opportunity.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimization.RecommendedActions">
            <summary>Actionable steps recommended to address the opportunity.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeOptimization">
            <summary>
            Describes an optimization opportunity targeting a specific node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimization.NodeId">
            <summary>The unique node identifier.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimization.Type">
            <summary>The category of optimization.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimization.Impact">
            <summary>The estimated impact of applying the optimization.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimization.Description">
            <summary>Human‑readable description of the opportunity.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimization.RecommendedActions">
            <summary>Actionable steps recommended to address the opportunity.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CacheOptimization">
            <summary>
            Describes an optimization action proposed by the adaptive cache subsystem.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CacheOptimization.Type">
            <summary>The cache optimization category or label.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CacheOptimization.Description">
            <summary>Human‑readable description of the optimization.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CacheOptimization.Parameters">
            <summary>Optional parameters associated with the optimization.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ScalingRecommendation">
            <summary>
            Represents a predictive scaling recommendation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ScalingRecommendation.ScalingType">
            <summary>The type of scaling (e.g., scale‑out, scale‑in).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ScalingRecommendation.Description">
            <summary>Human‑readable description of the recommendation.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ScalingRecommendation.RecommendedValue">
            <summary>The recommended target value (e.g., concurrency level).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeOptimizationRecommendations">
            <summary>
            A container of optimization recommendations for a specific node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationRecommendations.NodeId">
            <summary>The node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationRecommendations.Recommendations">
            <summary>The list of node‑scoped optimization recommendations.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.OptimizationRecommendation">
            <summary>
            Represents an individual optimization recommendation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationRecommendation.Type">
            <summary>The category of optimization.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationRecommendation.Priority">
            <summary>The priority of the recommendation.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationRecommendation.Description">
            <summary>Human‑readable description of the recommendation.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.OptimizationRecommendation.Actions">
            <summary>The concrete actions suggested to implement.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.OptimizationType">
            <summary>
            Types of optimizations produced by the engine.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationType.Performance">
            <summary>Performance‑oriented optimization.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationType.Reliability">
            <summary>Reliability or resiliency improvement.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationType.Scalability">
            <summary>Scalability or capacity‑related optimization.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationType.Consistency">
            <summary>Consistency and latency stability improvement.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationType.Resources">
            <summary>Resource utilization optimization.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.OptimizationPriority">
            <summary>
            Priority levels for optimizations.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationPriority.Low">
            <summary>Low priority.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationPriority.Medium">
            <summary>Medium priority.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationPriority.High">
            <summary>High priority.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationPriority.Critical">
            <summary>Critical priority.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.OptimizationImpact">
            <summary>
            Estimated impact levels for optimizations.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationImpact.Low">
            <summary>Low impact.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationImpact.Medium">
            <summary>Medium impact.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationImpact.High">
            <summary>High impact.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.OptimizationImpact.Critical">
            <summary>Critical impact.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AdvancedRoutingEngine">
            <summary>
            Advanced routing engine for selecting the next node using multiple strategies:
            semantic embeddings, content similarity, probabilistic weighting, contextual history,
            and feedback-learning adjustments.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.#ctor(Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService,SemanticKernel.Graph.Integration.IGraphMemoryService,SemanticKernel.Graph.Core.AdvancedRoutingOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Core.AdvancedRoutingEngine"/>.
            </summary>
            <param name="embeddingService">Text embedding generation service used for semantic similarity.</param>
            <param name="memoryService">Graph memory service used to retrieve similar executions and context.</param>
            <param name="options">Configuration options for advanced routing.</param>
            <param name="logger">Optional logger instance.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.SelectNextNodeAdvancedAsync(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Selects the next node using the configured strategies and aggregates their results
            into a single routing decision.
            </summary>
            <param name="candidates">Candidate nodes to consider.</param>
            <param name="currentNode">The node that was just executed.</param>
            <param name="graphState">The current graph state.</param>
            <param name="executionResult">Optional result from the current node execution.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The selected node and decision metadata, or null when no decision is possible.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.ProvideFeedbackAsync(System.String,SemanticKernel.Graph.Core.RoutingFeedbackInfo,System.Threading.CancellationToken)">
            <summary>
            Provides feedback for a routing decision to improve future decisions via feedback learning.
            </summary>
            <param name="routingDecisionId">The routing decision identifier.</param>
            <param name="feedback">Feedback payload including type and score.</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.GetAnalytics">
            <summary>
            Gets aggregated analytics and performance metrics for routing.
            </summary>
            <returns>Routing analytics information.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.ClearData(System.Boolean)">
            <summary>
            Clears routing history and feedback data.
            </summary>
            <param name="clearEmbeddings">If true, also clears cached node embeddings.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.CreateAdvancedRoutingContextAsync(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Creates an enriched routing context combining state, execution result, and similar history.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.AggregateRoutingResults(System.Collections.Generic.List{SemanticKernel.Graph.Core.RoutingStrategyResult},SemanticKernel.Graph.Core.AdvancedRoutingContext)">
            <summary>
            Aggregates multiple routing strategy results into a final decision.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdvancedRoutingEngine.RecordRoutingDecisionAsync(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.AdvancedRoutingResult,SemanticKernel.Graph.Core.AdvancedRoutingContext)">
            <summary>
            Records a routing decision in history for future analysis.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AdvancedRoutingOptions">
            <summary>
            Options for configuring the advanced routing engine.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.EnableSemanticRouting">
            <summary>Gets or sets whether semantic embedding-based routing is enabled.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.EnableSimilarityRouting">
            <summary>Gets or sets whether content similarity routing is enabled.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.EnableProbabilisticRouting">
            <summary>Gets or sets whether probabilistic routing is enabled.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.EnableContextualRouting">
            <summary>Gets or sets whether contextual routing is enabled.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.EnableFeedbackLearning">
            <summary>Gets or sets whether feedback learning routing is enabled.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.SemanticSimilarityThreshold">
            <summary>Gets or sets the similarity threshold for semantic routing (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.HistoryLookbackLimit">
            <summary>Gets or sets the number of similar executions to consider for contextual routing.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.FeedbackLearningRate">
            <summary>Gets or sets the learning rate for feedback-based adjustments (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.ProbabilisticDecayFactor">
            <summary>Gets or sets the decay factor for probabilistic weights (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AdvancedRoutingOptions.MinimumConfidenceThreshold">
            <summary>Gets or sets the minimum confidence threshold for routing decisions (0.0 to 1.0).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AdvancedRoutingContext">
            <summary>
            Advanced routing context with enriched information.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AdvancedRoutingResult">
            <summary>
            Result of advanced routing decision.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingStrategyType">
            <summary>
            Types of routing strategies available.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingAnalytics">
            <summary>
            Analytics data for routing decisions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentConnectionPool">
            <summary>
            Thread-safe pool that manages reusable <see cref="T:SemanticKernel.Graph.Core.IAgentConnection"/> instances per agent,
            offering fair selection among healthy connections and basic health-aware rent semantics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentConnectionPool.Register(System.String,SemanticKernel.Graph.Core.IAgentConnection)">
            <summary>
            Registers a connection instance for a given agent. The pool does not own the lifecycle; it will dispose on pool disposal.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentConnectionPool.UnregisterAsync(System.String,SemanticKernel.Graph.Core.IAgentConnection)">
            <summary>
            Unregisters and disposes a specific connection for an agent.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentConnectionPool.RentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Rents a healthy connection for the specified agent. Returns null if none are available.
            Does not keep a lease handle; callers are expected to perform short operations and not hold indefinitely.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentConnectionPoolOptions">
            <summary>
            Options for agent connection pooling and reuse.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentConnectionPoolOptions.MaxConnectionsPerAgent">
            <summary>
            Maximum number of connections tracked by the pool per agent. 0 or less disables per-agent limit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentConnectionPoolOptions.MaxConcurrentRentals">
            <summary>
            Maximum global concurrent rentals across all agents. 0 or less disables global limit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentConnectionPoolOptions.MaxConcurrentRentalsPerAgent">
            <summary>
            Maximum concurrent rentals per agent. 0 or less disables per-agent rental limit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentConnectionPoolOptions.EnableMetrics">
            <summary>
            Whether metrics should be enabled for the pool.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentConnectionPoolOptions.MetricsMeterName">
            <summary>
            Name of the meter to create when metrics are enabled.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentHealthMonitor">
            <summary>
            Monitors health and performance for multiple agents in coordinated execution.
            Provides periodic health checks, performance tracking, metrics aggregation, and
            event notifications for unhealthy agents and system conditions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.#ctor(SemanticKernel.Graph.Core.HealthMonitoringOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of AgentHealthMonitor.
            </summary>
            <param name="options">Health monitoring configuration options</param>
            <param name="logger">Optional logger for health monitoring operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthMonitor.Options">
            <summary>
            Gets the health monitoring configuration options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthMonitor.MonitoredAgentCount">
            <summary>
            Gets the number of agents being monitored.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthMonitor.HealthyAgentCount">
            <summary>
            Gets the number of healthy agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthMonitor.UnhealthyAgentCount">
            <summary>
            Gets the number of unhealthy agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthMonitor.SystemHealthRatio">
            <summary>
            Gets the overall system health ratio.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.RegisterAgentAsync(SemanticKernel.Graph.Core.AgentInstance)">
            <summary>
            Registers an agent for health monitoring.
            </summary>
            <param name="agent">Agent instance to monitor</param>
            <returns>Task representing the registration operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.UnregisterAgentAsync(System.String)">
            <summary>
            Unregisters an agent from health monitoring.
            </summary>
            <param name="agentId">Agent identifier</param>
            <returns>Task representing the unregistration operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.GetAgentHealth(System.String)">
            <summary>
            Gets the current health status of an agent.
            </summary>
            <param name="agentId">Agent identifier</param>
            <returns>Agent health status if found, null otherwise</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.GetAllAgentHealth">
            <summary>
            Gets health status for all monitored agents.
            </summary>
            <returns>Collection of agent health statuses</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.RecordAgentActivity(System.String,SemanticKernel.Graph.Core.AgentActivity,System.Boolean,System.TimeSpan,System.Exception)">
            <summary>
            Records an agent activity to update health status.
            </summary>
            <param name="agentId">Agent identifier</param>
            <param name="activity">Activity type</param>
            <param name="success">Whether the activity was successful</param>
            <param name="duration">Activity duration</param>
            <param name="error">Error information if activity failed</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.PerformHealthCheckAsync(System.String)">
            <summary>
            Performs a manual health check on a specific agent.
            </summary>
            <param name="agentId">Agent identifier</param>
            <returns>Health check result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.RegisterEventHandler(SemanticKernel.Graph.Core.IHealthEventHandler)">
            <summary>
            Registers a health event handler.
            </summary>
            <param name="handler">Event handler to register</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.UnregisterEventHandler(SemanticKernel.Graph.Core.IHealthEventHandler)">
            <summary>
            Unregisters a health event handler.
            </summary>
            <param name="handler">Event handler to unregister</param>
            <returns>True if handler was removed, false if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.PerformHealthChecks(System.Object)">
            <summary>
            Performs periodic health checks on all registered agents.
            </summary>
            <param name="state">Timer state (unused)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.EvaluateTimeBasedCircuitTransitions(SemanticKernel.Graph.Core.AgentHealthStatus)">
            <summary>
            Evaluates time-based transitions for an agent circuit breaker and advances states when applicable.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.EvaluateCircuitBreakerOnFailure(SemanticKernel.Graph.Core.AgentHealthStatus)">
            <summary>
            Evaluates circuit breaker transitions on failure.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.CollectMetrics(System.Object)">
            <summary>
            Collects performance metrics from all agents.
            </summary>
            <param name="state">Timer state (unused)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.CalculateAverageResponseTime">
            <summary>
            Calculates the average response time across all agents.
            </summary>
            <returns>Average response time</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.CalculateTotalThroughput">
            <summary>
            Calculates the total system throughput.
            </summary>
            <returns>Total throughput per minute</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.NotifyHealthEventAsync(System.String,SemanticKernel.Graph.Core.HealthEventType,System.Exception)">
            <summary>
            Notifies registered handlers about health events.
            </summary>
            <param name="agentId">Agent identifier</param>
            <param name="eventType">Event type</param>
            <param name="error">Associated error if any</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.NotifyMetricsCollectedAsync(SemanticKernel.Graph.Core.SystemHealthMetrics)">
            <summary>
            Notifies registered handlers about metrics collection.
            </summary>
            <param name="metrics">System health metrics</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentHealthMonitor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ChainOfThoughtCache">
             <summary>
             Provides an intelligent cache for Chain‑of‑Thought (CoT) reasoning results to improve performance
             and consistency across repeated or similar prompts.
             </summary>
             <remarks>
             Capabilities:
             1. Semantic similarity grouping for opportunistic reuse of similar reasoning contexts
             2. Quality filtering to admit only high‑quality reasoning results
             3. Time‑based expiration with periodic cleanup
             4. Memory‑aware size management with LRU eviction when the cache is full
             5. Low‑overhead lookups and write operations with granular locking
            
             Thread‑safety: public members are safe for concurrent access. A <see cref="T:System.Threading.ReaderWriterLockSlim"/>
             coordinates read/write operations. Callers do not need external synchronization.
            
             Disposal: calling <see cref="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.Dispose"/> stops background cleanup and releases internal resources.
             The instance should not be used after disposal.
            
             Example:
             <code>
             var cache = new ChainOfThoughtCache(logger);
             var key = cache.GenerateContextCacheKey(context, ChainOfThoughtType.Deliberate);
             if (!cache.TryGetCachedResult(key, out var result))
             {
                 result = await RunReasoningAsync(context);
                 cache.CacheResult(key, result);
             }
             </code>
             </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.#ctor(SemanticKernel.Graph.Integration.IGraphLogger,SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Core.ChainOfThoughtCache"/>.
            </summary>
            <param name="logger">Optional logger for cache diagnostics and lifecycle events.</param>
            <param name="options">Optional cache configuration. If null, sensible defaults are used.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.TryGetCachedResult(System.String,SemanticKernel.Graph.Nodes.ChainOfThoughtResult@)">
            <summary>
            Attempts to retrieve a cached reasoning result.
            </summary>
            <param name="cacheKey">The cache key to look up.</param>
            <param name="result">When this method returns, contains the cached result if found; otherwise, <c>null</c>.</param>
            <returns><c>true</c> for a cache hit; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="cacheKey"/> is null or whitespace.</exception>
            <remarks>
            On a cache hit, this method updates last‑access time and hit counters. If an entry has expired it is
            removed and the method returns <c>false</c>. Unexpected errors are logged and treated as cache misses.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.CacheResult(System.String,SemanticKernel.Graph.Nodes.ChainOfThoughtResult,System.Nullable{System.TimeSpan})">
            <summary>
            Attempts to cache a reasoning result when it satisfies admission criteria.
            </summary>
            <param name="cacheKey">The key under which to store the result.</param>
            <param name="result">The reasoning result to cache.</param>
            <param name="customTtl">Optional per‑entry TTL overriding the default.</param>
            <returns>
            <c>true</c> if the result was cached; otherwise <c>false</c> when rejected due to quality, success state,
            or an internal error.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="cacheKey"/> is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="result"/> is null.</exception>
            <remarks>
            Reasons for rejection include: quality below <see cref="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions.MinimumQualityScore"/>,
            unsuccessful results (<see cref="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.IsSuccessful"/> is <c>false</c>), and transient internal errors.
            When the cache is full, an LRU eviction pass is performed prior to insertion.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.GenerateContextCacheKey(SemanticKernel.Graph.Nodes.ChainOfThoughtContext,SemanticKernel.Graph.Nodes.ChainOfThoughtType)">
            <summary>
            Generates a deterministic cache key derived from the reasoning context and type.
            </summary>
            <param name="context">The reasoning context to derive the key from.</param>
            <param name="reasoningType">The type of reasoning being performed.</param>
            <returns>A stable, hashed cache key suitable for dictionary lookup.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/> is null.</exception>
            <remarks>
            Textual fields are normalized (trimmed, lower‑cased, whitespace‑compressed) and combined with a hash of
            additional context to produce a compact key.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.FindSimilarResults(SemanticKernel.Graph.Nodes.ChainOfThoughtContext,SemanticKernel.Graph.Nodes.ChainOfThoughtType,System.Double)">
            <summary>
            Finds similar cached results based on a normalized key similarity heuristic.
            </summary>
            <param name="context">The context to search against.</param>
            <param name="reasoningType">The type of reasoning.</param>
            <param name="similarityThreshold">The minimum similarity score in [0.0, 1.0].</param>
            <returns>A list of similar cached results ordered by similarity score (descending).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="similarityThreshold"/> is outside [0.0, 1.0].</exception>
            <remarks>
            This uses a lightweight Levenshtein‑based key comparison as a proxy for semantic similarity.
            In production, replace with an embedding‑based metric for better precision.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.GetStatistics">
            <summary>
            Gets a snapshot of the current cache statistics.
            </summary>
            <returns>An immutable snapshot of aggregate cache metrics.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.ClearCache">
            <summary>
            Clears all cache entries and resets access statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.RemoveExpiredEntries">
            <summary>
            Removes expired cache entries.
            </summary>
            <returns>The number of entries removed.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.Dispose">
            <summary>
            Releases resources used by the cache and stops periodic cleanup.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.SerializeResult(SemanticKernel.Graph.Nodes.ChainOfThoughtResult)">
            <summary>
            Serializes a reasoning result for caching.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.DeserializeResult(System.String)">
            <summary>
            Deserializes a cached reasoning result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.CalculateResultSize(SemanticKernel.Graph.Nodes.ChainOfThoughtResult)">
            <summary>
            Calculates the approximate size of a reasoning result for memory tracking.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.NormalizeText(System.String)">
            <summary>
            Normalizes text for consistent cache key generation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.ComputeHash(System.String)">
            <summary>
            Computes hash of a string for cache key generation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.CalculateKeySimilarity(System.String,System.String)">
            <summary>
            Calculates similarity between cache keys (simplified heuristic).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.CalculateLevenshteinDistance(System.String,System.String)">
            <summary>
            Calculates Levenshtein distance between two strings.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.EvictLeastRecentlyUsed">
            <summary>
            Evicts least recently used cache entries to make room.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.UpdateStatistics(System.String,System.Boolean)">
            <summary>
            Updates cache access statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtCache.PerformCleanup(System.Object)">
            <summary>
            Periodic cleanup of expired entries.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions">
            <summary>
            Configuration options for the <see cref="T:SemanticKernel.Graph.Core.ChainOfThoughtCache"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions.MaxCacheSize">
            <summary>
            The maximum number of entries to keep in cache. When the limit is reached, an LRU pass
            evicts older entries to admit new ones. Defaults to 1000.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions.DefaultTtl">
            <summary>
            The default time‑to‑live (TTL) for cache entries. Defaults to 2 hours.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions.MinimumQualityScore">
            <summary>
            The minimum quality score required for a result to be cached (0.0 to 1.0). Defaults to 0.7.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions.CleanupIntervalMinutes">
            <summary>
            The interval, in minutes, between periodic cleanup runs. Defaults to 15 minutes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions.MaxMemoryUsage">
            <summary>
            The soft limit for total cached memory usage in bytes. Used for monitoring; admission and
            eviction are primarily driven by <see cref="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheOptions.MaxCacheSize"/>. Defaults to 50 MB.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CacheEntry">
            <summary>
            Internal cache entry structure.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CacheStatistics">
            <summary>
            Statistics for cache key access patterns.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SimilarCacheResult">
            <summary>
            Represents a result obtained from a similarity‑based cache search.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SimilarCacheResult.CacheKey">
            <summary>Cache key of the similar result.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SimilarCacheResult.Result">
            <summary>The cached reasoning result.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SimilarCacheResult.SimilarityScore">
            <summary>Similarity score to the search context (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SimilarCacheResult.QualityScore">
            <summary>Quality score of the cached result.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SimilarCacheResult.HitCount">
            <summary>Number of times this result has been accessed.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SimilarCacheResult.CachedAt">
            <summary>When this result was originally cached.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats">
            <summary>
            Comprehensive cache performance statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.TotalEntries">
            <summary>Total number of entries currently in cache.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.TotalHits">
            <summary>Total number of cache hits.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.TotalMisses">
            <summary>Total number of cache misses.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.HitRate">
            <summary>Cache hit rate (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.AverageQualityScore">
            <summary>Average quality score of cached results.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.TotalMemoryUsage">
            <summary>Total memory usage of cached results in bytes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.OldestEntry">
            <summary>Timestamp of oldest cache entry.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.NewestEntry">
            <summary>Timestamp of newest cache entry.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.MostPopularKey">
            <summary>Cache key with most hits.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtCacheStats.ExpiringEntriesCount">
            <summary>Number of entries expiring within 10 minutes.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ChainOfThoughtValidator">
            <summary>
            Validator for Chain-of-Thought reasoning steps.
            Provides validation logic to ensure quality and consistency of reasoning chains.
            </summary>
            <remarks>
            The ChainOfThoughtValidator implements step-by-step validation by:
            1. **Content Quality**: Validates that each step contains meaningful reasoning
            2. **Logical Consistency**: Ensures steps follow logically from previous steps
            3. **Confidence Assessment**: Evaluates confidence levels for each step
            4. **Custom Rules**: Supports custom validation rules for specific domains
            5. **Backtracking Guidance**: Provides recommendations for failed validations
            
            Key features:
            - Multi-level validation: Content, logic, and consistency checks
            - Configurable thresholds: Minimum quality and confidence requirements
            - Custom rule system: Domain-specific validation logic
            - Backtracking recommendations: Intelligent guidance for recovery
            - Performance optimization: Efficient validation with caching
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.#ctor(SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ChainOfThoughtValidator.
            </summary>
            <param name="logger">Optional logger for validation activities</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.ValidateStepAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,SemanticKernel.Graph.Nodes.ChainOfThoughtContext,SemanticKernel.Graph.Nodes.ChainOfThoughtResult,System.Threading.CancellationToken)">
            <summary>
            Validates a Chain-of-Thought reasoning step.
            </summary>
            <param name="step">The reasoning step to validate</param>
            <param name="context">The reasoning context</param>
            <param name="previousResult">Previous reasoning steps for consistency checking</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result with pass/fail status and recommendations</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.AddCustomRules(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IChainOfThoughtValidationRule})">
            <summary>
            Adds custom validation rules to the validator.
            </summary>
            <param name="rules">Custom validation rules to add</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.UpdateThresholds(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Updates validation thresholds.
            </summary>
            <param name="thresholds">Dictionary of threshold names and values</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.InitializeDefaultRules">
            <summary>
            Initializes default validation rules.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.ValidateContentQualityAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,SemanticKernel.Graph.Core.ChainOfThoughtValidationResult,System.Threading.CancellationToken)">
            <summary>
            Validates the content quality of a reasoning step.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.ValidateLogicalConsistencyAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,SemanticKernel.Graph.Nodes.ChainOfThoughtResult,SemanticKernel.Graph.Core.ChainOfThoughtValidationResult,System.Threading.CancellationToken)">
            <summary>
            Validates logical consistency with previous steps.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.ValidateConfidenceAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,SemanticKernel.Graph.Core.ChainOfThoughtValidationResult,System.Threading.CancellationToken)">
            <summary>
            Validates confidence level of the reasoning step.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.ValidateProgressionAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,SemanticKernel.Graph.Nodes.ChainOfThoughtContext,SemanticKernel.Graph.Nodes.ChainOfThoughtResult,SemanticKernel.Graph.Core.ChainOfThoughtValidationResult,System.Threading.CancellationToken)">
            <summary>
            Validates that the step shows progression toward the goal.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.ApplyCustomRulesAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,SemanticKernel.Graph.Nodes.ChainOfThoughtContext,SemanticKernel.Graph.Nodes.ChainOfThoughtResult,SemanticKernel.Graph.Core.ChainOfThoughtValidationResult,System.Threading.CancellationToken)">
            <summary>
            Applies custom validation rules.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.CalculateValidationResult(SemanticKernel.Graph.Core.ChainOfThoughtValidationResult)">
            <summary>
            Calculates the final validation result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.CalculateMeaningfulContentRatio(System.String)">
            <summary>
            Calculates meaningful content ratio for text analysis.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.ContainsFoundationalLanguage(System.String)">
            <summary>
            Checks if content contains foundational language patterns.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.CalculateConnectivityScore(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ChainOfThoughtStep})">
            <summary>
            Calculates connectivity score between current step and previous steps.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.DetectContradictions(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ChainOfThoughtStep})">
            <summary>
            Detects potential contradictions with previous steps.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.CalculateConfidenceScore(System.String)">
            <summary>
            Calculates confidence score based on language patterns.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.CalculateProgressionScore(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,SemanticKernel.Graph.Nodes.ChainOfThoughtContext,SemanticKernel.Graph.Nodes.ChainOfThoughtResult)">
            <summary>
            Calculates progression score toward the goal.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.DetectCircularReasoning(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ChainOfThoughtStep})">
            <summary>
            Detects circular reasoning patterns.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.ExtractKeyWords(System.String)">
            <summary>
            Extracts key words from content for analysis.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.CalculateBacktrackSteps(System.Collections.Generic.List{SemanticKernel.Graph.State.ValidationIssue})">
            <summary>
            Calculates suggested number of backtrack steps.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ChainOfThoughtValidator.GenerateFailureReason(System.Collections.Generic.List{SemanticKernel.Graph.State.ValidationIssue})">
            <summary>
            Generates failure reason from validation issues.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult">
            <summary>
            Result of Chain-of-Thought step validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult.StepNumber">
            <summary>Step number that was validated.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult.IsValid">
            <summary>Whether the step passed validation.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult.ConfidenceScore">
            <summary>Confidence score for the validation (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult.FailureReason">
            <summary>Reason for validation failure, if any.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult.Issues">
            <summary>Validation issues found.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult.Recommendations">
            <summary>Recommendations for improvement.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult.SuggestedBacktrackSteps">
            <summary>Suggested number of steps to backtrack if validation fails.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ChainOfThoughtValidationResult.ValidationTimestamp">
            <summary>When validation was performed.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IChainOfThoughtValidationRule">
            <summary>
            Interface for custom Chain-of-Thought validation rules.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IChainOfThoughtValidationRule.Name">
            <summary>Name of the validation rule.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IChainOfThoughtValidationRule.Description">
            <summary>Description of what the rule validates.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IChainOfThoughtValidationRule.ValidateAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtStep,SemanticKernel.Graph.Nodes.ChainOfThoughtContext,SemanticKernel.Graph.Nodes.ChainOfThoughtResult,System.Threading.CancellationToken)">
            <summary>
            Validates a reasoning step according to this rule.
            </summary>
            <param name="step">Step to validate</param>
            <param name="context">Reasoning context</param>
            <param name="previousResult">Previous reasoning steps</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ContentLengthValidationRule">
            <summary>
            Built-in validation rule for content length requirements.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RepetitionValidationRule">
            <summary>
            Built-in validation rule for repetition detection.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CoherenceValidationRule">
            <summary>
            Built-in validation rule for logical coherence.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointCleanupService">
            <summary>
            Background service that periodically cleans up old checkpoints based on retention policies.
            Provides automatic lifecycle management for checkpoint storage optimization.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCleanupService.#ctor(SemanticKernel.Graph.Core.ICheckpointManager,SemanticKernel.Graph.Integration.IGraphMemoryService,Microsoft.Extensions.Options.IOptions{SemanticKernel.Graph.Core.CheckpointCleanupOptions},Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.CheckpointCleanupService})">
            <summary>
            Initializes a new instance of CheckpointCleanupService.
            </summary>
            <param name="checkpointManager">Checkpoint manager for cleanup operations</param>
            <param name="memoryService">Graph memory service for additional cleanup</param>
            <param name="options">Cleanup configuration options</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCleanupService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the cleanup service logic.
            </summary>
            <param name="stoppingToken">Cancellation token for stopping the service</param>
            <returns>Task representing the service execution</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCleanupService.PerformCleanupAsync(System.Threading.CancellationToken)">
            <summary>
            Performs a single cleanup operation.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the cleanup operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCleanupService.PerformAdvancedCleanupAsync(System.Threading.CancellationToken)">
            <summary>
            Performs advanced cleanup operations based on storage and performance constraints.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of additional entries removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCleanupService.UpdateCleanupStatisticsAsync(System.Int32,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Updates cleanup statistics in memory for monitoring purposes.
            </summary>
            <param name="entriesRemoved">Number of entries removed in this cycle</param>
            <param name="duration">Duration of the cleanup operation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the update operation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointCleanupOptions">
            <summary>
            Configuration options for the checkpoint cleanup service.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCleanupOptions.CleanupInterval">
            <summary>
            Gets or sets the interval between cleanup operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCleanupOptions.DefaultRetentionPolicy">
            <summary>
            Gets or sets the default retention policy for cleanup operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCleanupOptions.EnableAdvancedCleanup">
            <summary>
            Gets or sets whether to enable advanced cleanup features.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCleanupOptions.MaxTotalStorageBytes">
            <summary>
            Gets or sets the maximum total storage size for all checkpoints.
            When exceeded, oldest checkpoints will be removed regardless of age.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCleanupOptions.AuditRetentionPeriod">
            <summary>
            Gets or sets the retention period for audit entries (validation, backup logs).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCleanupOptions.EnableDetailedLogging">
            <summary>
            Gets or sets whether to log detailed cleanup information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCleanupOptions.MaxCleanupDuration">
            <summary>
            Gets or sets the maximum duration for a single cleanup operation.
            If exceeded, the cleanup will be cancelled and resumed in the next cycle.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCleanupOptions.RunCleanupOnStartup">
            <summary>
            Gets or sets whether to run cleanup on service startup.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointCleanupServiceExtensions">
            <summary>
            Extension methods for configuring checkpoint cleanup service.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCleanupServiceExtensions.AddCheckpointCleanupService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{SemanticKernel.Graph.Core.CheckpointCleanupOptions})">
            <summary>
            Adds the checkpoint cleanup service to the service collection.
            </summary>
            <param name="services">Service collection</param>
            <param name="configureOptions">Optional configuration for cleanup options</param>
            <returns>Service collection for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCleanupServiceExtensions.WithRetentionPolicy(SemanticKernel.Graph.Core.CheckpointCleanupOptions,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Configures the cleanup service with specific retention policies.
            </summary>
            <param name="options">Cleanup options to configure</param>
            <param name="maxAge">Maximum age of checkpoints to keep</param>
            <param name="maxCheckpointsPerExecution">Maximum checkpoints per execution</param>
            <param name="maxTotalStorage">Maximum total storage size</param>
            <returns>Configured options for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCleanupServiceExtensions.WithCleanupInterval(SemanticKernel.Graph.Core.CheckpointCleanupOptions,System.TimeSpan)">
            <summary>
            Configures the cleanup interval.
            </summary>
            <param name="options">Cleanup options to configure</param>
            <param name="interval">Cleanup interval</param>
            <returns>Configured options for method chaining</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DelegatingLoggerProvider">
            <summary>
            Logger provider that delegates to an existing logger instance.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DelegatingLogger">
            <summary>
            Logger that delegates to an existing logger instance.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointingGraphExecutor">
            <summary>
            Graph executor with integrated checkpointing capabilities.
            Uses composition to add checkpointing functionality to graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.LastExecutionId">
            <summary>
            Gets the identifier of the most recent execution run for this executor.
            Useful for querying checkpoint statistics after execution completes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.#ctor(System.String,SemanticKernel.Graph.Core.ICheckpointManager,SemanticKernel.Graph.Core.CheckpointingOptions,System.String,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.CheckpointingGraphExecutor})">
            <summary>
            Initializes a new instance of CheckpointingGraphExecutor.
            </summary>
            <param name="name">Name of this graph</param>
            <param name="checkpointManager">Checkpoint manager for persistence</param>
            <param name="checkpointingOptions">Checkpointing configuration options</param>
            <param name="description">Description of what this graph does</param>
            <param name="logger">Optional logger for graph execution</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.GraphId">
            <summary>
            Gets the unique identifier for this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.Name">
            <summary>
            Gets the name of this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.Description">
            <summary>
            Gets the description of this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.CreatedAt">
            <summary>
            Gets the timestamp when this graph was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.StartNode">
            <summary>
            Gets the starting node for execution (if set).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.Nodes">
            <summary>
            Gets all nodes in this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.Edges">
            <summary>
            Gets all edges in this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.NodeCount">
            <summary>
            Gets the number of nodes in this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.EdgeCount">
            <summary>
            Gets the number of edges in this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.IsReadyForExecution">
            <summary>
            Gets whether the graph is ready for execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.CheckpointManager">
            <summary>
            Gets the checkpoint manager used by this executor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.Options">
            <summary>
            Gets the checkpointing options configured for this executor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.RecoveryService">
            <summary>
            Gets or sets the recovery service for automatic failure handling.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.AddNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to the graph.
            </summary>
            <param name="node">Node to add</param>
            <returns>This executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.RemoveNode(System.String)">
            <summary>
            Removes a node from the graph.
            </summary>
            <param name="nodeId">ID of the node to remove</param>
            <returns>True if the node was removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.AddEdge(SemanticKernel.Graph.Core.ConditionalEdge)">
            <summary>
            Adds an edge to the graph.
            </summary>
            <param name="edge">Edge to add</param>
            <returns>This executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.Connect(System.String,System.String,System.String)">
            <summary>
            Connects two nodes with a simple edge.
            </summary>
            <param name="sourceNodeId">Source node ID</param>
            <param name="targetNodeId">Target node ID</param>
            <param name="edgeName">Optional edge name</param>
            <returns>This executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ConnectWhen(System.String,System.String,System.Func{Microsoft.SemanticKernel.KernelArguments,System.Boolean},System.String)">
            <summary>
            Connects two nodes with a conditional edge.
            </summary>
            <param name="sourceNodeId">Source node ID</param>
            <param name="targetNodeId">Target node ID</param>
            <param name="condition">Condition function</param>
            <param name="edgeName">Optional edge name</param>
            <returns>This executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.SetStartNode(System.String)">
            <summary>
            Sets the start node for the graph.
            </summary>
            <param name="nodeId">ID of the start node</param>
            <returns>This executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.GetNode(System.String)">
            <summary>
            Gets a node by ID.
            </summary>
            <param name="nodeId">Node ID</param>
            <returns>The node if found, null otherwise</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ValidateGraphIntegrity">
            <summary>
            Validates the graph integrity.
            </summary>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the graph with checkpointing enabled.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Final execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ExecuteFromAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the graph from a specific node with automatic checkpointing.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Input arguments for the graph</param>
            <param name="startNodeId">ID of the node to start execution from</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ResumeFromCheckpointAsync(System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Resumes execution from a specific checkpoint.
            </summary>
            <param name="checkpointId">Checkpoint ID to resume from</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Final execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.GetExecutionCheckpointsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all checkpoints for the most recent execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of checkpoints</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ValidateExecutionCheckpointsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates all checkpoints for a specific execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Dictionary of checkpoint validation results</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ExecuteNodeAsync(SemanticKernel.Graph.Core.IGraphNode,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes a single node with checkpointing support.
            </summary>
            <param name="node">Node to execute</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Input arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ExecuteGraphAsync(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode},Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes multiple nodes with checkpointing support.
            </summary>
            <param name="nodes">Nodes to execute</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Input arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ExecuteWithRecoveryAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the graph with automatic recovery on failure.
            If execution fails, attempts automatic recovery using the configured recovery service.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Final execution result, potentially recovered from failure</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ExecuteWithCheckpointingAsync(SemanticKernel.Graph.Execution.GraphExecutionContext,System.String)">
            <summary>
            Executes the graph with checkpointing logic integrated.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ShouldCreateCheckpoint(System.String)">
            <summary>
            Determines if a checkpoint should be created based on current execution state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.CreateCheckpointAsync(System.String,SemanticKernel.Graph.State.GraphState,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a checkpoint with proper metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ShouldAttemptRecovery(System.Exception)">
            <summary>
            Determines if recovery should be attempted for the given exception.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.CreateFailureContext(System.String,System.Exception,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Creates a failure context from an exception and execution state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.ClassifyFailureType(System.Exception)">
            <summary>
            Classifies the type of failure based on the exception.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.DetermineFailureSeverity(System.Exception,SemanticKernel.Graph.Core.FailureType)">
            <summary>
            Determines the severity of a failure based on exception and type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointingGraphExecutor.DetermineRecoverability(System.Exception,SemanticKernel.Graph.Core.FailureType)">
            <summary>
            Determines if a failure is recoverable based on exception and type.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphExecutionRecoveryException">
            <summary>
            Exception thrown when graph execution recovery fails.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionRecoveryException.ExecutionId">
            <summary>
            Gets the execution identifier that failed recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionRecoveryException.OriginalException">
            <summary>
            Gets the original exception that caused the failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionRecoveryException.RecoveryResult">
            <summary>
            Gets the recovery result (if recovery was attempted).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionRecoveryException.RecoveryException">
            <summary>
            Gets the recovery exception (if recovery failed with an error).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutionRecoveryException.#ctor(System.String,System.Exception,SemanticKernel.Graph.Core.RecoveryResult,System.Exception)">
            <summary>
            Initializes a new instance of GraphExecutionRecoveryException.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="originalException">Original exception that caused the failure</param>
            <param name="recoveryResult">Recovery result (if available)</param>
            <param name="recoveryException">Recovery exception (if recovery failed)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutionRecoveryException.CreateMessage(System.String,System.Exception,SemanticKernel.Graph.Core.RecoveryResult,System.Exception)">
            <summary>
            Creates the exception message based on the recovery context.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointingOptions">
            <summary>
            Configuration options for checkpointing behavior.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.CheckpointInterval">
            <summary>
            Gets or sets the interval (in number of executed nodes) for creating checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.CheckpointTimeInterval">
            <summary>
            Gets or sets the optional time interval for creating checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.CreateInitialCheckpoint">
            <summary>
            Gets or sets whether to create an initial checkpoint before execution starts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.CreateFinalCheckpoint">
            <summary>
            Gets or sets whether to create a final checkpoint after execution completes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.CreateErrorCheckpoints">
            <summary>
            Gets or sets whether to create checkpoints when errors occur.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.CriticalNodes">
            <summary>
            Gets or sets the list of critical node IDs that should always trigger checkpoint creation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.EnableAutoCleanup">
            <summary>
            Gets or sets whether to enable automatic cleanup of old checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.RetentionPolicy">
            <summary>
            Gets or sets the retention policy for automatic cleanup.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.EnableDistributedBackup">
            <summary>
            Gets or sets whether to enable distributed backup of critical checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.BackupOptions">
            <summary>
            Gets or sets the backup options for distributed storage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.CriticalCheckpointMultiplier">
            <summary>
            Gets or sets the multiplier for determining critical checkpoints for backup.
            Critical checkpoints occur every (CheckpointInterval * CriticalCheckpointMultiplier) nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointingOptions.FailOnCheckpointError">
            <summary>
            Gets or sets whether execution should fail if checkpoint creation fails.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointManager">
            <summary>
            Default implementation of ICheckpointManager that integrates with Semantic Kernel's memory system.
            Provides comprehensive checkpoint management with configurable persistence, compression, and backup.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.#ctor(SemanticKernel.Graph.Integration.IGraphMemoryService,SemanticKernel.Graph.Core.CheckpointOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.CheckpointManager})">
            <summary>
            Initializes a new instance of CheckpointManager.
            </summary>
            <param name="memoryService">Graph memory service for persistence</param>
            <param name="options">Checkpoint configuration options</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.CreateCheckpointAsync(System.String,SemanticKernel.Graph.State.GraphState,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.GetCheckpointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.GetLatestCheckpointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.ListCheckpointsAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.RestoreFromCheckpointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.CleanupCheckpointsAsync(System.String,SemanticKernel.Graph.Core.CheckpointRetentionPolicy,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.ValidateCheckpointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.BackupCheckpointsAsync(System.String,SemanticKernel.Graph.Core.CheckpointBackupOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.GetRecoveryRecommendationAsync(System.String,SemanticKernel.Graph.Core.ExecutionFailureContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.ValidateRestoredStateConsistencyAsync(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.RecoveryContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.GenerateCheckpointId(System.String,System.String)">
            <summary>
            Generates a unique checkpoint ID.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.CalculateChecksum(System.String)">
            <summary>
            Calculates SHA256 checksum for data integrity.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.CreateCheckpointFromExecution(SemanticKernel.Graph.Integration.GraphExecutionMemory)">
            <summary>
            Creates a GraphCheckpoint from a GraphExecutionMemory.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.CalculateRecoveryScore(SemanticKernel.Graph.Core.GraphCheckpoint,SemanticKernel.Graph.Core.ExecutionFailureContext)">
            <summary>
            Calculates a recovery score for a checkpoint based on failure context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.DetermineRecoveryRisk(System.Double,SemanticKernel.Graph.Core.ExecutionFailureContext)">
            <summary>
            Determines recovery risk level based on score and failure context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.GenerateRecoveryStrategies(SemanticKernel.Graph.Core.GraphCheckpoint,SemanticKernel.Graph.Core.ExecutionFailureContext)">
            <summary>
            Generates recovery strategies based on checkpoint and failure context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.EstimateRecoveryTime(SemanticKernel.Graph.Core.GraphCheckpoint,SemanticKernel.Graph.Core.ExecutionFailureContext)">
            <summary>
            Estimates recovery time based on checkpoint and failure context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.ValidateStateStructure(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.RecoveryContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.ConsistencyIssue},System.Collections.Generic.Dictionary{System.String,SemanticKernel.Graph.Core.ValidationElementResult})">
            <summary>
            Validates the basic structure of the restored state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.ValidateStateVersion(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.RecoveryContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.ConsistencyIssue},System.Collections.Generic.Dictionary{System.String,SemanticKernel.Graph.Core.ValidationElementResult})">
            <summary>
            Validates state version compatibility.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.ValidateExpectedValues(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.RecoveryContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.ConsistencyIssue},System.Collections.Generic.Dictionary{System.String,SemanticKernel.Graph.Core.ValidationElementResult})">
            <summary>
            Validates expected state values against recovered state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.ValidateTemporalConsistency(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.RecoveryContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.ConsistencyIssue},System.Collections.Generic.Dictionary{System.String,SemanticKernel.Graph.Core.ValidationElementResult})">
            <summary>
            Validates temporal consistency of the restored state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.ValidateReferences(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.RecoveryContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.ConsistencyIssue},System.Collections.Generic.Dictionary{System.String,SemanticKernel.Graph.Core.ValidationElementResult})">
            <summary>
            Validates references and dependencies in the restored state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.CalculateConsistencyScore(System.Collections.Generic.Dictionary{System.String,SemanticKernel.Graph.Core.ValidationElementResult},System.Collections.Generic.List{SemanticKernel.Graph.Core.ConsistencyIssue})">
            <summary>
            Calculates overall consistency score based on validation results.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.GenerateConsistencyRecommendations(System.Collections.Generic.List{SemanticKernel.Graph.Core.ConsistencyIssue},System.Collections.Generic.List{System.String})">
            <summary>
            Generates recommendations for fixing consistency issues.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointManager.CompareValues(System.Object,System.Object)">
            <summary>
            Compares two values for consistency validation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointOptions">
            <summary>
            Configuration options for checkpoint management.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointOptions.EnableCompression">
            <summary>
            Gets or sets whether to enable compression for checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointOptions.MaxCacheSize">
            <summary>
            Gets or sets the maximum number of checkpoints to keep in memory cache.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointOptions.DefaultRetentionPolicy">
            <summary>
            Gets or sets the default retention policy for checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointOptions.EnableAutoCleanup">
            <summary>
            Gets or sets whether to automatically clean up old checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointOptions.AutoCleanupInterval">
            <summary>
            Gets or sets the interval for automatic cleanup operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointOptions.EnableDistributedBackup">
            <summary>
            Gets or sets whether to enable distributed backup for critical checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointOptions.DefaultBackupOptions">
            <summary>
            Gets or sets the default backup options.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConditionalEvaluationTrace">
            <summary>
            Represents a trace of conditional evaluation steps.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of ConditionalEvaluationTrace.
            </summary>
            <param name="nodeId">ID of the node being evaluated</param>
            <param name="expression">The conditional expression</param>
            <param name="variables">Variables available during evaluation</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.TraceId">
            <summary>
            Gets the unique identifier for this trace.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.NodeId">
            <summary>
            Gets the node ID being evaluated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.Expression">
            <summary>
            Gets the conditional expression being evaluated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.Variables">
            <summary>
            Gets the variables available during evaluation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.Steps">
            <summary>
            Gets the evaluation steps.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.FinalResult">
            <summary>
            Gets the final result of the evaluation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.Error">
            <summary>
            Gets any error that occurred during evaluation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.EvaluationTime">
            <summary>
            Gets the total evaluation time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.CreatedAt">
            <summary>
            Gets the timestamp when the trace was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.CompletedAt">
            <summary>
            Gets the timestamp when the evaluation completed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.AddStep(SemanticKernel.Graph.Core.ConditionalEvaluationStep)">
            <summary>
            Adds an evaluation step to the trace.
            </summary>
            <param name="step">Step to add</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.Complete(System.Boolean,System.TimeSpan)">
            <summary>
            Marks the trace as completed with the final result.
            </summary>
            <param name="result">Final evaluation result</param>
            <param name="evaluationTime">Total evaluation time</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEvaluationTrace.Fail(System.String,System.TimeSpan)">
            <summary>
            Marks the trace as failed with an error.
            </summary>
            <param name="error">Error message</param>
            <param name="evaluationTime">Time spent before failure</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConditionalEvaluationStep">
            <summary>
            Represents a single step in conditional evaluation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEvaluationStep.#ctor(System.String,System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of ConditionalEvaluationStep.
            </summary>
            <param name="stepType">Type of evaluation step</param>
            <param name="description">Description of what this step does</param>
            <param name="input">Input to this step</param>
            <param name="output">Output from this step</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationStep.StepId">
            <summary>
            Gets the unique identifier for this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationStep.StepType">
            <summary>
            Gets the type of evaluation step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationStep.Description">
            <summary>
            Gets the description of this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationStep.Input">
            <summary>
            Gets the input to this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationStep.Output">
            <summary>
            Gets the output from this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationStep.Timestamp">
            <summary>
            Gets the timestamp when this step was executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationStep.Error">
            <summary>
            Gets any error that occurred in this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationStep.Duration">
            <summary>
            Gets the duration of this step.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConditionalBreakpoint">
            <summary>
            Represents a breakpoint for conditional debugging.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalBreakpoint.#ctor(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of ConditionalBreakpoint.
            </summary>
            <param name="nodeId">ID of the node to break on</param>
            <param name="condition">Optional condition for the breakpoint</param>
            <param name="description">Optional description</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalBreakpoint.BreakpointId">
            <summary>
            Gets the unique identifier for this breakpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalBreakpoint.NodeId">
            <summary>
            Gets the node ID this breakpoint applies to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalBreakpoint.Condition">
            <summary>
            Gets the optional condition for this breakpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalBreakpoint.Description">
            <summary>
            Gets the description of this breakpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalBreakpoint.IsEnabled">
            <summary>
            Gets or sets whether this breakpoint is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalBreakpoint.HitCount">
            <summary>
            Gets the number of times this breakpoint has been hit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalBreakpoint.CreatedAt">
            <summary>
            Gets the timestamp when this breakpoint was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalBreakpoint.LastHitAt">
            <summary>
            Gets the timestamp when this breakpoint was last hit.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalBreakpoint.ShouldTrigger(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Checks if this breakpoint should trigger for the given state.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>True if the breakpoint should trigger</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalBreakpoint.RecordHit">
            <summary>
            Records a hit on this breakpoint.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConditionalDebugger">
            <summary>
            Provides comprehensive debugging capabilities for conditional node execution.
            Supports breakpoints, tracing, and detailed analysis of conditional evaluation.
            Implements singleton pattern for global access across the application.
            </summary>
            <remarks>
            This debugger provides:
            - Conditional breakpoints: Pause execution based on state conditions
            - Detailed tracing: Step-by-step evaluation with variable inspection
            - Performance analysis: Timing and metrics for optimization
            - Export capabilities: JSON export of debug data for external analysis
            - Global access: Singleton pattern for consistent debugging state
            - Thread safety: All operations are thread-safe for concurrent debugging
            - Memory management: Automatic cleanup of old traces and breakpoints
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalDebugger.Instance">
            <summary>
            Gets the singleton instance of ConditionalDebugger.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalDebugger.IsDebuggingEnabled">
            <summary>
            Gets or sets whether debugging is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalDebugger.MaxTraceHistory">
            <summary>
            Gets or sets the maximum number of traces to keep in history.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.AddBreakpoint(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Adds a breakpoint for a specific node.
            </summary>
            <param name="nodeId">ID of the node to break on</param>
            <param name="condition">Optional condition for the breakpoint</param>
            <param name="description">Optional description</param>
            <returns>The created breakpoint</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.RemoveBreakpoint(System.String)">
            <summary>
            Removes a breakpoint by ID.
            </summary>
            <param name="breakpointId">ID of the breakpoint to remove</param>
            <returns>True if the breakpoint was removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.GetBreakpoints(System.String)">
            <summary>
            Gets all breakpoints for a specific node.
            </summary>
            <param name="nodeId">ID of the node</param>
            <returns>Collection of breakpoints for the node</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.GetAllBreakpoints">
            <summary>
            Gets all breakpoints.
            </summary>
            <returns>Collection of all breakpoints</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.ClearBreakpoints">
            <summary>
            Clears all breakpoints.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.StartTrace(System.String,System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Starts tracing a conditional evaluation.
            </summary>
            <param name="nodeId">ID of the node being evaluated</param>
            <param name="expression">The conditional expression</param>
            <param name="graphState">Current graph state</param>
            <returns>The evaluation trace, or null if debugging is disabled</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.GetTrace(System.String)">
            <summary>
            Gets a trace by ID.
            </summary>
            <param name="traceId">ID of the trace</param>
            <returns>The trace if found, null otherwise</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.GetRecentTraces(System.String,System.Int32)">
            <summary>
            Gets recent traces for a specific node.
            </summary>
            <param name="nodeId">ID of the node</param>
            <param name="limit">Maximum number of traces to return</param>
            <returns>Collection of recent traces for the node</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.GetAllRecentTraces(System.Int32)">
            <summary>
            Gets all recent traces.
            </summary>
            <param name="limit">Maximum number of traces to return</param>
            <returns>Collection of recent traces</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.ClearTraces">
            <summary>
            Clears all traces.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.ShouldPause(System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Checks if execution should pause due to a breakpoint.
            </summary>
            <param name="nodeId">ID of the node being evaluated</param>
            <param name="graphState">Current graph state</param>
            <returns>True if execution should pause</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.GetNodeDebugInfo(System.String)">
            <summary>
            Gets debugging information for a node.
            </summary>
            <param name="nodeId">ID of the node</param>
            <returns>Dictionary containing debugging information</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.ExportDebugData(System.String)">
            <summary>
            Exports debugging data to JSON.
            </summary>
            <param name="nodeId">Optional node ID to filter by</param>
            <returns>JSON representation of debugging data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalDebugger.ExtractVariables(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Extracts variables from graph state for debugging purposes.
            </summary>
            <param name="graphState">Graph state to extract from</param>
            <returns>Dictionary of variables</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConditionalEdge">
            <summary>
            Represents a directional, optionally guarded transition between two graph nodes.
            </summary>
            <remarks>
            <para>
            A conditional edge encapsulates the navigation rule from a <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.SourceNode"/> to a
            <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.TargetNode"/>. The rule is materialized as a predicate that evaluates either over
            <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> or over a higher-level <see cref="T:SemanticKernel.Graph.State.GraphState"/>.
            </para>
            <para>
            Execution engines are expected to call one of the <c>EvaluateCondition</c> overloads to decide whether
            the edge is traversable in the current context. Implementations should treat the condition as a pure,
            side-effect free predicate. If the predicate throws, the error is wrapped in <see cref="T:System.InvalidOperationException"/>.
            </para>
            <para>
            Immutability and identity: structural members (<see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.EdgeId"/>, <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.SourceNode"/>, <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.TargetNode"/>,
            <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.Condition"/>, <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.Name"/>, <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.CreatedAt"/>) are set at construction and do not change.
            Equality is based on <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.EdgeId"/> only, not on reference or endpoint equality.
            </para>
            <para>
            Telemetry: traversal metadata (<see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.TraversalCount"/> and <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.LastTraversedAt"/>) is updated via
            <see cref="M:SemanticKernel.Graph.Core.ConditionalEdge.RecordTraversal"/> by the graph executor.
            </para>
            <para>
            Thread-safety: instances are safe for concurrent reads. The <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.Metadata"/> bag and traversal counters are not
            synchronized; if multiple threads may mutate them concurrently, external synchronization is required when exact
            counts or atomic updates are important.
            </para>
            </remarks>
            <example>
            The snippet below creates an edge that is taken only when the argument "mode" equals "advanced":
            <code>
            var edge = ConditionalEdge.CreateParameterEquals(source, target, "mode", "advanced");
            if (edge.EvaluateCondition(kernelArguments))
            {
                // Traverse to target
            }
            </code>
            </example>
            <seealso cref="T:SemanticKernel.Graph.Core.IGraphNode"/>
            <seealso cref="T:SemanticKernel.Graph.State.GraphState"/>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.#ctor(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,System.Func{Microsoft.SemanticKernel.KernelArguments,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Core.ConditionalEdge"/> with a predicate that evaluates over
            <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
            <param name="sourceNode">The origin node from which traversal starts when the condition holds.</param>
            <param name="targetNode">The destination node reached if the condition evaluates to <c>true</c>.</param>
            <param name="condition">A side-effect free predicate evaluated against the provided arguments.</param>
            <param name="name">Optional human-readable name used in logs and diagnostics. Not guaranteed to be unique.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sourceNode"/>, <paramref name="targetNode"/>, or <paramref name="condition"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.#ctor(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Core.ConditionalEdge"/> with a predicate that evaluates over
            <see cref="T:SemanticKernel.Graph.State.GraphState"/>.
            </summary>
            <param name="sourceNode">The origin node from which traversal starts when the condition holds.</param>
            <param name="targetNode">The destination node reached if the condition evaluates to <c>true</c>.</param>
            <param name="stateCondition">A side-effect free predicate evaluated against the provided graph state.</param>
            <param name="name">Optional human-readable name used in logs and diagnostics.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sourceNode"/>, <paramref name="targetNode"/>, or <paramref name="stateCondition"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.CreateUnconditional(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,System.String)">
            <summary>
            Creates an unconditional edge that is always traversable.
            </summary>
            <param name="sourceNode">The origin node.</param>
            <param name="targetNode">The destination node.</param>
            <param name="name">Optional human-readable name. Defaults to <c>"Unconditional"</c> if not provided.</param>
            <returns>A new <see cref="T:SemanticKernel.Graph.Core.ConditionalEdge"/> that always evaluates to <c>true</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sourceNode"/> or <paramref name="targetNode"/> is <c>null</c>.</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.EdgeId">
            <summary>
            Gets the unique, immutable identifier for this edge instance.
            <para>
            The identifier is generated at construction time and is suitable for correlating logs, metrics,
            and persistence records. Two distinct instances never share the same <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.EdgeId"/>.
            </para>
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.Name">
            <summary>
            Gets the human-readable name of this edge.
            <para>
            Names are intended for diagnostics and visualization only and are not guaranteed to be unique
            within a graph.
            </para>
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.SourceNode">
            <summary>
            Gets the source node of this edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.TargetNode">
            <summary>
            Gets the target node of this edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.Condition">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>-based predicate for this edge.
            <para>
            The predicate should be fast, deterministic, and free of side effects.
            </para>
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.StateCondition">
            <summary>
            Gets the <see cref="T:SemanticKernel.Graph.State.GraphState"/>-based predicate if the edge was constructed with a state condition; otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.Metadata">
            <summary>
            Gets a mutable bag of metadata associated with this edge.
            <para>
            This collection is not synchronized for concurrent writes. Common uses include storing routing weights,
            visualization hints, or provenance information.
            </para>
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.MergeConfiguration">
            <summary>
            Gets or sets the merge configuration for state joining when this edge is part of a parallel branch join.
            <para>
            When multiple parallel branches converge at a target node, this configuration determines how
            conflicting state values are resolved during the join operation.
            </para>
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.CreatedAt">
            <summary>
            Gets the UTC timestamp when this edge was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.TraversalCount">
            <summary>
            Gets the number of times this edge has been traversed during the lifetime of the instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.LastTraversedAt">
            <summary>
            Gets the UTC timestamp of the last traversal, if any.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEdge.HasBeenTraversed">
            <summary>
            Indicates whether this edge has been traversed at least once.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.EvaluateCondition(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Evaluates the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>-based condition for this edge.
            </summary>
            <param name="arguments">The argument bag to evaluate.</param>
            <returns><c>true</c> if the condition is met; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="arguments"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the underlying predicate throws.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.EvaluateCondition(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Evaluates the condition for this edge using <see cref="T:SemanticKernel.Graph.State.GraphState"/> when available; otherwise falls back to
            the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> predicate.
            </summary>
            <param name="graphState">The graph state to evaluate.</param>
            <returns><c>true</c> if the condition is met; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="graphState"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the underlying predicate throws.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.RecordTraversal">
            <summary>
            Records a successful traversal of this edge by incrementing <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.TraversalCount"/> and updating
            <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.LastTraversedAt"/>.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.ValidateIntegrity">
            <summary>
            Validates the integrity of this edge and reports any issues.
            </summary>
            <remarks>
            The validation currently checks for:
            <list type="bullet">
            <item><description>Self-loops (source and target being the same node).</description></item>
            <item><description>Basic predicate sanity by invoking the condition with a synthetic test argument.</description></item>
            </list>
            </remarks>
            <returns>A <see cref="T:SemanticKernel.Graph.State.ValidationResult"/> containing warnings and errors, if any.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.CreateParameterEquals(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,System.String,System.Object,System.String)">
            <summary>
            Creates an edge that is traversable only when a specific argument equals an expected value.
            </summary>
            <param name="sourceNode">The origin node.</param>
            <param name="targetNode">The destination node.</param>
            <param name="parameterName">The argument name to compare.</param>
            <param name="expectedValue">The expected value to compare with using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.</param>
            <param name="name">Optional human-readable name.</param>
            <returns>A new <see cref="T:SemanticKernel.Graph.Core.ConditionalEdge"/> whose predicate returns <c>true</c> when the argument exists and equals the expected value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sourceNode"/> or <paramref name="targetNode"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="parameterName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.CreateParameterExists(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,System.String,System.String)">
            <summary>
            Creates an edge that is traversable only when a specific argument exists.
            </summary>
            <param name="sourceNode">The origin node.</param>
            <param name="targetNode">The destination node.</param>
            <param name="parameterName">The argument name whose presence will be tested.</param>
            <param name="name">Optional human-readable name.</param>
            <returns>A new <see cref="T:SemanticKernel.Graph.Core.ConditionalEdge"/> whose predicate returns <c>true</c> when the argument exists.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sourceNode"/> or <paramref name="targetNode"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="parameterName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.WithMergePolicy(SemanticKernel.Graph.State.StateMergeConflictPolicy)">
            <summary>
            Configures this edge to use a specific merge policy when joining parallel branches.
            </summary>
            <param name="defaultPolicy">Default merge policy for all parameters</param>
            <returns>This edge instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.WithMergeConfiguration(SemanticKernel.Graph.State.StateMergeConfiguration)">
            <summary>
            Configures this edge with a detailed merge configuration for joining parallel branches.
            </summary>
            <param name="configuration">Merge configuration with per-key and per-type policies</param>
            <returns>This edge instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.WithKeyMergePolicy(System.String,SemanticKernel.Graph.State.StateMergeConflictPolicy)">
            <summary>
            Configures this edge with a merge policy for a specific parameter key.
            </summary>
            <param name="key">Parameter key</param>
            <param name="policy">Merge policy for this key</param>
            <returns>This edge instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.WithTypeMergePolicy(System.Type,SemanticKernel.Graph.State.StateMergeConflictPolicy)">
            <summary>
            Configures this edge with a merge policy for a specific .NET type.
            </summary>
            <param name="type">Value type</param>
            <param name="policy">Merge policy for this type</param>
            <returns>This edge instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.WithCustomKeyMerger(System.String,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Configures this edge with a custom merge function for a specific parameter key.
            </summary>
            <param name="key">Parameter key</param>
            <param name="merger">Custom merge function (base, overlay) => merged</param>
            <returns>This edge instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.WithReduceSemantics">
            <summary>
            Configures this edge to use reduce semantics with default reducers for common types.
            </summary>
            <returns>This edge instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.ToString">
            <summary>
            Returns a concise string representation including the name, endpoints, and traversal count.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current edge.
            <para>
            Two edges are considered equal if and only if their <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.EdgeId"/> values are equal.
            </para>
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEdge.GetHashCode">
            <summary>
            Returns the hash code for this edge based on <see cref="P:SemanticKernel.Graph.Core.ConditionalEdge.EdgeId"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConditionalEvaluationResult">
            <summary>
            Represents the result of a conditional expression evaluation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalEvaluationResult.#ctor(System.Boolean,System.String,System.TimeSpan,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of ConditionalEvaluationResult.
            </summary>
            <param name="value">The boolean result of the evaluation</param>
            <param name="expression">The original expression that was evaluated</param>
            <param name="evaluationTime">Time taken to evaluate the expression</param>
            <param name="variables">Variables used in the evaluation</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationResult.Value">
            <summary>
            Gets the boolean result of the evaluation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationResult.Expression">
            <summary>
            Gets the original expression that was evaluated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationResult.EvaluationTime">
            <summary>
            Gets the time taken to evaluate the expression.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationResult.Variables">
            <summary>
            Gets the variables used in the evaluation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConditionalEvaluationResult.EvaluatedAt">
            <summary>
            Gets the timestamp when the evaluation occurred.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator">
            <summary>
            Evaluates conditional expressions using Semantic Kernel templates and custom logic.
            Supports various expression types including simple comparisons, logical operators, and template-based conditions.
            Provides advanced caching, performance optimization, and comprehensive error handling.
            </summary>
            <remarks>
            This evaluator supports:
            - Simple comparisons: ==, !=, &gt;, &lt;, &gt;=, &lt;= with automatic type conversion
            - Logical operators: &amp;&amp;, ||, ! with short-circuit evaluation
            - String operations: contains, startswith, endswith for text matching
            - Template variables: {{variable}} syntax with automatic substitution
            - Handlebars conditionals: {{#if (condition)}}true{{else}}false{{/if}} syntax
            - Advanced caching: Automatic cache with configurable expiration
            - Performance metrics: Detailed statistics and timing information
            - Error handling: Comprehensive validation and error reporting
            - Thread safety: All operations are thread-safe for concurrent access
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.Evaluate(System.String,SemanticKernel.Graph.State.GraphState,System.Boolean)">
            <summary>
            Evaluates a conditional expression using the provided graph state.
            </summary>
            <param name="expression">The conditional expression to evaluate</param>
            <param name="graphState">The graph state containing variables</param>
            <param name="useCache">Whether to use evaluation caching</param>
            <returns>Result of the conditional evaluation</returns>
            <exception cref="T:System.ArgumentException">Thrown when expression is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when graphState is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when evaluation fails</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ValidateExpression(System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Validates that an expression can be evaluated without executing it.
            </summary>
            <param name="expression">The expression to validate</param>
            <param name="graphState">The graph state for validation context</param>
            <returns>True if the expression is valid</returns>
            <exception cref="T:System.ArgumentException">Thrown when expression is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when graphState is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ClearCache">
            <summary>
            Clears the evaluation cache.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.GetCacheStatistics">
            <summary>
            Gets cache statistics.
            </summary>
            <returns>Dictionary containing cache statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateTemplateValue(System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Evaluates a template expression and returns the actual value (not just boolean result).
            Useful for extracting values from templates like {{items}} or {{user.name}}.
            </summary>
            <param name="template">Template expression to evaluate</param>
            <param name="state">Graph state containing the variables</param>
            <returns>The extracted value from the template</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateExpression(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Evaluates the expression using various evaluation strategies.
            </summary>
            <param name="expression">Expression to evaluate</param>
            <param name="variables">Available variables</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateSimpleBoolean(System.String,System.Boolean@)">
            <summary>
            Evaluates simple boolean expressions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateVariableReference(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
            Evaluates variable references.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateComparison(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
            Evaluates comparison operations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateLogicalOperation(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
            Evaluates logical operations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateTemplate(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
            Evaluates template-based expressions (Handlebars-like).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateHandlebarsConditional(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Evaluates Handlebars conditional expressions like {{#if (gt value 10)}}true{{else}}false{{/if}}.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateHandlebarsCondition(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Evaluates Handlebars helper functions like (gt value 10).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ConvertToBool(System.String)">
            <summary>
            Converts a string value to boolean.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EvaluateComplexExpression(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
            Evaluates complex expressions with parentheses.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ExtractVariables(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Extracts variables from the graph state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ResolveOperand(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Resolves an operand value from variables or as a literal.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.TryConvertToBoolean(System.Object,System.Boolean@)">
            <summary>
            Tries to convert a value to boolean.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.AreEqual(System.Object,System.Object)">
            <summary>
            Checks if two operands are equal.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.IsGreaterThan(System.Object,System.Object)">
            <summary>
            Checks if left operand is greater than right operand.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.IsLessThan(System.Object,System.Object)">
            <summary>
            Checks if left operand is less than right operand.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.IsGreaterThanOrEqual(System.Object,System.Object)">
            <summary>
            Checks if left operand is greater than or equal to right operand.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.IsLessThanOrEqual(System.Object,System.Object)">
            <summary>
            Checks if left operand is less than or equal to right operand.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.Contains(System.Object,System.Object)">
            <summary>
            Checks if left operand contains right operand.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.StartsWith(System.Object,System.Object)">
            <summary>
            Checks if left operand starts with right operand.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.EndsWith(System.Object,System.Object)">
            <summary>
            Checks if left operand ends with right operand.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.SplitLogicalExpressionRespectingParentheses(System.String,System.String[])">
            <summary>
            Splits a logical expression by operators, respecting parentheses.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.SplitLogicalExpression(System.String,System.String[])">
            <summary>
            Splits a logical expression by operators, respecting precedence (legacy method).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.NormalizeExpression(System.String)">
            <summary>
            Normalizes an expression by removing extra whitespace and standardizing format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ContainsLogicalOperators(System.String)">
            <summary>
            Checks if an expression contains logical operators.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ContainsComparisonOperators(System.String)">
            <summary>
            Checks if an expression contains comparison operators.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.IsInComparisonContext(System.String,System.String)">
            <summary>
            Checks if a variable is in a comparison context based on surrounding text.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.HasSyntaxErrors(System.String)">
            <summary>
            Checks for basic syntax errors in an expression.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.GenerateCacheKey(System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Generates a cache key for an expression and graph state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.IsSimpleFalseExpression(System.String)">
            <summary>
            Checks if an expression is a simple false expression.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ExtractReferencedVariables(System.String)">
            <summary>
            Extracts referenced variables from an expression.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.IsReservedWord(System.String)">
            <summary>
            Checks if a word is a reserved word/operator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.IsValidComparison(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Checks if an expression is a valid comparison that could legitimately evaluate to false.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.ResolveVariablePath(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Resolves a variable path (e.g., "user.name" or "items.0.title") from variables dictionary.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator.GetCachedRegex(System.String)">
            <summary>
            Gets a cached compiled regex or creates and caches a new one.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IUserInputReader">
            <summary>
            Interface for reading user input.
            Allows providing a mock implementation for tests.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IUserInputReader.ReadUserInputAsync(System.Threading.CancellationToken)">
            <summary>
            Reads user input asynchronously.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>User input or null if cancelled.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConsoleUserInputReader">
            <summary>
            Default <see cref="T:SemanticKernel.Graph.Core.IUserInputReader"/> implementation that reads from the console.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel">
            <summary>
            Human interaction channel using the console/terminal.
            Implements a command-line interface for approvals and data entry.
            </summary>
            <remarks>
            This channel provides:
            - Interactive console UI with formatting
            - Timeout support with visual indicators
            - Interaction history
            - Input validation
            - Colors and formatting for better UX
            - Cancellation via Ctrl+C
            </remarks>
        </member>
        <member name="E:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.ResponseReceived">
            <inheritdoc />
        </member>
        <member name="E:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.RequestTimedOut">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel"/>.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.#ctor(SemanticKernel.Graph.Core.IUserInputReader)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel"/> with a custom input reader.
            </summary>
            <param name="userInputReader">Custom input reader for tests.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.ChannelType">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.ChannelName">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.IsAvailable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.SupportsBatchOperations">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.ChannelConfiguration">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.SendInterruptionRequestAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.SendBatchRequestAsync(SemanticKernel.Graph.Core.HumanApprovalBatch,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.CheckRequestStatusAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.CancelRequestAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.InitializeAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.ShutdownAsync">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayInterruptionRequest(SemanticKernel.Graph.Core.HumanInterruptionRequest)">
            <summary>
            Displays an interruption request in the console.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayConfidenceContext(SemanticKernel.Graph.Core.ConfidenceContext)">
            <summary>
            Displays the confidence context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayStateContext(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Displays the current state context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayOptions(System.Collections.Generic.List{SemanticKernel.Graph.Core.HumanInteractionOption})">
            <summary>
            Displays available options.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.WaitForResponseAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest,System.Threading.CancellationToken)">
            <summary>
            Waits for the user's response.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.ReadUserInputAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest,System.Threading.CancellationToken)">
            <summary>
            Reads user input.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.ProcessUserInput(System.String,SemanticKernel.Graph.Core.HumanInterruptionRequest)">
            <summary>
            Processes user input.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.HandleTimeoutAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest)">
            <summary>
            Handles a request timeout.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.CreateCancelledResponse(SemanticKernel.Graph.Core.HumanInterruptionRequest)">
            <summary>
            Creates a cancellation response.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayBatchHeader(SemanticKernel.Graph.Core.HumanApprovalBatch)">
            <summary>
            Displays the batch header.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayBatchProgress(System.Int32,System.Int32)">
            <summary>
            Displays batch progress.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayBatchSummary(SemanticKernel.Graph.Core.HumanApprovalBatch,System.Collections.Generic.List{SemanticKernel.Graph.Core.HumanInterruptionResponse})">
            <summary>
            Displays the batch summary.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayResponseConfirmation(SemanticKernel.Graph.Core.HumanInterruptionResponse)">
            <summary>
            Displays the response confirmation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.DisplayInitializationHeader">
            <summary>
            Displays the initialization header.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.WriteColoredLine(System.String,System.ConsoleColor)">
            <summary>
            Writes a colored line to the console.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.GetPriorityIcon(SemanticKernel.Graph.Core.InteractionPriority)">
            <summary>
            Gets the icon for a priority level.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.GetPriorityColor(SemanticKernel.Graph.Core.InteractionPriority)">
            <summary>
            Gets the console color for a priority level.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.GetConfigValue``1(System.String,``0)">
            <summary>
            Gets a configuration value.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.ThrowIfDisposed">
            <summary>
            Throws if this instance has been disposed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConsoleHumanInteractionChannel.PendingRequest">
            <summary>
            Represents a pending request.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DynamicRoutingEngine">
            <summary>
            Advanced routing engine that provides dynamic node selection based on state content,
            template-based routing, caching, and fallback mechanisms.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.#ctor(SemanticKernel.Graph.Integration.IGraphTemplateEngine,SemanticKernel.Graph.Core.DynamicRoutingOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.DynamicRoutingEngine},Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService,SemanticKernel.Graph.Integration.IGraphMemoryService)">
            <summary>
            Initializes a new instance of DynamicRoutingEngine.
            </summary>
            <param name="templateEngine">Optional template engine for routing decisions</param>
            <param name="options">Routing engine options</param>
            <param name="logger">Optional logger instance</param>
            <param name="embeddingService">Optional embedding service for semantic routing</param>
            <param name="memoryService">Optional memory service for contextual routing</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.SelectNextNodeAsync(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Selects the next node to execute from a collection of candidates based on state content and routing rules.
            </summary>
            <param name="candidates">Collection of candidate nodes</param>
            <param name="currentNode">Current node being executed</param>
            <param name="graphState">Current graph state</param>
            <param name="executionResult">Result from current node execution</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Selected node or null if no suitable node found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.GetRoutingMetrics(System.String)">
            <summary>
            Gets routing metrics for a specific node or all nodes.
            </summary>
            <param name="nodeId">Optional node ID to get metrics for specific node</param>
            <returns>Dictionary of routing metrics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.ClearCache(System.Boolean)">
            <summary>
            Clears routing cache and optionally metrics.
            </summary>
            <param name="clearMetrics">Whether to also clear metrics</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.ProvideFeedbackAsync(System.String,SemanticKernel.Graph.Core.RoutingFeedbackInfo,System.Threading.CancellationToken)">
            <summary>
            Provides feedback for a routing decision to improve future routing (only available with advanced routing).
            </summary>
            <param name="routingDecisionId">ID of the routing decision</param>
            <param name="feedback">Feedback information</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.GetAdvancedAnalytics">
            <summary>
            Gets advanced routing analytics (only available with advanced routing).
            </summary>
            <returns>Routing analytics or null if advanced routing is not enabled</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DynamicRoutingEngine.IsAdvancedRoutingEnabled">
            <summary>
            Gets whether advanced routing capabilities are enabled.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.CreateRoutingContext(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Creates routing context from current execution state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.CreateStateSnapshot(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates a snapshot of the current state for routing decisions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.TryGetCachedDecision(SemanticKernel.Graph.Core.RoutingContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Core.IGraphNode@)">
            <summary>
            Attempts to get a cached routing decision.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.SelectNodeByContentAsync(System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Core.RoutingContext,System.Threading.CancellationToken)">
            <summary>
            Selects node based on state content analysis.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.EvaluateNodeSuitabilityAsync(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.RoutingContext,System.Threading.CancellationToken)">
            <summary>
            Evaluates if a node is suitable based on current context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.SelectNodeByTemplateAsync(System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Core.RoutingContext,System.Threading.CancellationToken)">
            <summary>
            Selects node using template-based routing.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.CreateRoutingTemplate(System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Creates a routing template based on available candidates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.ApplyFallbackSelection(System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Core.RoutingContext)">
            <summary>
            Applies fallback selection mechanism.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.CacheRoutingDecision(SemanticKernel.Graph.Core.RoutingContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Caches a routing decision.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.CreateCacheKey(SemanticKernel.Graph.Core.RoutingContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Creates a cache key for routing decisions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DynamicRoutingEngine.RecordRoutingDecision(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.RoutingContext,System.DateTimeOffset,System.Boolean,System.Exception)">
            <summary>
            Records routing decision for metrics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DynamicRoutingOptions">
            <summary>
            Options for configuring the dynamic routing engine.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DynamicRoutingOptions.EnableCaching">
            <summary>
            Gets or sets whether routing decision caching is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DynamicRoutingOptions.EnableFallback">
            <summary>
            Gets or sets whether fallback mechanisms are enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DynamicRoutingOptions.MaxCacheSize">
            <summary>
            Gets or sets the maximum number of cached decisions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DynamicRoutingOptions.CacheExpirationMinutes">
            <summary>
            Gets or sets cache expiration time in minutes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingContext">
            <summary>
            Represents the context for routing decisions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingDecisionCache">
            <summary>
            Represents a cached routing decision.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingMetrics">
            <summary>
            Routing metrics for a specific node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RoutingMetrics.CacheHitRatio">
            <summary>
            Gets the cache hit ratio as a percentage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RoutingMetrics.SuccessRatio">
            <summary>
            Gets the success ratio as a percentage.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine">
            <summary>
            Implements Enterprise Integration Patterns for distributed graphs and enterprise systems.
            Provides abstractions for message routing, content‑based routing, translation, aggregation,
            splitting, dead‑letter handling, request‑reply, publish/subscribe, and distributed tracing.
            </summary>
            <remarks>
            Supported patterns include:
            - Message Router: Smart message routing based on routing keys
            - Content‑Based Router: Routing decisions based on message content
            - Message Translator: Message format translation
            - Aggregator: Aggregation of multiple related messages
            - Splitter: Split a message into multiple parts
            - Dead Letter Channel: Handling of unprocessed/failed messages
            - Request‑Reply: Asynchronous request/response
            - Publish‑Subscribe: Fan‑out to multiple subscribers
            - Distributed Tracing: End‑to‑end operation tracing
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.#ctor(SemanticKernel.Graph.Core.EnterpriseIntegrationOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes the enterprise integration engine.
            </summary>
            <param name="options">Integration configuration options</param>
            <param name="logger">Optional logger</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.ProcessMessageAsync(SemanticKernel.Graph.Core.EnterpriseMessage,SemanticKernel.Graph.Core.ProcessingContext)">
            <summary>
            Processes a message using enterprise integration patterns.
            </summary>
            <param name="message">Message to process</param>
            <param name="context">Processing context</param>
            <returns>Processing result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.ConfigureIntegrationRouteAsync(SemanticKernel.Graph.Core.IntegrationRoute)">
            <summary>
            Configures an integration route.
            </summary>
            <param name="route">Route configuration</param>
            <returns>Configured route identifier</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.GetIntegrationStatisticsAsync">
            <summary>
            Gets enterprise integration statistics.
            </summary>
            <returns>Detailed integration statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.ProcessWithMessageRouter(SemanticKernel.Graph.Core.EnterpriseMessage,SemanticKernel.Graph.Core.ProcessingContext,System.String)">
            <summary>
            Processa com Message Router.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.ProcessWithContentRouter(SemanticKernel.Graph.Core.EnterpriseMessage,SemanticKernel.Graph.Core.ProcessingContext,System.String)">
            <summary>
            Processa com Content-Based Router.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.ProcessWithAggregator(SemanticKernel.Graph.Core.EnterpriseMessage,SemanticKernel.Graph.Core.ProcessingContext,System.String)">
            <summary>
            Processa com Aggregator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.ProcessWithSplitter(SemanticKernel.Graph.Core.EnterpriseMessage,SemanticKernel.Graph.Core.ProcessingContext,System.String)">
            <summary>
            Processa com Splitter.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.ProcessWithRequestReply(SemanticKernel.Graph.Core.EnterpriseMessage,SemanticKernel.Graph.Core.ProcessingContext,System.String)">
            <summary>
            Processa com Request-Reply.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.ProcessWithPubSub(SemanticKernel.Graph.Core.EnterpriseMessage,SemanticKernel.Graph.Core.ProcessingContext,System.String)">
            <summary>
            Processa com Publish-Subscribe.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.EnterpriseIntegrationEngine.Dispose">
            <summary>
            Disposes resources used by the integration engine.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.EnterpriseMessage">
            <summary>
            Enterprise message with rich metadata.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.MessageId">
            <summary>Unique message identifier.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.CorrelationId">
            <summary>Correlation identifier for tracing.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.Timestamp">
            <summary>Creation timestamp.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.MessageType">
            <summary>Message type.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.Payload">
            <summary>Message payload.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.Headers">
            <summary>Message headers.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.Routing">
            <summary>Routing properties.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.TimeToLive">
            <summary>Message time-to-live (TTL).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnterpriseMessage.Priority">
            <summary>Message priority.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingProperties">
            <summary>
            Routing properties.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RoutingProperties.RoutingKey">
            <summary>Routing key.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RoutingProperties.Topic">
            <summary>Target topic.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RoutingProperties.Channel">
            <summary>Target channel.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RoutingProperties.ContentCriteria">
            <summary>Content criteria.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ProcessingContext">
            <summary>
            Processing context.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.ProcessingPattern">
            <summary>Processing pattern to apply.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.RoutingKey">
            <summary>Routing key.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.AggregationKey">
            <summary>Aggregation key.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.SplitCriteria">
            <summary>Split criteria.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.ReplyChannel">
            <summary>Reply channel.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.Topic">
            <summary>Pub/sub topic.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.RequiresTranslation">
            <summary>Whether a format translation is required.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.TargetFormat">
            <summary>Target format.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProcessingContext.ProcessingTimeout">
            <summary>Processing timeout.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IntegrationRoute">
            <summary>
            Integration route.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntegrationRoute.Type">
            <summary>Route type.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntegrationRoute.Source">
            <summary>Source pattern.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntegrationRoute.Destination">
            <summary>Destination pattern.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntegrationRoute.Conditions">
            <summary>Routing conditions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntegrationRoute.Transformations">
            <summary>Transformations to apply.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntegrationRoute.Filters">
            <summary>Message filters.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MessageRouter">
            <summary>
            Message router that delivers messages based on routing keys and configured routes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ContentBasedRouter">
            <summary>
            Content‑based router that evaluates message content against rules to determine routes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MessageTranslator">
            <summary>
            Message translator between formats (e.g., JSON, XML) using pluggable translators.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MessageAggregator">
            <summary>
            Message aggregator that collects related messages into a single aggregated output.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DeadLetterChannel">
            <summary>
            Dead Letter Channel for handling failed/unprocessable messages with retry policy.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PublishSubscribeHub">
            <summary>
            Publish/Subscribe hub that maintains topic subscriptions and fan‑out delivery.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DistributedTracingManager">
            <summary>
            Distributed tracing manager for starting and completing operation traces.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.EnterpriseIntegrationOptions">
            <summary>
            Configuration options for enterprise integration components.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IntegrationPattern">
            <summary>
            Supported enterprise integration patterns.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IntegrationRouteType">
            <summary>
            Types of integration routes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MessagePriority">
            <summary>
            Message priority.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorContextPropagator">
            <summary>
            Manages propagation of error context information between nodes during graph execution.
            Provides error correlation, context enrichment, and downstream error prevention.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.#ctor(SemanticKernel.Graph.Core.ErrorPropagationOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ErrorContextPropagator.
            </summary>
            <param name="options">Error propagation configuration options</param>
            <param name="logger">Optional logger for propagation operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorContextPropagator.Options">
            <summary>
            Gets the error propagation options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorContextPropagator.ActiveExecutionContexts">
            <summary>
            Gets the number of active execution contexts being tracked.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorContextPropagator.Statistics">
            <summary>
            Gets propagation statistics for monitoring.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.InitializeExecutionContext(System.String,System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Initializes error context for a new graph execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="graphId">Graph identifier</param>
            <param name="initialState">Initial graph state</param>
            <returns>Initialized error execution context</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.RecordErrorContext(System.String,System.String,SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Records error context when an error occurs in a node.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier where error occurred</param>
            <param name="errorContext">Error handling context</param>
            <param name="graphState">Current graph state</param>
            <returns>Enhanced error context with propagation information</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.PropagateToDownstreamNode(System.String,System.String,System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Propagates error context information to downstream nodes.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="fromNodeId">Source node identifier</param>
            <param name="toNodeId">Target node identifier</param>
            <param name="graphState">Current graph state</param>
            <returns>Propagated context information</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.ClearExecutionContext(System.String,System.Boolean)">
            <summary>
            Clears error context for a completed execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="preserveHistory">Whether to preserve node error histories</param>
            <returns>Final execution context summary</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.GetExecutionContext(System.String)">
            <summary>
            Gets the current error context for an execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <returns>Current error execution context or null if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.GetNodeErrorHistory(System.String)">
            <summary>
            Gets error history for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>Node error history or null if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.FindCorrelatedErrors(SemanticKernel.Graph.Core.GraphErrorType,System.TimeSpan)">
            <summary>
            Finds correlated errors across executions.
            </summary>
            <param name="errorType">Error type to search for</param>
            <param name="timeWindow">Time window for correlation</param>
            <returns>List of correlated error patterns</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.CaptureContextSnapshot(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Captures a snapshot of the current execution context.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>Context snapshot</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.UpdateExecutionHealth(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorHandlingContext)">
            <summary>
            Updates the health status of an execution context.
            </summary>
            <param name="context">Execution context</param>
            <param name="errorContext">Error context</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.RecordNodeErrorHistory(System.String,SemanticKernel.Graph.Core.ErrorCorrelation,SemanticKernel.Graph.Core.ErrorExecutionContext)">
            <summary>
            Records error history for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="correlation">Error correlation</param>
            <param name="execContext">Execution context</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.IsRepeatedError(System.String,SemanticKernel.Graph.Core.GraphErrorType)">
            <summary>
            Checks if an error is repeated for a node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="errorType">Error type</param>
            <returns>True if error is repeated</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.FindRelatedErrors(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Finds related errors in the execution context.
            </summary>
            <param name="context">Execution context</param>
            <param name="currentCorrelation">Current error correlation</param>
            <returns>List of related errors</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.CalculatePropagationRisk(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Calculates the propagation risk for an error.
            </summary>
            <param name="context">Execution context</param>
            <param name="correlation">Error correlation</param>
            <returns>Propagation risk level</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.PredictDownstreamImpact(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Predicts downstream impact of an error.
            </summary>
            <param name="context">Execution context</param>
            <param name="correlation">Error correlation</param>
            <returns>Downstream impact prediction</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.SuggestMitigation(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Suggests mitigation strategies for an error.
            </summary>
            <param name="context">Execution context</param>
            <param name="correlation">Error correlation</param>
            <returns>Suggested mitigation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.BuildContextualMetadata(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Builds contextual metadata for an enhanced error context.
            </summary>
            <param name="context">Execution context</param>
            <param name="correlation">Error correlation</param>
            <param name="graphState">Graph state</param>
            <returns>Contextual metadata</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.PropagateContextToGraphState(SemanticKernel.Graph.Core.EnhancedErrorContext,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Propagates context information to the graph state.
            </summary>
            <param name="enhancedContext">Enhanced error context</param>
            <param name="graphState">Graph state</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.CalculateRiskLevel(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorHandlingContext)">
            <summary>
            Calculates the risk level for an execution context.
            </summary>
            <param name="context">Execution context</param>
            <param name="errorContext">Error context</param>
            <returns>Risk level</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.IsUpstreamNode(SemanticKernel.Graph.Core.ErrorExecutionContext,System.String,System.String)">
            <summary>
            Checks if a node is upstream from another node in the traversal path.
            </summary>
            <param name="context">Execution context</param>
            <param name="upstreamNodeId">Potential upstream node</param>
            <param name="downstreamNodeId">Potential downstream node</param>
            <returns>True if upstream relationship exists</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.GeneratePropagationWarnings(SemanticKernel.Graph.Core.ErrorExecutionContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.ErrorCorrelation},System.String)">
            <summary>
            Generates propagation warnings for a downstream node.
            </summary>
            <param name="context">Execution context</param>
            <param name="upstreamErrors">Upstream errors</param>
            <param name="nodeId">Node identifier</param>
            <returns>List of warnings</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.GetPropagationStatistics">
            <summary>
            Gets propagation statistics for monitoring.
            </summary>
            <returns>Propagation statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.CalculateImpactLikelihood(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Calculates the likelihood of downstream impact.
            </summary>
            <param name="context">Execution context</param>
            <param name="correlation">Error correlation</param>
            <returns>Impact likelihood (0-1)</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.EstimateAffectedNodes(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Estimates the number of nodes that might be affected.
            </summary>
            <param name="context">Execution context</param>
            <param name="correlation">Error correlation</param>
            <returns>Estimated number of affected nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.CalculatePredictionConfidence(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Calculates the confidence level of a prediction.
            </summary>
            <param name="context">Execution context</param>
            <param name="correlation">Error correlation</param>
            <returns>Confidence level (0-1)</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.EstimateTimeToImpact(SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Estimates the time until impact occurs.
            </summary>
            <param name="correlation">Error correlation</param>
            <returns>Estimated time to impact</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.EstimateMitigationWindow(SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Estimates the window available for mitigation.
            </summary>
            <param name="correlation">Error correlation</param>
            <returns>Estimated mitigation window</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.DeterminePrimaryStrategy(SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Determines the primary mitigation strategy.
            </summary>
            <param name="correlation">Error correlation</param>
            <returns>Primary mitigation strategy</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.DetermineAlternateStrategies(SemanticKernel.Graph.Core.ErrorExecutionContext,SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Determines alternate mitigation strategies.
            </summary>
            <param name="context">Execution context</param>
            <param name="correlation">Error correlation</param>
            <returns>List of alternate strategies</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.EstimateMitigationEffectiveness(SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Estimates the effectiveness of a mitigation strategy.
            </summary>
            <param name="correlation">Error correlation</param>
            <returns>Estimated effectiveness (0-1)</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.EstimateImplementationComplexity(SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Estimates the implementation complexity of a mitigation.
            </summary>
            <param name="correlation">Error correlation</param>
            <returns>Implementation complexity</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.GenerateMitigationDescription(SemanticKernel.Graph.Core.ErrorCorrelation)">
            <summary>
            Generates a description for the mitigation.
            </summary>
            <param name="correlation">Error correlation</param>
            <returns>Mitigation description</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.GetMostProblematicNode(SemanticKernel.Graph.Core.ErrorExecutionContext)">
            <summary>
            Gets the most problematic node from an execution context.
            </summary>
            <param name="context">Execution context</param>
            <returns>Most problematic node ID</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.UpdateNodeHistoryWithFinalContext(System.String,SemanticKernel.Graph.Core.ExecutionContextSummary)">
            <summary>
            Updates node history with final execution context.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="summary">Execution context summary</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.GenerateRecommendedActions(SemanticKernel.Graph.Core.ErrorExecutionContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.ErrorCorrelation},System.String)">
            <summary>
            Generates recommended actions for a propagated context.
            </summary>
            <param name="context">Execution context</param>
            <param name="upstreamErrors">Upstream errors</param>
            <param name="nodeId">Node identifier</param>
            <returns>List of recommended actions</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.GenerateContextualInsights(SemanticKernel.Graph.Core.ErrorExecutionContext,System.Collections.Generic.List{SemanticKernel.Graph.Core.ErrorCorrelation},System.String)">
            <summary>
            Generates contextual insights for a propagated context.
            </summary>
            <param name="context">Execution context</param>
            <param name="upstreamErrors">Upstream errors</param>
            <param name="nodeId">Node identifier</param>
            <returns>List of contextual insights</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.CalculatePatternConfidence(System.Collections.Generic.List{System.TimeSpan})">
            <summary>
            Calculates the confidence level of a pattern.
            </summary>
            <param name="intervals">Time intervals between errors</param>
            <returns>Pattern confidence (0-1)</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorContextPropagator.Dispose">
            <summary>
            Releases all resources used by the error context propagator.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorPropagationOptions">
            <summary>
            Options for configuring error context propagation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationOptions.MaxSnapshotParameters">
            <summary>
            Gets or sets the maximum number of parameters to include in context snapshots.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationOptions.MaxNodeHistorySize">
            <summary>
            Gets or sets the maximum size of node error history.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationOptions.HealthyErrorThreshold">
            <summary>
            Gets or sets the threshold for considering an execution healthy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationOptions.RepeatedErrorWindow">
            <summary>
            Gets or sets the time window for detecting repeated errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationOptions.MaxRelatedErrors">
            <summary>
            Gets or sets the maximum number of related errors to track.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationOptions.EnableImpactPrediction">
            <summary>
            Gets or sets whether to enable downstream impact prediction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationOptions.EnableMitigationSuggestions">
            <summary>
            Gets or sets whether to enable mitigation suggestions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorExecutionContext">
            <summary>
            Represents error context for a graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.GraphId">
            <summary>
            Gets or sets the graph identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.StartTime">
            <summary>
            Gets or sets the execution start time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.ErrorCount">
            <summary>
            Gets or sets the total error count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.WarningCount">
            <summary>
            Gets or sets the total warning count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.ErrorChain">
            <summary>
            Gets or sets the chain of error correlations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.NodeTraversalPath">
            <summary>
            Gets or sets the node traversal path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.ContextualInformation">
            <summary>
            Gets or sets contextual information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.IsHealthy">
            <summary>
            Gets or sets whether the execution is healthy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorExecutionContext.RiskLevel">
            <summary>
            Gets or sets the current risk level.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorCorrelation">
            <summary>
            Represents a correlation between errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.CorrelationId">
            <summary>
            Gets or sets the correlation identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.NodeId">
            <summary>
            Gets or sets the node identifier where the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.ErrorType">
            <summary>
            Gets or sets the error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.Severity">
            <summary>
            Gets or sets the error severity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.Timestamp">
            <summary>
            Gets or sets the timestamp when the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.AttemptNumber">
            <summary>
            Gets or sets the attempt number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.IsTransient">
            <summary>
            Gets or sets whether the error is transient.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.ExceptionType">
            <summary>
            Gets or sets the exception type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.PreviousErrorId">
            <summary>
            Gets or sets the correlation ID of the previous error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.ContextSnapshot">
            <summary>
            Gets or sets the context snapshot at the time of error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelation.NodePosition">
            <summary>
            Gets or sets the position of the node in the traversal path.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.EnhancedErrorContext">
            <summary>
            Enhanced error context with propagation information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.OriginalContext">
            <summary>
            Gets or sets the original error handling context.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.NodeId">
            <summary>
            Gets or sets the node identifier where the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.CorrelationId">
            <summary>
            Gets or sets the correlation identifier for this error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.ErrorSequenceNumber">
            <summary>
            Gets or sets the sequence number of this error in the execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.IsRepeatedError">
            <summary>
            Gets or sets whether this is a repeated error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.RelatedErrors">
            <summary>
            Gets or sets the list of related errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.PropagationRisk">
            <summary>
            Gets or sets the propagation risk level.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.DownstreamImpactPrediction">
            <summary>
            Gets or sets the downstream impact prediction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.SuggestedMitigation">
            <summary>
            Gets or sets the suggested mitigation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EnhancedErrorContext.ContextualMetadata">
            <summary>
            Gets or sets the contextual metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PropagatedErrorContext">
            <summary>
            Propagated error context for downstream nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.FromNodeId">
            <summary>
            Gets or sets the source node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.ToNodeId">
            <summary>
            Gets or sets the target node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.HasUpstreamErrors">
            <summary>
            Gets or sets whether there are upstream errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.UpstreamErrors">
            <summary>
            Gets or sets the list of upstream errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.ErrorSequencePosition">
            <summary>
            Gets or sets the position in the error sequence.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.ExecutionRiskLevel">
            <summary>
            Gets or sets the execution risk level.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.PropagationWarnings">
            <summary>
            Gets or sets the propagation warnings.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.RecommendedActions">
            <summary>
            Gets or sets the recommended actions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PropagatedErrorContext.ContextualInsights">
            <summary>
            Gets or sets the contextual insights.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionContextSummary">
            <summary>
            Summary of an execution context after completion.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.Found">
            <summary>
            Gets or sets whether the context was found.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.Duration">
            <summary>
            Gets or sets the execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.TotalErrors">
            <summary>
            Gets or sets the total number of errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.TotalWarnings">
            <summary>
            Gets or sets the total number of warnings.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.NodesTraversed">
            <summary>
            Gets or sets the number of nodes traversed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.FinalRiskLevel">
            <summary>
            Gets or sets the final risk level.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.WasHealthy">
            <summary>
            Gets or sets whether the execution was healthy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.ErrorTypes">
            <summary>
            Gets or sets the list of error types encountered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.MostProblematicNode">
            <summary>
            Gets or sets the most problematic node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionContextSummary.ErrorCorrelations">
            <summary>
            Gets or sets the number of error correlations.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeErrorHistory">
            <summary>
            Error history for a specific node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorHistory.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorHistory.ErrorEvents">
            <summary>
            Gets or sets the list of error events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorHistory.TotalErrors">
            <summary>
            Gets or sets the total number of errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorHistory.FirstError">
            <summary>
            Gets or sets the timestamp of the first error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorHistory.LastError">
            <summary>
            Gets or sets the timestamp of the last error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorHistory.ErrorPatterns">
            <summary>
            Gets or sets the error patterns by type.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeErrorEvent">
            <summary>
            Represents a single error event for a node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.EventId">
            <summary>
            Gets or sets the event identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.NodeId">
            <summary>
            Gets or sets the node identifier where the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.ErrorType">
            <summary>
            Gets or sets the error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.Severity">
            <summary>
            Gets or sets the error severity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.Timestamp">
            <summary>
            Gets or sets the timestamp when the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.IsTransient">
            <summary>
            Gets or sets whether the error is transient.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.AttemptNumber">
            <summary>
            Gets or sets the attempt number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.ExceptionType">
            <summary>
            Gets or sets the exception type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorEvent.ContextSnapshot">
            <summary>
            Gets or sets the context snapshot.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorPropagationStatistics">
            <summary>
            Statistics about error propagation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationStatistics.ActiveExecutions">
            <summary>
            Gets or sets the number of active executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationStatistics.TrackedNodes">
            <summary>
            Gets or sets the number of tracked nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationStatistics.TotalErrorEvents">
            <summary>
            Gets or sets the total number of error events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationStatistics.AverageErrorsPerNode">
            <summary>
            Gets or sets the average errors per node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationStatistics.HighRiskExecutions">
            <summary>
            Gets or sets the number of high-risk executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationStatistics.UnhealthyExecutions">
            <summary>
            Gets or sets the number of unhealthy executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPropagationStatistics.LastUpdate">
            <summary>
            Gets or sets the timestamp of the last update.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorCorrelationPattern">
            <summary>
            Pattern of correlated errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelationPattern.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelationPattern.ErrorType">
            <summary>
            Gets or sets the error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelationPattern.OccurrenceCount">
            <summary>
            Gets or sets the number of occurrences.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelationPattern.AverageInterval">
            <summary>
            Gets or sets the average interval between occurrences.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelationPattern.FirstOccurrence">
            <summary>
            Gets or sets the timestamp of the first occurrence.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelationPattern.LastOccurrence">
            <summary>
            Gets or sets the timestamp of the last occurrence.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelationPattern.Confidence">
            <summary>
            Gets or sets the confidence level of the pattern.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorCorrelationPattern.Description">
            <summary>
            Gets or sets the description of the pattern.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DownstreamImpactPrediction">
            <summary>
            Prediction of downstream impact from an error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DownstreamImpactPrediction.ImpactLikelihood">
            <summary>
            Gets or sets the likelihood of impact (0-1).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DownstreamImpactPrediction.AffectedNodeEstimate">
            <summary>
            Gets or sets the estimated number of affected nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DownstreamImpactPrediction.ImpactSeverity">
            <summary>
            Gets or sets the predicted impact severity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DownstreamImpactPrediction.ConfidenceLevel">
            <summary>
            Gets or sets the confidence level of the prediction (0-1).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DownstreamImpactPrediction.TimeToImpact">
            <summary>
            Gets or sets the estimated time until impact occurs.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DownstreamImpactPrediction.MitigationWindow">
            <summary>
            Gets or sets the window of time available for mitigation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorMitigation">
            <summary>
            Suggested error mitigation strategy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMitigation.PrimaryStrategy">
            <summary>
            Gets or sets the primary mitigation strategy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMitigation.AlternateStrategies">
            <summary>
            Gets or sets the alternate mitigation strategies.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMitigation.Priority">
            <summary>
            Gets or sets the priority of this mitigation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMitigation.EstimatedEffectiveness">
            <summary>
            Gets or sets the estimated effectiveness (0-1).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMitigation.ImplementationComplexity">
            <summary>
            Gets or sets the implementation complexity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMitigation.Description">
            <summary>
            Gets or sets the mitigation description.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorPropagationRisk">
            <summary>
            Risk levels for error propagation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorPropagationRisk.Low">
            <summary>
            Low risk of propagation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorPropagationRisk.Medium">
            <summary>
            Medium risk of propagation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorPropagationRisk.High">
            <summary>
            High risk of propagation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorPropagationRisk.Critical">
            <summary>
            Critical risk of propagation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorRiskLevel">
            <summary>
            Risk levels for graph execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRiskLevel.Low">
            <summary>
            Low execution risk.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRiskLevel.Medium">
            <summary>
            Medium execution risk.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRiskLevel.High">
            <summary>
            High execution risk.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRiskLevel.Critical">
            <summary>
            Critical execution risk.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MitigationStrategy">
            <summary>
            Available mitigation strategies.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationStrategy.Retry">
            <summary>
            Retry the operation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationStrategy.Skip">
            <summary>
            Skip the problematic operation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationStrategy.Fallback">
            <summary>
            Use a fallback mechanism.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationStrategy.Rollback">
            <summary>
            Rollback to a previous state.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationStrategy.Escalate">
            <summary>
            Escalate for human intervention.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationStrategy.Halt">
            <summary>
            Halt execution immediately.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MitigationPriority">
            <summary>
            Priority levels for mitigation actions.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationPriority.Low">
            <summary>
            Low priority mitigation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationPriority.Standard">
            <summary>
            Standard priority mitigation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationPriority.High">
            <summary>
            High priority mitigation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MitigationPriority.Immediate">
            <summary>
            Immediate priority mitigation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ImplementationComplexity">
            <summary>
            Implementation complexity levels.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ImplementationComplexity.Low">
            <summary>
            Low complexity implementation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ImplementationComplexity.Medium">
            <summary>
            Medium complexity implementation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ImplementationComplexity.High">
            <summary>
            High complexity implementation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ImplementationComplexity.VeryHigh">
            <summary>
            Very high complexity implementation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphErrorType">
            <summary>
            Types of errors that can occur during graph execution.
            Used for categorizing and handling different error scenarios.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.Unknown">
            <summary>
            Unknown or unspecified error type.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.Validation">
            <summary>
            Validation error before or during execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.NodeExecution">
            <summary>
            Node execution failed due to internal logic error.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.Timeout">
            <summary>
            Timeout occurred during node or graph execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.Network">
            <summary>
            Network-related error (transient, retryable).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.ServiceUnavailable">
            <summary>
            External service unavailable (potentially transient).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.RateLimit">
            <summary>
            Rate limiting exceeded (potentially transient).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.Authentication">
            <summary>
            Authentication or authorization failure.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.ResourceExhaustion">
            <summary>
            Resource exhaustion (memory, disk, etc.).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.GraphStructure">
            <summary>
            Graph structure or navigation error.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.Cancellation">
            <summary>
            Cancellation was requested.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.CircuitBreakerOpen">
            <summary>
            Circuit breaker is open (operation short-circuited).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.GraphErrorType.BudgetExhausted">
            <summary>
            Resource budget exhausted (CPU, memory, or cost limits).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RetryStrategy">
            <summary>
            Strategies for retrying failed operations.
            Defines how retry attempts should be executed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RetryStrategy.None">
            <summary>
            No retry attempts.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RetryStrategy.FixedDelay">
            <summary>
            Fixed delay between retry attempts.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RetryStrategy.ExponentialBackoff">
            <summary>
            Exponential backoff with increasing delays.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RetryStrategy.LinearBackoff">
            <summary>
            Linear increase in delay between attempts.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RetryStrategy.RandomJitter">
            <summary>
            Random jitter added to fixed delay.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RetryStrategy.Custom">
            <summary>
            Custom retry logic provided by user.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorSeverity">
            <summary>
            Severity levels for error handling and recovery decisions.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorSeverity.Low">
            <summary>
            Low severity - continue execution with logging.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorSeverity.Medium">
            <summary>
            Medium severity - attempt recovery or retry.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorSeverity.High">
            <summary>
            High severity - halt current branch, try alternatives.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorSeverity.Critical">
            <summary>
            Critical severity - halt entire graph execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorRecoveryAction">
            <summary>
            Recovery actions that can be taken when errors occur.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRecoveryAction.Continue">
            <summary>
            Continue execution without recovery.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRecoveryAction.Retry">
            <summary>
            Retry the failed operation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRecoveryAction.Skip">
            <summary>
            Skip the failed node and continue.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRecoveryAction.Fallback">
            <summary>
            Execute fallback logic or alternative path.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRecoveryAction.Rollback">
            <summary>
            Rollback to previous known good state.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRecoveryAction.Halt">
            <summary>
            Halt execution and propagate error.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRecoveryAction.Escalate">
            <summary>
            Escalate to human intervention.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorRecoveryAction.CircuitBreaker">
            <summary>
            Open circuit breaker to prevent cascading failures.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RetryPolicyConfig">
            <summary>
            Configuration for retry policies.
            Defines parameters for automatic retry behavior.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.MaxRetries">
            <summary>
            Gets or sets the maximum number of retry attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.BaseDelay">
            <summary>
            Gets or sets the base delay between retry attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.MaxDelay">
            <summary>
            Gets or sets the maximum delay between retry attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.Strategy">
            <summary>
            Gets or sets the retry strategy to use.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.BackoffMultiplier">
            <summary>
            Gets or sets the backoff multiplier for exponential strategies.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.UseJitter">
            <summary>
            Gets or sets whether to add random jitter to delays.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.RetryableErrorTypes">
            <summary>
            Gets or sets the error types that should trigger retries.
            If empty, all transient errors will be retried.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.CustomRetryCondition">
            <summary>
            Gets or sets custom retry condition function.
            If provided, this function determines if an error should be retried.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RetryPolicyConfig.CustomDelayCalculator">
            <summary>
            Gets or sets custom delay calculation function.
            If provided and Strategy is Custom, this function calculates retry delays.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig">
            <summary>
            Configuration for circuit breaker behavior at the node level.
            Enables automatic failure detection and short-circuiting to prevent cascading failures.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig.Enabled">
            <summary>
            Gets or sets whether circuit breaker is enabled for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig.FailureThreshold">
            <summary>
            Gets or sets the number of consecutive failures required to open the circuit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig.OpenTimeout">
            <summary>
            Gets or sets the minimum duration to keep the circuit open before attempting half-open probing.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig.HalfOpenRetryCount">
            <summary>
            Gets or sets the maximum number of probe executions allowed while in half-open state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig.FailureWindow">
            <summary>
            Gets or sets the time window for failure counter decay while circuit is closed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig.TriggerErrorTypes">
            <summary>
            Gets or sets the error types that should trigger circuit breaker failures.
            If empty, all errors will contribute to failure count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig.TriggerOnBudgetExhaustion">
            <summary>
            Gets or sets whether resource budget exhaustion should trigger circuit breaker.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig.CustomFailureCondition">
            <summary>
            Gets or sets custom condition function for determining if an error should count as a failure.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorHandlingContext">
            <summary>
            Context information for error handling operations.
            Provides details about the error and execution state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.Exception">
            <summary>
            Gets or sets the exception that occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.ErrorType">
            <summary>
            Gets or sets the type of error that occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.Severity">
            <summary>
            Gets or sets the severity of the error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.FailedNode">
            <summary>
            Gets or sets the node where the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.AttemptNumber">
            <summary>
            Gets or sets the execution attempt number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.ErrorTime">
            <summary>
            Gets or sets the time when the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.AdditionalContext">
            <summary>
            Gets or sets additional context information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.IsTransient">
            <summary>
            Gets or sets whether this error is considered transient.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorHandlingContext.RecommendedAction">
            <summary>
            Gets or sets the recommended recovery action.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorMetricsCollector">
            <summary>
            Collects, aggregates, and analyzes error metrics across graph executions.
            Provides trend analysis, performance insights, and anomaly detection.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.#ctor(SemanticKernel.Graph.Core.ErrorMetricsOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ErrorMetricsCollector.
            </summary>
            <param name="options">Metrics collection options</param>
            <param name="logger">Optional logger for metrics operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsCollector.Options">
            <summary>
            Gets the metrics collection options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsCollector.TotalErrorsRecorded">
            <summary>
            Gets the total number of errors recorded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsCollector.CurrentErrorRate">
            <summary>
            Gets the current error rate (errors per minute).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsCollector.OverallStatistics">
            <summary>
            Gets overall error statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.RecordError(System.String,System.String,SemanticKernel.Graph.Core.ErrorHandlingContext,System.Nullable{SemanticKernel.Graph.Core.ErrorRecoveryAction},System.Nullable{System.Boolean})">
            <summary>
            Records an error event for metrics tracking.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier where error occurred</param>
            <param name="errorContext">Error context information</param>
            <param name="recoveryAction">Recovery action taken (if any)</param>
            <param name="recoverySuccess">Whether recovery was successful</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.RecordErrorBatch(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.ErrorEvent})">
            <summary>
            Records a batch of error events for bulk processing.
            </summary>
            <param name="errorEvents">Error events to record</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GetExecutionMetrics(System.String)">
            <summary>
            Gets error metrics for a specific execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <returns>Error metrics for the execution</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GetNodeMetrics(System.String)">
            <summary>
            Gets error metrics for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>Error metrics for the node</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GetErrorTypeMetrics(SemanticKernel.Graph.Core.GraphErrorType)">
            <summary>
            Gets error metrics for a specific error type.
            </summary>
            <param name="errorType">Error type</param>
            <returns>Error metrics for the error type</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GetErrorTrends(System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets trending error analysis over a specified time period.
            </summary>
            <param name="timeWindow">Time window for analysis</param>
            <param name="granularity">Time granularity for trend points</param>
            <returns>Error trend analysis</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GetTopErrorProneNodes(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Gets the top error-prone nodes based on error frequency and severity.
            </summary>
            <param name="topCount">Number of top nodes to return</param>
            <param name="timeWindow">Time window for analysis</param>
            <returns>List of top error-prone nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.ExportMetrics(System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Exports error metrics to JSON format for external analysis.
            </summary>
            <param name="includeRawEvents">Whether to include raw error events</param>
            <param name="timeWindow">Time window for export (null for all data)</param>
            <returns>JSON representation of error metrics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GenerateAnalysisReport(System.Nullable{System.TimeSpan})">
            <summary>
            Generates an error analysis report with insights and recommendations.
            </summary>
            <param name="timeWindow">Time window for analysis</param>
            <returns>Error analysis report</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.InitializeDefaultMetrics">
            <summary>
            Initializes default metrics structures.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.UpdateRealTimeMetrics(SemanticKernel.Graph.Core.ErrorEvent)">
            <summary>
            Updates real-time metrics with a new error event.
            </summary>
            <param name="errorEvent">Error event to process</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.PerformAggregation(System.Object)">
            <summary>
            Performs periodic aggregation of metrics.
            </summary>
            <param name="state">Timer state</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.UpdateErrorRates">
            <summary>
            Updates error rates for all tracked entities.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CleanOldMetrics">
            <summary>
            Cleans old metrics data based on retention settings.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateCurrentErrorRate">
            <summary>
            Calculates the current error rate.
            </summary>
            <returns>Current error rate (errors per minute)</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GetRecentEvents(System.DateTimeOffset)">
            <summary>
            Gets recent error events after the specified cutoff time.
            </summary>
            <param name="cutoff">Cutoff time</param>
            <returns>Recent error events</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GetRecentEventsForNode(System.String,System.DateTimeOffset)">
            <summary>
            Gets recent error events for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="cutoff">Cutoff time</param>
            <returns>Recent error events for the node</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateErrorRate(SemanticKernel.Graph.Core.ErrorMetricEntry)">
            <summary>
            Calculates error rate for an execution metric entry.
            </summary>
            <param name="entry">Metric entry</param>
            <returns>Error rate</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GetOverallStatistics">
            <summary>
            Gets overall error statistics.
            </summary>
            <returns>Overall error statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateErrorTypeDistribution(System.Collections.Generic.IList{SemanticKernel.Graph.Core.ErrorEvent})">
            <summary>
            Calculates error type distribution for a set of events.
            </summary>
            <param name="events">Error events</param>
            <returns>Error type distribution</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateSeverityDistribution(System.Collections.Generic.IList{SemanticKernel.Graph.Core.ErrorEvent})">
            <summary>
            Calculates severity distribution for a set of events.
            </summary>
            <param name="events">Error events</param>
            <returns>Severity distribution</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateRecoverySuccessRate(System.Collections.Generic.IList{SemanticKernel.Graph.Core.ErrorEvent})">
            <summary>
            Calculates recovery success rate for a set of events.
            </summary>
            <param name="events">Error events</param>
            <returns>Recovery success rate</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateAverageRecoveryTime(System.Collections.Generic.IList{SemanticKernel.Graph.Core.ErrorEvent})">
            <summary>
            Calculates average recovery time for a set of events.
            </summary>
            <param name="events">Error events</param>
            <returns>Average recovery time</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateOverallTrend(System.Collections.Generic.List{SemanticKernel.Graph.Core.ErrorTrendPoint})">
            <summary>
            Calculates overall error trend.
            </summary>
            <param name="trendPoints">Trend points</param>
            <returns>Overall trend</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.DetectAnomalies(System.Collections.Generic.List{SemanticKernel.Graph.Core.ErrorTrendPoint})">
            <summary>
            Detects anomalies in error trend points.
            </summary>
            <param name="trendPoints">Trend points</param>
            <returns>List of detected anomalies</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates standard deviation for a sequence of values.
            </summary>
            <param name="values">Values</param>
            <returns>Standard deviation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GenerateInsights(System.Collections.Generic.List{SemanticKernel.Graph.Core.ErrorTrendPoint})">
            <summary>
            Generates insights from trend points.
            </summary>
            <param name="trendPoints">Trend points</param>
            <returns>List of insights</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateErrorProneScore(SemanticKernel.Graph.Core.NodeErrorMetrics)">
            <summary>
            Calculates error-prone score for a node.
            </summary>
            <param name="nodeMetric">Node metrics</param>
            <returns>Error-prone score</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GenerateKeyInsights(SemanticKernel.Graph.Core.ErrorStatisticsSummary,SemanticKernel.Graph.Core.ErrorTrendAnalysis,System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.Core.NodeErrorRanking})">
            <summary>
            Generates key insights from analysis data.
            </summary>
            <param name="stats">Overall statistics</param>
            <param name="trends">Error trends</param>
            <param name="topNodes">Top error-prone nodes</param>
            <returns>List of key insights</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.GenerateRecommendations(SemanticKernel.Graph.Core.ErrorStatisticsSummary,SemanticKernel.Graph.Core.ErrorTrendAnalysis,System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.Core.NodeErrorRanking})">
            <summary>
            Generates recommendations based on analysis data.
            </summary>
            <param name="stats">Overall statistics</param>
            <param name="trends">Error trends</param>
            <param name="topNodes">Top error-prone nodes</param>
            <returns>List of recommendations</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.CalculateHealthScore(SemanticKernel.Graph.Core.ErrorStatisticsSummary,SemanticKernel.Graph.Core.ErrorTrendAnalysis)">
            <summary>
            Calculates system health score based on error metrics.
            </summary>
            <param name="stats">Overall statistics</param>
            <param name="trends">Error trends</param>
            <returns>Health score (0-100)</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorMetricsCollector.Dispose">
            <summary>
            Releases all resources used by the error metrics collector.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorMetricsOptions">
            <summary>
            Options for configuring error metrics collection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsOptions.AggregationInterval">
            <summary>
            Gets or sets the interval for metric aggregation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsOptions.MaxEventQueueSize">
            <summary>
            Gets or sets the maximum size of the error event queue.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsOptions.EnableMetricsCleanup">
            <summary>
            Gets or sets whether to enable automatic cleanup of old metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsOptions.MetricsRetentionPeriod">
            <summary>
            Gets or sets the retention period for metrics data.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorEvent">
            <summary>
            Represents a single error event for metrics tracking.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.EventId">
            <summary>
            Gets or sets the unique identifier for this error event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.NodeId">
            <summary>
            Gets or sets the node identifier where the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.ErrorType">
            <summary>
            Gets or sets the type of error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.Severity">
            <summary>
            Gets or sets the severity of the error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.IsTransient">
            <summary>
            Gets or sets whether the error is transient.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.AttemptNumber">
            <summary>
            Gets or sets the attempt number when this error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.Timestamp">
            <summary>
            Gets or sets the timestamp when the error occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.ExceptionType">
            <summary>
            Gets or sets the type of the exception.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.RecoveryAction">
            <summary>
            Gets or sets the recovery action taken (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.RecoverySuccess">
            <summary>
            Gets or sets whether recovery was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorEvent.Duration">
            <summary>
            Gets or sets the duration of the error/recovery.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorMetricEntry">
            <summary>
            Internal metric entry for executions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeErrorMetrics">
            <summary>
            Error metrics for a specific node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.TotalErrors">
            <summary>
            Gets or sets the total number of errors for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.ErrorRate">
            <summary>
            Gets or sets the current error rate (errors per minute).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.AverageSeverity">
            <summary>
            Gets or sets the average error severity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.RecoverySuccessRate">
            <summary>
            Gets or sets the recovery success rate percentage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.LastErrorTime">
            <summary>
            Gets or sets the timestamp of the last error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.MostCommonErrorType">
            <summary>
            Gets or sets the most common error type for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.ErrorTypes">
            <summary>
            Gets or sets the list of error types encountered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.RecoveryAttempts">
            <summary>
            Gets or sets the total number of recovery attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.SuccessfulRecoveries">
            <summary>
            Gets or sets the number of successful recoveries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorMetrics.TotalSeverity">
            <summary>
            Gets or sets the total severity (for average calculation).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorTypeMetrics">
            <summary>
            Error metrics for a specific error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.ErrorType">
            <summary>
            Gets or sets the error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.TotalOccurrences">
            <summary>
            Gets or sets the total number of occurrences.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.FirstOccurrence">
            <summary>
            Gets or sets the timestamp of the first occurrence.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.LastOccurrence">
            <summary>
            Gets or sets the timestamp of the last occurrence.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.AverageSeverity">
            <summary>
            Gets or sets the average severity for this error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.RecoverySuccessRate">
            <summary>
            Gets or sets the recovery success rate for this error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.AffectedNodes">
            <summary>
            Gets or sets the set of nodes affected by this error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.RecoveryAttempts">
            <summary>
            Gets or sets the total number of recovery attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.SuccessfulRecoveries">
            <summary>
            Gets or sets the number of successful recoveries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTypeMetrics.TotalSeverity">
            <summary>
            Gets or sets the total severity (for average calculation).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorStatisticsSummary">
            <summary>
            Overall error statistics summary.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.TotalErrors">
            <summary>
            Gets or sets the total number of errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.TotalExecutions">
            <summary>
            Gets or sets the total number of executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.AverageErrorsPerExecution">
            <summary>
            Gets or sets the average number of errors per execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.OverallRecoverySuccessRate">
            <summary>
            Gets or sets the overall recovery success rate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.ErrorRatePerMinute">
            <summary>
            Gets or sets the current error rate per minute.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.MostCommonErrorType">
            <summary>
            Gets or sets the most common error type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.ErrorTypeDistribution">
            <summary>
            Gets or sets the distribution of error types.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.UniqueNodesWithErrors">
            <summary>
            Gets or sets the number of unique nodes with errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.AverageErrorSeverity">
            <summary>
            Gets or sets the average error severity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorStatisticsSummary.LastAggregation">
            <summary>
            Gets or sets the timestamp of the last aggregation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionErrorMetrics">
            <summary>
            Error metrics for a specific execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.TotalErrors">
            <summary>
            Gets or sets the total number of errors in this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.ErrorTypes">
            <summary>
            Gets or sets the list of error types encountered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.RecoverySuccessRate">
            <summary>
            Gets or sets the recovery success rate for this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.AverageErrorSeverity">
            <summary>
            Gets or sets the average error severity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.FirstError">
            <summary>
            Gets or sets the timestamp of the first error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.LastError">
            <summary>
            Gets or sets the timestamp of the last error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.ErrorRate">
            <summary>
            Gets or sets the error rate for this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionErrorMetrics.MostCommonErrorType">
            <summary>
            Gets or sets the most common error type in this execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorTrendAnalysis">
            <summary>
            Error trend analysis results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendAnalysis.TimeWindow">
            <summary>
            Gets or sets the time window analyzed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendAnalysis.Granularity">
            <summary>
            Gets or sets the granularity of trend points.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendAnalysis.TrendPoints">
            <summary>
            Gets or sets the list of trend points.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendAnalysis.OverallTrend">
            <summary>
            Gets or sets the overall trend direction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendAnalysis.Anomalies">
            <summary>
            Gets or sets the list of detected anomalies.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendAnalysis.Insights">
            <summary>
            Gets or sets the list of generated insights.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorTrendPoint">
            <summary>
            A single point in error trend analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendPoint.Timestamp">
            <summary>
            Gets or sets the timestamp for this trend point.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendPoint.ErrorCount">
            <summary>
            Gets or sets the error count for this time period.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendPoint.ErrorRate">
            <summary>
            Gets or sets the error rate for this time period.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendPoint.ErrorTypeDistribution">
            <summary>
            Gets or sets the error type distribution for this period.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendPoint.SeverityDistribution">
            <summary>
            Gets or sets the severity distribution for this period.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendPoint.RecoverySuccessRate">
            <summary>
            Gets or sets the recovery success rate for this period.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorTrendPoint.AverageRecoveryTime">
            <summary>
            Gets or sets the average recovery time for this period.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorAnomaly">
            <summary>
            Represents an error anomaly detected in trend analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnomaly.Timestamp">
            <summary>
            Gets or sets the timestamp when the anomaly occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnomaly.Type">
            <summary>
            Gets or sets the type of anomaly.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnomaly.Severity">
            <summary>
            Gets or sets the severity of the anomaly.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnomaly.Description">
            <summary>
            Gets or sets the description of the anomaly.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnomaly.Value">
            <summary>
            Gets or sets the anomalous value.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeErrorRanking">
            <summary>
            Ranking of nodes by error proneness.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorRanking.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorRanking.ErrorCount">
            <summary>
            Gets or sets the total error count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorRanking.ErrorRate">
            <summary>
            Gets or sets the error rate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorRanking.AverageSeverity">
            <summary>
            Gets or sets the average severity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorRanking.RecoverySuccessRate">
            <summary>
            Gets or sets the recovery success rate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorRanking.Score">
            <summary>
            Gets or sets the calculated error-prone score.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorRanking.LastError">
            <summary>
            Gets or sets the timestamp of the last error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeErrorRanking.MostCommonErrorType">
            <summary>
            Gets or sets the most common error type.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorAnalysisReport">
            <summary>
            Comprehensive error analysis report.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnalysisReport.GeneratedAt">
            <summary>
            Gets or sets when this report was generated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnalysisReport.TimeWindow">
            <summary>
            Gets or sets the time window analyzed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnalysisReport.OverallStatistics">
            <summary>
            Gets or sets the overall error statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnalysisReport.ErrorTrends">
            <summary>
            Gets or sets the error trend analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnalysisReport.TopErrorProneNodes">
            <summary>
            Gets or sets the list of top error-prone nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnalysisReport.KeyInsights">
            <summary>
            Gets or sets the list of key insights.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnalysisReport.Recommendations">
            <summary>
            Gets or sets the list of recommendations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorAnalysisReport.HealthScore">
            <summary>
            Gets or sets the overall system health score (0-100).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorMetricsExport">
            <summary>
            Data structure for exporting error metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsExport.ExportedAt">
            <summary>
            Gets or sets when this export was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsExport.TimeWindow">
            <summary>
            Gets or sets the time window exported.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsExport.OverallStatistics">
            <summary>
            Gets or sets the overall statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsExport.NodeMetrics">
            <summary>
            Gets or sets the node metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsExport.ErrorTypeMetrics">
            <summary>
            Gets or sets the error type metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorMetricsExport.RawEvents">
            <summary>
            Gets or sets the raw error events (if included).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorTrend">
            <summary>
            Types of error trends.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorTrend.Decreasing">
            <summary>
            Error rate is decreasing.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorTrend.Stable">
            <summary>
            Error rate is stable.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorTrend.Increasing">
            <summary>
            Error rate is increasing.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorAnomalyType">
            <summary>
            Types of error anomalies.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorAnomalyType.ErrorSpike">
            <summary>
            Sudden spike in error rate.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorAnomalyType.UnusualPattern">
            <summary>
            Unusual pattern in error types.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorAnomalyType.RecoveryFailure">
            <summary>
            Recovery rate dropped significantly.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ErrorAnomalyType.SeverityIncrease">
            <summary>
            Error severity increased unexpectedly.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorPolicyRegistry">
            <summary>
            Centralized registry for error handling policies across the graph execution system.
            Provides policy management, versioning, and runtime policy resolution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.#ctor(SemanticKernel.Graph.Core.ErrorPolicyRegistryOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ErrorPolicyRegistry.
            </summary>
            <param name="options">Registry configuration options</param>
            <param name="logger">Optional logger for policy operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicyRegistry.Options">
            <summary>
            Gets the registry configuration options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicyRegistry.PolicySetCount">
            <summary>
            Gets the number of registered policy sets.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicyRegistry.Statistics">
            <summary>
            Gets registry statistics for monitoring.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.RegisterPolicySet(System.String,SemanticKernel.Graph.Core.ErrorPolicySet,System.Int32)">
            <summary>
            Registers a new error policy set for a specific context.
            </summary>
            <param name="contextId">Context identifier (e.g., graph ID, node type)</param>
            <param name="policySet">Policy set to register</param>
            <param name="priority">Priority for policy resolution (higher values take precedence)</param>
            <exception cref="T:System.ArgumentException">Thrown when contextId is invalid</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when policySet is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.RegisterPolicyRule(SemanticKernel.Graph.Core.PolicyRule)">
            <summary>
            Registers a specific error policy rule.
            </summary>
            <param name="rule">Policy rule to register</param>
            <exception cref="T:System.ArgumentNullException">Thrown when rule is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.UnregisterPolicySet(System.String)">
            <summary>
            Unregisters a policy set.
            </summary>
            <param name="contextId">Context identifier</param>
            <returns>True if policy set was removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.ResolvePolicy(SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Resolves the appropriate error handling policy for a given context.
            </summary>
            <param name="errorContext">Error context information</param>
            <param name="graphContext">Graph execution context</param>
            <returns>Resolved error policy or null if no policy matches</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.GetApplicablePolicies(SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Gets all applicable policies for an error context.
            </summary>
            <param name="errorContext">Error context information</param>
            <param name="graphContext">Graph execution context</param>
            <returns>List of applicable policies ordered by priority</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.ExportPolicies(System.Boolean)">
            <summary>
            Exports all registered policies to JSON format.
            </summary>
            <param name="includeDefault">Whether to include default policies</param>
            <returns>JSON representation of all policies</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.ImportPolicies(System.String,SemanticKernel.Graph.Core.PolicyMergeMode)">
            <summary>
            Imports policies from JSON format.
            </summary>
            <param name="json">JSON representation of policies</param>
            <param name="mergeMode">How to handle existing policies</param>
            <exception cref="T:System.ArgumentException">Thrown when JSON is invalid</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.InitializeDefaultPolicies">
            <summary>
            Initializes default error handling policies.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.IndexPoliciesByErrorType(System.String,SemanticKernel.Graph.Core.ErrorPolicySet)">
            <summary>
            Indexes policies by error type for fast lookup.
            </summary>
            <param name="contextId">Context identifier</param>
            <param name="policySet">Policy set to index</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.IndexPoliciesByNodeType(System.String,SemanticKernel.Graph.Core.ErrorPolicySet)">
            <summary>
            Indexes policies by node type for fast lookup.
            </summary>
            <param name="contextId">Context identifier</param>
            <param name="policySet">Policy set to index</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.RemoveFromIndices(System.String,SemanticKernel.Graph.Core.ErrorPolicySet)">
            <summary>
            Removes policies from indices.
            </summary>
            <param name="contextId">Context identifier</param>
            <param name="policySet">Policy set to remove</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.GetAllRules">
            <summary>
            Gets all policy rules from all registered policy sets.
            </summary>
            <returns>All policy rules</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.ConvertRuleToPolicy(SemanticKernel.Graph.Core.PolicyRule,SemanticKernel.Graph.Core.ErrorHandlingContext)">
            <summary>
            Converts a policy rule to an error policy.
            </summary>
            <param name="rule">Policy rule</param>
            <param name="errorContext">Error context</param>
            <returns>Error policy</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.GetDefaultPolicy(SemanticKernel.Graph.Core.ErrorHandlingContext)">
            <summary>
            Gets the default error policy for an error context.
            </summary>
            <param name="errorContext">Error context</param>
            <returns>Default error policy</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.GetRegistryStatistics">
            <summary>
            Gets registry statistics for monitoring.
            </summary>
            <returns>Registry statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.RegisterNodeCircuitBreakerPolicy(System.String,SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig,System.Int32)">
            <summary>
            Registers a circuit breaker policy for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="config">Circuit breaker configuration</param>
            <param name="priority">Priority for policy resolution</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.RegisterNodeCircuitBreakerPolicies(System.Collections.Generic.IReadOnlyDictionary{System.String,SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig},System.Int32)">
            <summary>
            Registers circuit breaker policies for multiple nodes.
            </summary>
            <param name="nodeConfigs">Dictionary of node IDs to circuit breaker configurations</param>
            <param name="priority">Priority for policy resolution</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.GetNodeCircuitBreakerConfig(System.String)">
            <summary>
            Gets circuit breaker configuration for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>Circuit breaker configuration, or null if not configured</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.RemoveNodeCircuitBreakerPolicy(System.String)">
            <summary>
            Removes circuit breaker policy for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>True if policy was removed, false if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorPolicyRegistry.Dispose">
            <summary>
            Releases all resources used by the registry.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorPolicyRegistryOptions">
            <summary>
            Options for configuring the error policy registry.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicyRegistryOptions.LoadDefaultPolicies">
            <summary>
            Gets or sets whether to load default policies on initialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicyRegistryOptions.MaxPolicySets">
            <summary>
            Gets or sets the maximum number of policy sets that can be registered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicyRegistryOptions.EnablePolicyCache">
            <summary>
            Gets or sets whether policy resolution should be cached.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicyRegistryOptions.PolicyCacheDuration">
            <summary>
            Gets or sets the cache duration for resolved policies.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorPolicySet">
            <summary>
            Represents a set of error handling policies for a specific context.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicySet.ContextId">
            <summary>
            Gets or sets the context identifier for this policy set.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicySet.Description">
            <summary>
            Gets or sets the description of this policy set.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicySet.Version">
            <summary>
            Gets or sets the version of this policy set.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicySet.Priority">
            <summary>
            Gets or sets the priority of this policy set.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicySet.RegisteredAt">
            <summary>
            Gets or sets when this policy set was registered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicySet.Policies">
            <summary>
            Gets or sets the list of policy rules in this set.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PolicyRule">
            <summary>
            Represents a single error handling policy rule.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.ContextId">
            <summary>
            Gets or sets the context identifier for this rule.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.ErrorType">
            <summary>
            Gets or sets the error type this rule applies to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.RecoveryAction">
            <summary>
            Gets or sets the recovery action to take.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.MaxRetries">
            <summary>
            Gets or sets the maximum number of retries (for retry actions).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.RetryDelay">
            <summary>
            Gets or sets the base retry delay.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.BackoffMultiplier">
            <summary>
            Gets or sets the backoff multiplier for exponential backoff.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.MaxRetryDelay">
            <summary>
            Gets or sets the maximum retry delay.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.CircuitBreakerConfig">
            <summary>
            Gets or sets the circuit breaker configuration for this policy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.Priority">
            <summary>
            Gets or sets the priority of this rule (higher values take precedence).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.Order">
            <summary>
            Gets or sets the order of this rule within the same priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.Description">
            <summary>
            Gets or sets the description of this rule.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.NodeTypePattern">
            <summary>
            Gets or sets the node type pattern this rule applies to (optional).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.SeverityThreshold">
            <summary>
            Gets or sets the severity threshold for this rule.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRule.CustomCondition">
            <summary>
            Gets or sets a custom condition function for this rule.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PolicyRule.Matches(SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Determines if this rule matches the given error context.
            </summary>
            <param name="errorContext">Error context</param>
            <param name="graphContext">Graph context</param>
            <returns>True if the rule matches</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorPolicy">
            <summary>
            Represents a resolved error handling policy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.RecoveryAction">
            <summary>
            Gets or sets the recovery action to take.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.MaxRetries">
            <summary>
            Gets or sets the maximum number of retries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.RetryDelay">
            <summary>
            Gets or sets the base retry delay.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.BackoffMultiplier">
            <summary>
            Gets or sets the backoff multiplier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.MaxRetryDelay">
            <summary>
            Gets or sets the maximum retry delay.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.CircuitBreakerConfig">
            <summary>
            Gets or sets the circuit breaker configuration for this policy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.Description">
            <summary>
            Gets or sets the description of this policy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.Priority">
            <summary>
            Gets or sets the priority of this policy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.AppliesTo">
            <summary>
            Gets or sets the error type this policy applies to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorPolicy.CreatedAt">
            <summary>
            Gets or sets when this policy was created.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PolicyRegistryStatistics">
            <summary>
            Statistics about the policy registry.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRegistryStatistics.TotalPolicySets">
            <summary>
            Gets or sets the total number of policy sets.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRegistryStatistics.TotalPolicyRules">
            <summary>
            Gets or sets the total number of policy rules.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRegistryStatistics.ErrorTypePolicies">
            <summary>
            Gets or sets the number of error type indexed policies.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRegistryStatistics.NodeTypePolicies">
            <summary>
            Gets or sets the number of node type indexed policies.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRegistryStatistics.AveragePoliciesPerSet">
            <summary>
            Gets or sets the average number of policies per set.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyRegistryStatistics.LastRegistration">
            <summary>
            Gets or sets the timestamp of the last policy registration.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PolicyExportData">
            <summary>
            Data structure for policy export/import operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyExportData.Version">
            <summary>
            Gets or sets the export format version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyExportData.ExportedAt">
            <summary>
            Gets or sets when this export was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PolicyExportData.PolicySets">
            <summary>
            Gets or sets the exported policy sets.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PolicyMergeMode">
            <summary>
            Modes for merging imported policies with existing ones.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.PolicyMergeMode.Replace">
            <summary>
            Replace existing policies with imported ones.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.PolicyMergeMode.Merge">
            <summary>
            Merge imported policies with existing ones.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.PolicyMergeMode.Skip">
            <summary>
            Skip imported policies if they already exist.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorRecoveryEngine">
            <summary>
            Engine responsible for error recovery and rollback operations during graph execution.
            Provides capabilities for state snapshots, partial rollbacks, and recovery strategies.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.#ctor(SemanticKernel.Graph.Core.ErrorRecoveryOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ErrorRecoveryEngine.
            </summary>
            <param name="options">Recovery engine options</param>
            <param name="logger">Optional logger for recovery operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryEngine.Options">
            <summary>
            Gets the current recovery engine options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryEngine.ActiveSnapshotCount">
            <summary>
            Gets the number of active snapshots.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryEngine.Statistics">
            <summary>
            Gets the snapshot storage statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.CreateSnapshot(System.String,System.String,SemanticKernel.Graph.State.GraphState,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a snapshot of the current execution state.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier where snapshot is taken</param>
            <param name="graphState">Current graph state</param>
            <param name="additionalContext">Additional context to include in snapshot</param>
            <returns>Snapshot identifier</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameters are invalid</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.GetSnapshot(System.String)">
            <summary>
            Retrieves a state snapshot by identifier.
            </summary>
            <param name="snapshotId">Snapshot identifier</param>
            <returns>State snapshot or null if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.GetExecutionSnapshots(System.String)">
            <summary>
            Gets all snapshots for a specific execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <returns>List of snapshots for the execution</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.RemoveSnapshot(System.String)">
            <summary>
            Removes a specific snapshot.
            </summary>
            <param name="snapshotId">Snapshot identifier to remove</param>
            <returns>True if snapshot was removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.RemoveExecutionSnapshots(System.String)">
            <summary>
            Removes all snapshots for a specific execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <returns>Number of snapshots removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.RollbackToSnapshotAsync(System.String,SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.ErrorRecoveryContext)">
            <summary>
            Executes rollback to a specific snapshot.
            </summary>
            <param name="snapshotId">Snapshot to rollback to</param>
            <param name="currentGraphState">Current graph state to update</param>
            <param name="recoveryContext">Additional recovery context</param>
            <returns>Recovery result</returns>
            <exception cref="T:System.ArgumentException">Thrown when snapshotId is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when rollback fails</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.PartialRollbackAsync(System.String,System.Collections.Generic.IList{System.String},SemanticKernel.Graph.State.GraphState,System.String)">
            <summary>
            Executes partial rollback by undoing specific parameter changes.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="parametersToRevert">Specific parameters to revert</param>
            <param name="currentGraphState">Current graph state to update</param>
            <param name="targetSnapshotId">Optional specific snapshot to revert from</param>
            <returns>Recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.ApplyRecoveryPolicyAsync(SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Applies a recovery policy for a specific error context.
            </summary>
            <param name="errorContext">Error context information</param>
            <param name="currentGraphState">Current graph state</param>
            <returns>Recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.RegisterRecoveryPolicy(SemanticKernel.Graph.Core.GraphErrorType,SemanticKernel.Graph.Core.RecoveryPolicy)">
            <summary>
            Registers a recovery policy for a specific error type.
            </summary>
            <param name="errorType">Error type to handle</param>
            <param name="policy">Recovery policy</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.GetRecoveryPolicy(SemanticKernel.Graph.Core.GraphErrorType)">
            <summary>
            Gets the recovery policy for a specific error type.
            </summary>
            <param name="errorType">Error type</param>
            <returns>Recovery policy or null if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.RemoveRecoveryPolicy(SemanticKernel.Graph.Core.GraphErrorType)">
            <summary>
            Removes a recovery policy for a specific error type.
            </summary>
            <param name="errorType">Error type</param>
            <returns>True if policy was removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.ValidateOptions">
            <summary>
            Validates the recovery engine options.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.CleanupOldSnapshots(System.String)">
            <summary>
            Cleans up old snapshots to maintain limits.
            </summary>
            <param name="executionId">Execution identifier</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.CloneGraphState(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates a deep clone of the graph state.
            </summary>
            <param name="originalState">Original graph state</param>
            <returns>Cloned graph state</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.CalculateSnapshotSize(SemanticKernel.Graph.State.GraphState,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates the approximate size of a snapshot in bytes.
            </summary>
            <param name="graphState">Graph state</param>
            <param name="additionalContext">Additional context</param>
            <returns>Approximate size in bytes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.EstimateObjectSize(System.Object)">
            <summary>
            Estimates the size of an object in bytes.
            </summary>
            <param name="obj">Object to estimate</param>
            <returns>Estimated size in bytes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.PerformRollbackAsync(SemanticKernel.Graph.Core.StateSnapshot,SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.ErrorRecoveryContext)">
            <summary>
            Performs the actual rollback operation.
            </summary>
            <param name="snapshot">Snapshot to rollback to</param>
            <param name="currentGraphState">Current graph state</param>
            <param name="recoveryContext">Recovery context</param>
            <returns>Rollback result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.PerformPartialRollbackAsync(SemanticKernel.Graph.Core.StateSnapshot,System.Collections.Generic.IList{System.String},SemanticKernel.Graph.State.GraphState)">
            <summary>
            Performs partial rollback for specific parameters.
            </summary>
            <param name="snapshot">Source snapshot</param>
            <param name="parametersToRevert">Parameters to revert</param>
            <param name="currentGraphState">Current graph state</param>
            <returns>Rollback result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.DetermineRecoveryPolicy(SemanticKernel.Graph.Core.ErrorHandlingContext)">
            <summary>
            Determines the appropriate recovery policy for an error context.
            </summary>
            <param name="errorContext">Error context</param>
            <returns>Recovery policy</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.ExecuteRecoveryPolicy(SemanticKernel.Graph.Core.RecoveryPolicy,SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Executes a recovery policy.
            </summary>
            <param name="policy">Recovery policy to execute</param>
            <param name="errorContext">Error context</param>
            <param name="currentGraphState">Current graph state</param>
            <returns>Recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.FindAndRollbackToLastSnapshot(SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Finds the last snapshot and performs rollback.
            </summary>
            <param name="errorContext">Error context</param>
            <param name="currentGraphState">Current graph state</param>
            <returns>Recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.ExecutePartialRollback(SemanticKernel.Graph.Core.RecoveryPolicy,SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Executes partial rollback based on policy.
            </summary>
            <param name="policy">Recovery policy</param>
            <param name="errorContext">Error context</param>
            <param name="currentGraphState">Current graph state</param>
            <returns>Recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.CreateContinueResult">
            <summary>
            Creates a continue recovery result.
            </summary>
            <returns>Recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.CreateRetryResult(SemanticKernel.Graph.Core.RecoveryPolicy)">
            <summary>
            Creates a retry recovery result.
            </summary>
            <param name="policy">Recovery policy</param>
            <returns>Recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.CreateFailureResult(System.String)">
            <summary>
            Creates a failure recovery result.
            </summary>
            <param name="message">Failure message</param>
            <returns>Recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ErrorRecoveryEngine.GetSnapshotStatistics">
            <summary>
            Gets current snapshot statistics.
            </summary>
            <returns>Snapshot statistics</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorRecoveryOptions">
            <summary>
            Options for configuring the error recovery engine.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryOptions.MaxSnapshotsPerExecution">
            <summary>
            Gets or sets the maximum number of snapshots per execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryOptions.MaxSnapshotAge">
            <summary>
            Gets or sets the maximum age of snapshots before cleanup.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryOptions.MaxTotalSnapshots">
            <summary>
            Gets or sets the maximum total number of snapshots in memory.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryOptions.AutoCreateSnapshots">
            <summary>
            Gets or sets whether to automatically create snapshots before critical operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryOptions.CompressionLevel">
            <summary>
            Gets or sets the compression level for snapshots (if implemented).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.StateSnapshot">
            <summary>
            Represents a point-in-time snapshot of execution state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.StateSnapshot.SnapshotId">
            <summary>
            Gets or sets the unique identifier for this snapshot.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.StateSnapshot.ExecutionId">
            <summary>
            Gets or sets the execution identifier this snapshot belongs to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.StateSnapshot.NodeId">
            <summary>
            Gets or sets the node identifier where this snapshot was taken.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.StateSnapshot.Timestamp">
            <summary>
            Gets or sets the timestamp when this snapshot was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.StateSnapshot.GraphState">
            <summary>
            Gets or sets the captured graph state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.StateSnapshot.AdditionalContext">
            <summary>
            Gets or sets additional context information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.StateSnapshot.SnapshotSize">
            <summary>
            Gets or sets the estimated size of this snapshot in bytes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorRecoveryContext">
            <summary>
            Context information for error recovery operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryContext.AdditionalParameters">
            <summary>
            Gets or sets additional parameters to apply during recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryContext.PreserveExecutionHistory">
            <summary>
            Gets or sets whether to preserve execution history during recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryContext.RecoveryMetadata">
            <summary>
            Gets or sets custom recovery metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryPolicy">
            <summary>
            Defines a recovery policy for specific error scenarios.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryPolicy.Type">
            <summary>
            Gets or sets the type of recovery to perform.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryPolicy.MaxAttempts">
            <summary>
            Gets or sets the maximum number of attempts (for retry policies).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryPolicy.ParametersToRevert">
            <summary>
            Gets or sets the parameters to revert (for partial rollback policies).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryPolicy.CustomRecoveryLogic">
            <summary>
            Gets or sets custom recovery logic.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryType">
            <summary>
            Types of recovery operations that can be performed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryType.Continue">
            <summary>
            Continue execution without recovery.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryType.Retry">
            <summary>
            Retry the failed operation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryType.Rollback">
            <summary>
            Rollback to a previous snapshot.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryType.PartialRollback">
            <summary>
            Partial rollback of specific parameters.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryType.PolicyBased">
            <summary>
            Apply custom recovery policy.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ErrorRecoveryResult">
            <summary>
            Result of an error recovery operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryResult.Success">
            <summary>
            Gets or sets whether the recovery was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryResult.RecoveryType">
            <summary>
            Gets or sets the type of recovery that was performed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryResult.SnapshotId">
            <summary>
            Gets or sets the snapshot identifier used (if applicable).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryResult.Duration">
            <summary>
            Gets or sets the duration of the recovery operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryResult.RestoredState">
            <summary>
            Gets or sets the restored graph state (if applicable).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryResult.ChangesApplied">
            <summary>
            Gets or sets the number of changes applied during recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryResult.Error">
            <summary>
            Gets or sets the error that occurred during recovery (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ErrorRecoveryResult.Message">
            <summary>
            Gets or sets a descriptive message about the recovery operation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RollbackResult">
            <summary>
            Internal result type for rollback operations.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SnapshotStatistics">
            <summary>
            Statistics about snapshot storage and usage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SnapshotStatistics.TotalSnapshots">
            <summary>
            Gets or sets the total number of snapshots.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SnapshotStatistics.TotalSize">
            <summary>
            Gets or sets the total size of all snapshots in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SnapshotStatistics.AverageSize">
            <summary>
            Gets or sets the average snapshot size in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SnapshotStatistics.OldestSnapshot">
            <summary>
            Gets or sets the timestamp of the oldest snapshot.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SnapshotStatistics.NewestSnapshot">
            <summary>
            Gets or sets the timestamp of the newest snapshot.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SnapshotStatistics.UniqueExecutions">
            <summary>
            Gets or sets the number of unique executions with snapshots.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionPathMetrics">
            <summary>
            Tracks execution metrics for a specific execution path in the graph.
            Provides statistics about path frequency, performance, and success rates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ExecutionPathMetrics.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of ExecutionPathMetrics.
            </summary>
            <param name="pathKey">String representation of the path</param>
            <param name="nodeSequence">Sequence of nodes in the path</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.PathKey">
            <summary>
            Gets the string representation of the execution path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.NodeSequence">
            <summary>
            Gets the sequence of nodes in this path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.ExecutionCount">
            <summary>
            Gets the total number of times this path was executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.SuccessfulExecutions">
            <summary>
            Gets the number of successful executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.FailedExecutions">
            <summary>
            Gets the number of failed executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.SuccessRate">
            <summary>
            Gets the success rate as a percentage (0-100).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.AverageExecutionTime">
            <summary>
            Gets the average execution time for this path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.MinExecutionTime">
            <summary>
            Gets the minimum execution time recorded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.MaxExecutionTime">
            <summary>
            Gets the maximum execution time recorded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.FirstExecution">
            <summary>
            Gets the timestamp of the first execution of this path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.LastExecution">
            <summary>
            Gets the timestamp of the last execution of this path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.PathLength">
            <summary>
            Gets the path length (number of nodes).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionPathMetrics.ExecutionsPerHour">
            <summary>
            Gets the execution frequency (executions per hour).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ExecutionPathMetrics.RecordExecution(System.TimeSpan,System.Boolean)">
            <summary>
            Records a new execution of this path.
            </summary>
            <param name="duration">Total execution duration</param>
            <param name="success">Whether the execution was successful</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ExecutionPathMetrics.GetPercentile(System.Double)">
            <summary>
            Gets execution time percentile for this path.
            </summary>
            <param name="percentile">Percentile to calculate (0-100)</param>
            <returns>Execution time at the specified percentile</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ExecutionPathMetrics.ContainsNode(System.String)">
            <summary>
            Checks if this path contains a specific node.
            </summary>
            <param name="nodeId">Node identifier to check</param>
            <returns>True if the path contains the node</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ExecutionPathMetrics.GetNodePosition(System.String)">
            <summary>
            Gets the position of a node in this path.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>Zero-based position, or -1 if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ExecutionPathMetrics.ToString">
            <summary>
            Returns a string representation of the path metrics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CompiledExecutionPlan">
            <summary>
            Immutable, structural execution plan compiled from a <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/>.
            Captures static topology information keyed by a graph signature.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.Signature">
            <summary>
            Graph signature this plan corresponds to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.StartNodeId">
            <summary>
            Start node identifier, if configured; otherwise empty string.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.NodeIds">
            <summary>
            Sorted list of node identifiers in the graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.Adjacency">
            <summary>
            Adjacency mapping from source node id to a sorted list of target node ids.
            Conditional predicates are not encoded; this is a structural view only.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.TopologicalOrder">
            <summary>
            Topological order when the graph is acyclic w.r.t. structural edges; null when cycles are present.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.HasCycles">
            <summary>
            Indicates whether cycles were detected when computing <see cref="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.TopologicalOrder"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.CompiledAt">
            <summary>
            Compilation timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CompiledExecutionPlan.Version">
            <summary>
            Plan schema version for forward compatibility.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphPlanCompiler">
            <summary>
            Compiles structural execution plans and computes stable signatures.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPlanCompiler.ComputeSignature(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Computes a stable signature for the supplied <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/>.
            The signature reflects node identities and structural edges.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPlanCompiler.Compile(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Compiles a structural plan from a <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphExecutionPlanCache">
            <summary>
            Global cache for compiled execution plans keyed by graph signature.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutionPlanCache.GetOrAdd(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Returns a cached plan for the supplied executor's signature or compiles and inserts a new one.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphConcurrencyOptions">
            <summary>
            Options to control parallel execution behavior in the graph executor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConcurrencyOptions.EnableParallelExecution">
            <summary>
            Gets or sets whether parallel execution is enabled when multiple next nodes are available.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConcurrencyOptions.MaxDegreeOfParallelism">
            <summary>
            Gets or sets the maximum number of parallel branches executed at once.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConcurrencyOptions.MergeConflictPolicy">
            <summary>
            Gets or sets the policy to resolve state merge conflicts during join operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConcurrencyOptions.FallbackToSequentialOnCycles">
            <summary>
            Gets or sets whether, on detection of a complex cyclic scenario, the executor should fallback to sequential mode.
            Note: The initial fork/join implementation works at the step level and does not require global DAG analysis;
            this flag is reserved for future enhancements.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphDocumentationGenerator">
            <summary>
            Automatic documentation generator for Semantic Kernel graphs.
            Creates comprehensive documentation including Mermaid diagrams, node descriptions,
            execution flows, and performance insights.
            </summary>
            <remarks>
            Features:
            - Automatic Mermaid diagram generation for documentation
            - Node and edge descriptions extraction
            - Execution flow analysis and documentation
            - Performance metrics integration
            - Multi-format output (Markdown, HTML, JSON)
            - Template-based documentation generation
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.#ctor(SemanticKernel.Graph.Core.DocumentationGeneratorOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of GraphDocumentationGenerator.
            </summary>
            <param name="options">Documentation generation options</param>
            <param name="logger">Logger instance for diagnostics</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.GenerateDocumentation(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Generates comprehensive documentation for a graph structure.
            </summary>
            <param name="visualizationData">Graph visualization data</param>
            <param name="performanceMetrics">Optional performance metrics</param>
            <param name="executionContext">Optional execution context for runtime information</param>
            <returns>Complete documentation in the specified format</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.GenerateAnnotatedMermaidDiagram(SemanticKernel.Graph.Debug.GraphVisualizationData,System.Boolean)">
            <summary>
            Generates a standalone Mermaid diagram with documentation annotations.
            </summary>
            <param name="visualizationData">Graph visualization data</param>
            <param name="includeAnnotations">Whether to include detailed annotations</param>
            <returns>Annotated Mermaid diagram</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.GenerateExecutionFlowDocumentation(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Generates execution flow documentation with step-by-step analysis.
            </summary>
            <param name="visualizationData">Graph visualization data</param>
            <param name="executionContext">Execution context with path information</param>
            <returns>Execution flow documentation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.GeneratePerformanceDocumentation(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Generates performance-focused documentation with metrics visualization.
            </summary>
            <param name="performanceMetrics">Performance metrics data</param>
            <param name="visualizationData">Graph structure data</param>
            <returns>Performance documentation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.GenerateMarkdownDocumentation(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Generates Markdown format documentation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.GenerateHtmlDocumentation(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Generates HTML format documentation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.GenerateJsonDocumentation(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Generates JSON format documentation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.AddMermaidAnnotations(System.String,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Adds annotations to Mermaid diagram for enhanced documentation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.ExtractNodeDescription(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Extracts description from node metadata or properties.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.GetDefaultHtmlStyles">
            <summary>
            Gets default CSS styles for HTML documentation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.ConvertMarkdownToBasicHtml(System.String)">
            <summary>
            Converts basic Markdown to HTML.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.ThrowIfDisposed">
            <summary>
            Throws if the generator has been disposed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphDocumentationGenerator.Dispose">
            <summary>
            Disposes the documentation generator and releases resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DocumentationGeneratorOptions">
            <summary>
            Configuration options for documentation generation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.Title">
            <summary>
            Gets or sets the documentation title.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.Description">
            <summary>
            Gets or sets the documentation description.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.OutputFormat">
            <summary>
            Gets or sets the output format.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.IncludeMermaidDiagram">
            <summary>
            Gets or sets whether to include Mermaid diagrams.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.IncludeAnnotations">
            <summary>
            Gets or sets whether to include diagram annotations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.IncludePerformanceAnalysis">
            <summary>
            Gets or sets whether to include performance analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.IncludePerformanceHeatmap">
            <summary>
            Gets or sets whether to include performance heatmap.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.IncludeNodeCatalog">
            <summary>
            Gets or sets whether to include node catalog.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.IncludeNodeDetails">
            <summary>
            Gets or sets whether to include detailed node information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.DiagramDirection">
            <summary>
            Gets or sets the diagram direction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.HighlightExecutionPath">
            <summary>
            Gets or sets whether to highlight execution path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.HighlightCurrentNode">
            <summary>
            Gets or sets whether to highlight current node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.CustomCssStyles">
            <summary>
            Gets or sets custom CSS styles for HTML output.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DocumentationGeneratorOptions.SectionTemplates">
            <summary>
            Gets or sets custom templates for sections.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DocumentationFormat">
            <summary>
            Enumeration of supported documentation formats.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DocumentationFormat.Markdown">
            <summary>
            Markdown format (.md).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DocumentationFormat.Html">
            <summary>
            HTML format (.html).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DocumentationFormat.Json">
            <summary>
            JSON format (.json).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DocumentationFormat.PlainText">
            <summary>
            Plain text format (.txt).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphExecutor">
            <summary>
            Main orchestrator for graph execution.
            Manages the execution flow, navigation, and coordination of graph nodes.
            </summary>
            <remarks>
            Thread-safety: node/edge collections are guarded by a combination of <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            and a private lock for edge mutations to ensure consistent views. Public methods validate inputs and throw
            <see cref="T:System.ArgumentException"/>, <see cref="T:System.ArgumentNullException"/>, or <see cref="T:System.InvalidOperationException"/>
            for invalid usage. Execution honors <see cref="T:System.Threading.CancellationToken"/> and surfaces
            <see cref="T:System.OperationCanceledException"/> when cancelled.
            
            Performance and observability: optional <see cref="T:SemanticKernel.Graph.Core.GraphPerformanceMetrics"/> can be configured via
            <see cref="M:SemanticKernel.Graph.Core.GraphExecutor.ConfigureMetrics(SemanticKernel.Graph.Core.GraphMetricsOptions)"/>. Concurrency behavior is configured via
            <see cref="M:SemanticKernel.Graph.Core.GraphExecutor.ConfigureConcurrency(SemanticKernel.Graph.Core.GraphConcurrencyOptions)"/>, and resource governance via
            <see cref="M:SemanticKernel.Graph.Core.GraphExecutor.ConfigureResources(SemanticKernel.Graph.Core.GraphResourceOptions)"/>.
            
            Events: graph mutation events are raised after internal structures are updated and are safe for read-only listeners.
            </remarks>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphExecutor.NodeAdded">
            <summary>
            Raised after a node is successfully added to the graph.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphExecutor.NodeRemoved">
            <summary>
            Raised after a node is successfully removed from the graph.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphExecutor.NodeReplaced">
            <summary>
            Raised after a node is replaced while preserving its identity (<c>NodeId</c>).
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphExecutor.EdgeAdded">
            <summary>
            Raised after an edge is successfully added to the graph.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphExecutor.EdgeRemoved">
            <summary>
            Raised after an edge is successfully removed from the graph.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.#ctor(System.String,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of GraphExecutor.
            </summary>
            <param name="name">Name of this graph</param>
            <param name="description">Description of what this graph does</param>
            <param name="logger">Optional logger for graph execution</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.#ctor(Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of GraphExecutor with a kernel.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="logger">Optional logger for graph execution</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.GraphId">
            <summary>
            Gets the unique identifier for this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.Name">
            <summary>
            Gets the name of this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.Description">
            <summary>
            Gets the description of this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.CreatedAt">
            <summary>
            Gets the timestamp when this graph was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.StartNode">
            <summary>
            Gets the starting node for execution (if set).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.Nodes">
            <summary>
            Gets all nodes in this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.Edges">
            <summary>
            Gets all edges in this graph.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.UseMiddleware(SemanticKernel.Graph.Execution.IGraphExecutionMiddleware)">
            <summary>
            Adds an execution middleware to the pipeline.
            </summary>
            <param name="middleware">Middleware instance</param>
            <returns>This executor for chaining</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.NodeCount">
            <summary>
            Gets the number of nodes in this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.EdgeCount">
            <summary>
            Gets the number of edges in this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.IsReadyForExecution">
            <summary>
            Indicates whether this graph is ready for execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.RoutingEngine">
            <summary>
            Gets or sets the dynamic routing engine for advanced node selection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.Middlewares">
            <summary>
            Gets a snapshot of the configured execution middlewares ordered by <see cref="P:SemanticKernel.Graph.Execution.IGraphExecutionMiddleware.Order"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.RecoveryEngine">
            <summary>
            Gets or sets the error recovery engine for this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.PerformanceMetrics">
            <summary>
            Gets the performance metrics collector for this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.ConcurrencyOptions">
            <summary>
            Gets concurrency options for this graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.Metadata">
            <summary>
            Gets the metadata dictionary for storing additional graph information.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.GetService``1">
            <summary>
            Gets a service from the kernel's service provider.
            </summary>
            <typeparam name="T">Type of service to retrieve</typeparam>
            <returns>Service instance or null if not found</returns>
            <remarks>
            Returns <c>null</c> when no <see cref="T:Microsoft.SemanticKernel.Kernel"/> is associated with this graph instance or when the
            requested service type is not registered.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.SetMetadata(System.String,System.Object)">
            <summary>
            Sets metadata for this graph executor.
            </summary>
            <param name="key">Metadata key</param>
            <param name="value">Metadata value</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key"/> is null or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.GetMetadata``1(System.String)">
            <summary>
            Gets metadata from this graph executor.
            </summary>
            <typeparam name="T">Type of metadata to retrieve</typeparam>
            <param name="key">Metadata key</param>
            <returns>Metadata value or null if not found</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key"/> is null or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.AddNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to the graph.
            </summary>
            <param name="node">Node to add</param>
            <returns>This executor for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when a node with the same ID already exists</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.RemoveNode(System.String)">
            <summary>
            Removes a node from the graph.
            </summary>
            <param name="nodeId">ID of the node to remove</param>
            <returns>True if the node was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.AddEdge(SemanticKernel.Graph.Core.ConditionalEdge)">
            <summary>
            Adds an edge to the graph.
            </summary>
            <param name="edge">Edge to add</param>
            <returns>This executor for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when edge is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when source or target nodes are not in the graph</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.Connect(System.String,System.String,System.String)">
            <summary>
            Creates and adds an unconditional edge between two nodes.
            </summary>
            <param name="sourceNodeId">Source node ID</param>
            <param name="targetNodeId">Target node ID</param>
            <param name="edgeName">Optional edge name</param>
            <returns>This executor for method chaining</returns>
            <exception cref="T:System.ArgumentException">Thrown when node IDs are invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when nodes are not found</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ConnectWhen(System.String,System.String,System.Func{Microsoft.SemanticKernel.KernelArguments,System.Boolean},System.String)">
            <summary>
            Creates and adds a conditional edge between two nodes.
            </summary>
            <param name="sourceNodeId">Source node ID</param>
            <param name="targetNodeId">Target node ID</param>
            <param name="condition">Condition function</param>
            <param name="edgeName">Optional edge name</param>
            <returns>This executor for method chaining</returns>
            <exception cref="T:System.ArgumentException">Thrown when node IDs are invalid</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when condition is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when nodes are not found</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.RemoveEdge(System.String)">
            <summary>
            Removes an edge by its identifier.
            </summary>
            <param name="edgeId">The identifier of the edge to remove.</param>
            <returns>True if the edge was found and removed; otherwise false.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="edgeId"/> is null or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.Disconnect(System.String,System.String)">
            <summary>
            Disconnects edges from a source node to a target node (all matching edges).
            </summary>
            <param name="sourceNodeId">Source node identifier.</param>
            <param name="targetNodeId">Target node identifier.</param>
            <returns>The number of removed edges.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ReplaceNode(System.String,SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Replaces the implementation of a node while preserving its identity (NodeId).
            Updates all registered edges to reference the new instance.
            </summary>
            <param name="nodeId">Identifier of the node to replace.</param>
            <param name="newNode">Replacement node instance with the same <c>NodeId</c>.</param>
            <returns>This executor for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="nodeId"/> is null/whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newNode"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the node is not found or <c>NodeId</c> differs.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.RegisterAbVariant(System.String,SemanticKernel.Graph.Core.IGraphNode,System.Double)">
            <summary>
            Registers an A/B variant for a node with a given weight.
            The variant should ideally share the same NodeId to preserve edge wiring.
            </summary>
            <param name="originalNodeId">Identifier of the original node.</param>
            <param name="variantNode">Variant node implementation.</param>
            <param name="weight">Relative selection weight (> 0).</param>
            <returns>This executor for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="originalNodeId"/> is null/whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="variantNode"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="weight"/> is not positive.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ConfigureSelfHealing(SemanticKernel.Graph.Core.GraphExecutor.SelfHealingOptions)">
            <summary>
            Configures self-healing policy for failing nodes.
            </summary>
            <param name="options">Self-healing options.</param>
            <returns>This executor for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.SetStartNode(System.String)">
            <summary>
            Sets the starting node for graph execution.
            </summary>
            <param name="nodeId">ID of the node to start execution from</param>
            <returns>This executor for method chaining</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the node is not found</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.SetStartNodeInternal(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Sets the starting node using a node reference. Intended for internal builders/importers.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ConfigureMetrics(SemanticKernel.Graph.Core.GraphMetricsOptions)">
            <summary>
            Configures performance metrics collection for this graph.
            </summary>
            <param name="options">Metrics collection options (null to disable metrics)</param>
            <returns>This executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ConfigureConcurrency(SemanticKernel.Graph.Core.GraphConcurrencyOptions)">
            <summary>
            Configures concurrency options for parallel execution.
            </summary>
            <param name="options">Concurrency options (null disables parallel execution)</param>
            <returns>This executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ConfigureResources(SemanticKernel.Graph.Core.GraphResourceOptions)">
            <summary>
            Configures resource governance options (CPU/memory limits, rate limiting, QoS).
            </summary>
            <param name="options">Resource governance options (null disables resource governance).</param>
            <returns>This executor for method chaining.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the graph starting from the configured start node.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Final execution result</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when kernel or arguments are null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the graph is not ready for execution</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ExecuteFromNodeAsync(SemanticKernel.Graph.Core.IGraphNode,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the graph starting from a specific node instance.
            Useful for subgraph scenarios where callers want to force a start node.
            </summary>
            <param name="startNode">Node instance to begin execution.</param>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Initial arguments for execution.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The final execution result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="startNode"/> is not part of this graph.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.GetNodeById(System.String)">
            <summary>
            Gets a node by its identifier.
            </summary>
            <param name="nodeId">The identifier of the node.</param>
            <returns>The node instance if found; otherwise throws.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="nodeId"/> is null or whitespace.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a node with the given identifier is not found.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ExecuteFromAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the graph starting from a specific node.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="startNodeId">ID of the node to start from</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Final execution result</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when kernel or arguments are null</exception>
            <exception cref="T:System.ArgumentException">Thrown when startNodeId is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the start node is not found</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ExecuteSequentialAsync(SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Executes the graph sequentially, following edges from node to node.
            </summary>
            <param name="context">Execution context</param>
            <returns>Final execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ValidateGraphIntegrity">
            <summary>
            Validates the integrity of the graph structure.
            </summary>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ValidateNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Validates a specific node.
            </summary>
            <param name="node">Node to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.FindReachableNodes(SemanticKernel.Graph.Core.IGraphNode,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Recursively finds all nodes reachable from the given node.
            </summary>
            <param name="node">Starting node</param>
            <param name="visited">Set of visited node IDs</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ValidateSchemaCompatibilityAcrossEdges(SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Validates compatibility of typed schemas across edges when available.
            Produces warnings for potential incompatibilities (not hard errors) since state may satisfy inputs at runtime.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.GetEdgeMergeConfiguration(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets the merge configuration for a specific edge between source and target nodes.
            Uses edge-specific configuration if available, otherwise falls back to global default.
            </summary>
            <param name="sourceNode">Source node of the edge</param>
            <param name="targetNode">Target node of the edge</param>
            <param name="graphState">Current graph state for edge evaluation</param>
            <returns>Merge configuration to use for joining states</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.GetCombinedNextNodes(SemanticKernel.Graph.Core.IGraphNode,Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets next node candidates as a union of node-defined navigation and executor-registered edges.
            Applies self-healing filter to avoid quarantined nodes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.SelectNextNodeAsync(SemanticKernel.Graph.Core.IGraphNode,System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Execution.GraphExecutionContext,Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Selects next node using routing engine if available; otherwise picks the first candidate.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.SelectAbVariant(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Selects an A/B variant for the node if registered; otherwise returns the original node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.GetNode(System.String)">
            <summary>
            Gets a node by its ID.
            </summary>
            <param name="nodeId">Node ID</param>
            <returns>Node if found, null otherwise</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.CreateGraphSummary(System.Boolean)">
            <summary>
            Creates a summary of the graph structure.
            </summary>
            <param name="includeNodeDetails">Whether to include detailed node information</param>
            <returns>Graph summary</returns>
            <remarks>
            Intended for diagnostics, logging, and documentation. Output format is human-readable.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.CategorizeError(System.Exception)">
            <summary>
            Categorizes an exception into a specific error type for recovery processing.
            </summary>
            <param name="exception">Exception to categorize</param>
            <returns>Categorized error type</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.DetermineErrorSeverity(System.Exception)">
            <summary>
            Determines the severity of an error for recovery decision making.
            </summary>
            <param name="exception">Exception to evaluate</param>
            <returns>Error severity level</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.IsTransientError(System.Exception)">
            <summary>
            Determines if an exception represents a transient error that might succeed on retry.
            </summary>
            <param name="exception">Exception to evaluate</param>
            <returns>True if the error is likely transient</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ExecuteNodeAsync(SemanticKernel.Graph.Core.IGraphNode,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes a single graph node.
            </summary>
            <param name="node">The node to execute</param>
            <param name="kernel">The kernel instance</param>
            <param name="arguments">The kernel arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ExecuteGraphAsync(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode},Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes a collection of graph nodes.
            </summary>
            <param name="nodes">The nodes to execute</param>
            <param name="kernel">The kernel instance</param>
            <param name="arguments">The kernel arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.ToString">
            <summary>
            Returns a string representation of this graph executor.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphExecutor.NodeVariant">
            <summary>
            Describes a weighted node variant for simple A/B testing.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.NodeVariant.#ctor(SemanticKernel.Graph.Core.IGraphNode,System.Double)">
            <summary>
            Describes a weighted node variant for simple A/B testing.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphExecutor.SelfHealingOptions">
            <summary>
            Basic self-healing policy for failing nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.SelfHealingOptions.EnableQuarantine">
            <summary>
            Enables quarantining of failing nodes for a period after repeated failures.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.SelfHealingOptions.QuarantineFailureThreshold">
            <summary>
            Number of consecutive failures before quarantining a node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.SelfHealingOptions.QuarantineDuration">
            <summary>
            Duration that a node remains quarantined and is skipped during selection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.SelfHealingOptions.AutoClearQuarantineOnSuccess">
            <summary>
            Automatically clears quarantine after a successful execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.GraphNodeChangedEventArgs.#ctor(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Initializes a new instance of the event args.
            </summary>
            <param name="node">The node that changed.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.GraphNodeChangedEventArgs.Node">
            <summary>
            Gets the affected node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.GraphNodeReplacedEventArgs.NodeId">
            <summary>
            Gets the identifier of the node that was replaced.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.GraphNodeReplacedEventArgs.NewNode">
            <summary>
            Gets the new node instance.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphExecutor.GraphEdgeChangedEventArgs.#ctor(SemanticKernel.Graph.Core.ConditionalEdge)">
            <summary>
            Initializes a new instance of the event args.
            </summary>
            <param name="edge">The edge that changed.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutor.GraphEdgeChangedEventArgs.Edge">
            <summary>
            Gets the affected edge.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphInspectionApi">
            <summary>
            Runtime API for inspecting graph structure, execution state, and performance metrics.
            Provides endpoints for monitoring, debugging, and analyzing graph execution in real-time.
            </summary>
            <remarks>
            Features:
            - Real-time graph structure inspection
            - Execution state monitoring
            - Performance metrics access
            - Node and edge details retrieval
            - Execution path tracking
            - Health checks and status monitoring
            - Custom query capabilities
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.#ctor(SemanticKernel.Graph.Core.GraphInspectionOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of GraphInspectionApi.
            </summary>
            <param name="options">Inspection API configuration options</param>
            <param name="logger">Logger instance for diagnostics</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.RegisterExecution(SemanticKernel.Graph.Execution.GraphExecutionContext,SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Registers an active execution context for inspection.
            </summary>
            <param name="executionContext">The execution context to register</param>
            <param name="performanceMetrics">Associated performance metrics</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.UnregisterExecution(System.String)">
            <summary>
            Unregisters an execution context from inspection.
            </summary>
            <param name="executionId">The execution ID to unregister</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.RegisterDebugSession(SemanticKernel.Graph.Debug.IDebugSession)">
            <summary>
            Registers a debug session for enhanced inspection capabilities.
            </summary>
            <param name="debugSession">The debug session to register</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetGraphStructure(System.String,SemanticKernel.Graph.Core.InspectionFormat)">
            <summary>
            Gets the complete graph structure for a specific execution.
            </summary>
            <param name="executionId">The execution ID to inspect</param>
            <param name="format">The format for the response</param>
            <returns>Graph structure data in the specified format</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetNodeDetails(System.String,System.String)">
            <summary>
            Gets detailed information about a specific node.
            </summary>
            <param name="executionId">The execution ID</param>
            <param name="nodeId">The node ID to inspect</param>
            <returns>Detailed node information</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetActiveExecutions">
            <summary>
            Gets all active executions with basic information.
            </summary>
            <returns>List of active executions</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetPerformanceMetrics(System.String,System.Nullable{System.TimeSpan},SemanticKernel.Graph.Core.MetricsExportFormat)">
            <summary>
            Gets performance metrics for a specific execution.
            </summary>
            <param name="executionId">The execution ID</param>
            <param name="timeWindow">Time window for metrics aggregation</param>
            <param name="format">Export format for metrics</param>
            <returns>Performance metrics data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetPerformanceHeatmap(System.String)">
            <summary>
            Gets performance heatmap data for visualization.
            </summary>
            <param name="executionId">The execution ID</param>
            <returns>Performance heatmap data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetExecutionStatus(System.String)">
            <summary>
            Gets current execution status with real-time highlights.
            </summary>
            <param name="executionId">The execution ID</param>
            <returns>Current execution status</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetHealthCheck">
            <summary>
            Gets health check information for the inspection API.
            </summary>
            <returns>Health check response</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.CreateVisualizationData(SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Creates visualization data from execution context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetNodeProperties(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Gets properties for a specific node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetNodeMetrics(System.String,System.String)">
            <summary>
            Gets metrics for a specific node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.GetNodeDebugInfo(System.String,System.String)">
            <summary>
            Gets debug information for a specific node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.ThrowIfDisposed">
            <summary>
            Throws if the API has been disposed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionApi.Dispose">
            <summary>
            Disposes the inspection API and releases resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphInspectionOptions">
            <summary>
            Configuration options for the graph inspection API.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionOptions.MaxActiveExecutions">
            <summary>
            Gets or sets the maximum number of active executions to track.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionOptions.EnableDetailedNodeInspection">
            <summary>
            Gets or sets whether to enable detailed node inspection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionOptions.EnablePerformanceMetrics">
            <summary>
            Gets or sets whether to enable performance metrics collection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionOptions.EnableRealtimeMonitoring">
            <summary>
            Gets or sets whether to enable real-time monitoring.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionOptions.CacheDuration">
            <summary>
            Gets or sets the cache duration for inspection results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionOptions.StartTime">
            <summary>
            Gets or sets the start time for uptime calculation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionOptions.IncludeDebugInfo">
            <summary>
            Gets or sets whether to include debug information in responses.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionOptions.IncludePerformanceHeatmaps">
            <summary>
            Gets or sets whether to include performance heatmaps.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.InspectionFormat">
            <summary>
            Enumeration of supported inspection response formats.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InspectionFormat.Json">
            <summary>
            JSON format for API responses.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InspectionFormat.Dot">
            <summary>
            DOT format for GraphViz visualization.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InspectionFormat.Mermaid">
            <summary>
            Mermaid format for web-based diagrams.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InspectionFormat.Xml">
            <summary>
            XML format for structured data exchange.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphInspectionResponse">
            <summary>
            Represents a response from the graph inspection API.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionResponse.IsSuccess">
            <summary>
            Gets whether the request was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionResponse.Data">
            <summary>
            Gets the response data.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionResponse.ErrorMessage">
            <summary>
            Gets the error message if the request failed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionResponse.Metadata">
            <summary>
            Gets additional metadata about the response.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphInspectionResponse.Timestamp">
            <summary>
            Gets the response timestamp.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionResponse.Success(System.String,System.Object)">
            <summary>
            Creates a successful response.
            </summary>
            <param name="data">Response data</param>
            <param name="metadata">Optional metadata</param>
            <returns>Successful response</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionResponse.NotFound(System.String)">
            <summary>
            Creates a not found response.
            </summary>
            <param name="message">Not found message</param>
            <returns>Not found response</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphInspectionResponse.Error(System.String)">
            <summary>
            Creates an error response.
            </summary>
            <param name="errorMessage">Error message</param>
            <returns>Error response</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphMetricsExporter">
            <summary>
            Advanced metrics exporter for graph execution data.
            Provides specialized export capabilities for various visualization tools and monitoring systems.
            </summary>
            <remarks>
            Supported export formats:
            - JSON: For web dashboards and APIs
            - CSV: For spreadsheet analysis
            - Prometheus: For monitoring systems
            - XML: For legacy system integration
            - YAML: For configuration management
            - InfluxDB: For time-series databases
            - Grafana: For Grafana dashboards
            - Chart.js: For web charts
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.#ctor(SemanticKernel.Graph.Core.GraphMetricsExportOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of GraphMetricsExporter.
            </summary>
            <param name="options">Export configuration options</param>
            <param name="logger">Logger instance for diagnostics</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportMetrics(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Core.MetricsExportFormat,System.Nullable{System.TimeSpan})">
            <summary>
            Exports performance metrics in the specified format.
            </summary>
            <param name="performanceMetrics">Performance metrics to export</param>
            <param name="format">Target export format</param>
            <param name="timeWindow">Time window for data aggregation</param>
            <returns>Formatted metrics data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForDashboard(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Core.DashboardType,System.Nullable{System.TimeSpan})">
            <summary>
            Exports metrics specifically formatted for dashboard visualization.
            </summary>
            <param name="performanceMetrics">Performance metrics to export</param>
            <param name="dashboardType">Target dashboard platform</param>
            <param name="timeWindow">Time window for data aggregation</param>
            <returns>Dashboard-formatted metrics data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportTimeSeries(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Core.TimeSeriesFormat,System.TimeSpan,System.TimeSpan)">
            <summary>
            Exports time-series metrics data for temporal analysis.
            </summary>
            <param name="performanceMetrics">Performance metrics to export</param>
            <param name="format">Time-series format</param>
            <param name="timeWindow">Time window for data collection</param>
            <param name="granularity">Data point granularity</param>
            <returns>Time-series formatted data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportComprehensiveReport(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.ReportType)">
            <summary>
            Exports comprehensive report with multiple visualizations.
            </summary>
            <param name="performanceMetrics">Performance metrics to export</param>
            <param name="visualizationData">Graph structure data</param>
            <param name="reportType">Type of report to generate</param>
            <returns>Comprehensive report data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportAsJson(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics as enhanced JSON with visualization hints.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportAsCsv(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics as CSV with multiple sheets/sections.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportAsPrometheus(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics in Prometheus format with proper labeling.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportAsXml(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics as XML with rich metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportAsYaml(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics as YAML for configuration management.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForGrafana(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics for Grafana dashboard.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForChartJs(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics for Chart.js visualization.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForPowerBI(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics for PowerBI dashboard.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForTableau(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics for Tableau analysis.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForCustomWeb(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Exports metrics for custom web dashboards.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForInfluxDB(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan,System.TimeSpan)">
            <summary>
            Exports time-series data for InfluxDB.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportTimeSeriesPrometheus(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan,System.TimeSpan)">
            <summary>
            Exports time-series data in Prometheus format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForOpenMetrics(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan,System.TimeSpan)">
            <summary>
            Exports data for OpenMetrics format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportForStatsD(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan,System.TimeSpan)">
            <summary>
            Exports data for StatsD format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportExecutiveReport(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Exports executive summary report.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportTechnicalReport(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Exports technical detailed report.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportOperationalReport(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Exports operational monitoring report.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ExportDiagnosticReport(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Exports diagnostic troubleshooting report.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.CalculateThroughput(SemanticKernel.Graph.Core.GraphPerformanceSummary,System.TimeSpan)">
            <summary>
            Calculates throughput in requests per second.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GetVisualizationColor(System.Double)">
            <summary>
            Gets visualization color based on success rate.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.CalculateVisualizationSize(System.Int64,System.Int64)">
            <summary>
            Calculates visualization size based on execution count.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.CalculateVisualizationOpacity(System.TimeSpan,System.TimeSpan)">
            <summary>
            Calculates visualization opacity based on performance.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GetNodePercentileData(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.String)">
            <summary>
            Gets node percentile data for detailed analysis.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateTrendAnalysis(SemanticKernel.Graph.Core.GraphPerformanceMetrics,System.TimeSpan)">
            <summary>
            Generates trend analysis data.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GeneratePerformanceAlerts(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates performance alerts.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GeneratePerformanceRecommendations(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates performance recommendations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.EscapeCsvValue(System.String)">
            <summary>
            Escapes CSV values properly.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.EscapePrometheusLabel(System.String)">
            <summary>
            Escapes Prometheus label values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.CalculateP95ExecutionTime(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Calculates P95 execution time.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.CalculateP99ExecutionTime(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Calculates P99 execution time.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.CalculatePerformanceRating(SemanticKernel.Graph.Core.NodePerformanceSummary,System.TimeSpan)">
            <summary>
            Calculates performance rating for a node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateTechnicalRecommendations(SemanticKernel.Graph.Core.GraphPerformanceSummary,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Generates technical recommendations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.CalculateSystemLoad(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Calculates system load indicator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateOperationalActionItems(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates operational action items.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.IdentifyPerformanceBottlenecks(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Identifies performance bottlenecks.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.AnalyzeErrorPatterns(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Analyzes error patterns.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.AnalyzeExecutionPatterns(SemanticKernel.Graph.Core.GraphPerformanceSummary,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Analyzes execution patterns.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.AnalyzeResourceUtilization(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Analyzes resource utilization.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateCommonIssues(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates common issues list.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateResolutionSteps(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates resolution steps.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GeneratePreventiveMeasures(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates preventive measures.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateExecutionTimeDistribution(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates execution time distribution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateErrorBreakdown(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates error breakdown.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GeneratePathComplexityAnalysis(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates path complexity analysis.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateExecutiveSummary(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates executive summary text.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.GenerateExecutiveRecommendations(SemanticKernel.Graph.Core.GraphPerformanceSummary)">
            <summary>
            Generates executive recommendations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.ThrowIfDisposed">
            <summary>
            Throws if the exporter has been disposed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsExporter.Dispose">
            <summary>
            Disposes the metrics exporter and releases resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphMetricsExportOptions">
            <summary>
            Configuration options for metrics export.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsExportOptions.IndentedOutput">
            <summary>
            Gets or sets whether to use indented output formatting.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsExportOptions.UseCamelCase">
            <summary>
            Gets or sets whether to use camelCase property naming.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsExportOptions.MaxExportedNodes">
            <summary>
            Gets or sets the maximum number of nodes to include in exports.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsExportOptions.MaxExportedPaths">
            <summary>
            Gets or sets the maximum number of paths to include in exports.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsExportOptions.IncludePercentileData">
            <summary>
            Gets or sets whether to include detailed percentile data.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsExportOptions.IncludeTrendAnalysis">
            <summary>
            Gets or sets whether to include trend analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsExportOptions.IncludeRecommendations">
            <summary>
            Gets or sets whether to include performance recommendations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsExportOptions.FloatingPointPrecision">
            <summary>
            Gets or sets the precision for floating-point numbers.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DashboardType">
            <summary>
            Enumeration of supported dashboard types.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DashboardType.Grafana">
            <summary>
            Grafana monitoring dashboard.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DashboardType.ChartJs">
            <summary>
            Chart.js web charts.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DashboardType.PowerBI">
            <summary>
            Microsoft Power BI dashboard.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DashboardType.Tableau">
            <summary>
            Tableau analytics dashboard.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DashboardType.CustomWeb">
            <summary>
            Custom web dashboard.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.TimeSeriesFormat">
            <summary>
            Enumeration of time-series data formats.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeSeriesFormat.InfluxDB">
            <summary>
            InfluxDB line protocol.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeSeriesFormat.Prometheus">
            <summary>
            Prometheus time-series format.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeSeriesFormat.OpenMetrics">
            <summary>
            OpenMetrics format.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeSeriesFormat.StatsD">
            <summary>
            StatsD format.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ReportType">
            <summary>
            Enumeration of comprehensive report types.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ReportType.Executive">
            <summary>
            Executive summary report for business stakeholders.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ReportType.Technical">
            <summary>
            Technical analysis report for developers.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ReportType.Operational">
            <summary>
            Operational status report for operations teams.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ReportType.Diagnostic">
            <summary>
            Diagnostic troubleshooting report.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphMetricsOptions">
            <summary>
            Configuration options for graph performance metrics collection.
            Controls the behavior and scope of metrics gathering and resource monitoring.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsOptions.#ctor">
            <summary>
            Initializes a new instance of GraphMetricsOptions with default values.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.EnableResourceMonitoring">
            <summary>
            Gets or sets whether to enable system resource monitoring (CPU, memory).
            </summary>
            <remarks>
            When enabled, the metrics collector will attempt to monitor system resources
            using performance counters. This may require elevated permissions on some systems.
            Default: false
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.ResourceSamplingInterval">
            <summary>
            Gets or sets the interval for sampling system resources.
            </summary>
            <remarks>
            Only applies when EnableResourceMonitoring is true.
            More frequent sampling provides better accuracy but uses more CPU.
            Default: 5 seconds
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.MaxSampleHistory">
            <summary>
            Gets or sets the maximum number of execution samples to retain in memory.
            </summary>
            <remarks>
            Limits memory usage by keeping only the most recent samples.
            Older samples are automatically removed when this limit is exceeded.
            Default: 10,000
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.EnableDetailedPathTracking">
            <summary>
            Gets or sets whether to enable detailed execution path tracking.
            </summary>
            <remarks>
            When enabled, tracks statistics for each unique execution path through the graph.
            This provides valuable insights but uses more memory for complex graphs.
            Default: true
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.MaxPathHistoryPerPath">
            <summary>
            Gets or sets the maximum number of execution records to keep per path.
            </summary>
            <remarks>
            Only applies when EnableDetailedPathTracking is true.
            Prevents memory bloat for frequently executed paths.
            Default: 500
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.EnablePercentileCalculations">
            <summary>
            Gets or sets whether to enable percentile calculations for execution times.
            </summary>
            <remarks>
            Percentile calculations (P50, P95, P99) provide insights into execution time distribution
            but require keeping execution time samples in memory for calculations.
            Default: true
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.MetricsRetentionPeriod">
            <summary>
            Gets or sets the period for which metrics are retained.
            </summary>
            <remarks>
            Metrics older than this period are automatically cleaned up.
            Longer retention provides more historical data but uses more memory.
            Default: 24 hours
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.EnableRealTimeMetrics">
            <summary>
            Gets or sets whether to enable real-time metrics updates.
            </summary>
            <remarks>
            When enabled, metrics are updated immediately as executions complete.
            Disabling this can improve performance for high-throughput scenarios.
            Default: true
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphMetricsOptions.AggregationInterval">
            <summary>
            Gets or sets the interval for aggregating metrics data.
            </summary>
            <remarks>
            Determines how frequently aggregated metrics (averages, totals) are recalculated.
            More frequent aggregation provides fresher data but uses more CPU.
            Default: 1 minute
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsOptions.Validate">
            <summary>
            Validates the configuration options and throws if any are invalid.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when values are outside valid ranges</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsOptions.CreateDevelopmentOptions">
            <summary>
            Creates a configuration optimized for development and debugging.
            </summary>
            <returns>Development-optimized metrics options</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsOptions.CreateProductionOptions">
            <summary>
            Creates a configuration optimized for production environments.
            </summary>
            <returns>Production-optimized metrics options</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphMetricsOptions.CreateMinimalOptions">
            <summary>
            Creates a minimal configuration for performance-critical scenarios.
            </summary>
            <returns>Minimal metrics options</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphPerformanceMetrics">
            <summary>
            Comprehensive performance metrics collector for graph execution.
            Tracks node-level metrics, execution paths, resource usage, and performance indicators.
            </summary>
            <remarks>
            This class provides:
            - Node execution timing: Individual node performance tracking
            - Path analysis: Execution route tracking and analysis
            - Resource monitoring: Memory, CPU, and throughput metrics
            - Performance aggregation: Summary statistics and trends
            - Thread safety: All operations are thread-safe for concurrent access
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.#ctor(SemanticKernel.Graph.Core.GraphMetricsOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of GraphPerformanceMetrics.
            </summary>
            <param name="options">Metrics collection options</param>
            <param name="logger">Optional logger for metrics operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceMetrics.TotalExecutions">
            <summary>
            Gets the total number of graph executions tracked.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceMetrics.OverallThroughput">
            <summary>
            Gets the overall throughput in executions per second.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceMetrics.AverageExecutionLatency">
            <summary>
            Gets the average execution latency across all nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceMetrics.CurrentCpuUsage">
            <summary>
            Gets the current CPU usage percentage (if monitoring enabled).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceMetrics.CurrentAvailableMemoryMB">
            <summary>
            Gets the current available memory in MB (if monitoring enabled).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceMetrics.NodeMetrics">
            <summary>
            Gets performance statistics for all tracked nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceMetrics.PathMetrics">
            <summary>
            Gets execution path statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceMetrics.CircuitBreakerMetrics">
            <summary>
            Gets circuit breaker statistics for all nodes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.StartNodeTracking(System.String,System.String,System.String)">
            <summary>
            Starts tracking a node execution.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="nodeName">Node name</param>
            <param name="executionId">Execution identifier</param>
            <returns>Tracking token for completion</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.CompleteNodeTracking(SemanticKernel.Graph.Core.NodeExecutionTracker,System.Boolean,System.Object,System.Exception)">
            <summary>
            Completes node execution tracking and records metrics.
            </summary>
            <param name="tracker">Node execution tracker</param>
            <param name="success">Whether execution was successful</param>
            <param name="result">Execution result (optional)</param>
            <param name="exception">Exception if failed (optional)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.RecordExecutionPath(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.TimeSpan,System.Boolean)">
            <summary>
            Records an execution path for analysis.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="path">Sequence of nodes executed</param>
            <param name="totalDuration">Total execution duration</param>
            <param name="success">Whether the execution was successful</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.RecordCircuitBreakerStateChange(System.String,SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState,System.String)">
            <summary>
            Records circuit breaker state change for metrics.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="newState">New circuit breaker state</param>
            <param name="executionId">Execution identifier</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.RecordCircuitBreakerOperation(System.String,System.Boolean,System.TimeSpan,System.String)">
            <summary>
            Records circuit breaker operation result.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="success">Whether the operation was successful</param>
            <param name="duration">Operation duration</param>
            <param name="executionId">Execution identifier</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.GetPerformanceSummary(System.TimeSpan)">
            <summary>
            Gets performance summary for a specific time window.
            </summary>
            <param name="timeWindow">Time window to analyze</param>
            <returns>Performance summary</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.RecordExecutionSample(SemanticKernel.Graph.Core.NodeExecutionTracker,System.TimeSpan,System.Boolean)">
            <summary>
            Records an execution sample for statistical analysis.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.CalculatePercentile(System.Collections.Generic.IEnumerable{System.TimeSpan},System.Double)">
            <summary>
            Calculates percentile for a set of durations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.SampleResources(System.Object)">
            <summary>
            Samples system resources for monitoring.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.GetTopNodesByExecutionTime(System.Int32)">
            <summary>
            Gets top nodes by execution time.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.GetMostFrequentPaths(System.Int32)">
            <summary>
            Gets most frequently executed paths.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceMetrics.Dispose">
            <summary>
            Disposes resources used by the metrics collector.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphPerformanceSummary">
            <summary>
            Comprehensive performance summary for graph execution over a specific time window.
            Provides aggregated metrics, top performers, and system resource information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.TimeWindow">
            <summary>
            Gets or sets the time window this summary covers.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.TotalExecutions">
            <summary>
            Gets or sets the total number of executions in the time window.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.SuccessfulExecutions">
            <summary>
            Gets or sets the number of successful executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.FailedExecutions">
            <summary>
            Gets or sets the number of failed executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.SuccessRate">
            <summary>
            Gets the success rate as a percentage (0-100).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.AverageExecutionTime">
            <summary>
            Gets or sets the average execution time across all executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.MinExecutionTime">
            <summary>
            Gets or sets the minimum execution time recorded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.MaxExecutionTime">
            <summary>
            Gets or sets the maximum execution time recorded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.Throughput">
            <summary>
            Gets or sets the throughput in executions per second.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.CurrentCpuUsage">
            <summary>
            Gets or sets the current CPU usage percentage (if monitoring enabled).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.CurrentAvailableMemoryMB">
            <summary>
            Gets or sets the current available memory in MB (if monitoring enabled).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.TopNodesByExecutionTime">
            <summary>
            Gets or sets the top nodes by total execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.MostFrequentPaths">
            <summary>
            Gets or sets the most frequently executed paths.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.GeneratedAt">
            <summary>
            Gets the timestamp when this summary was generated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.ExecutionCount">
            <summary>
            Gets or sets the number of full graph executions in the time window.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.ExecutionAverageTime">
            <summary>
            Gets or sets the average total time per full execution in the time window.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.ExecutionMinTime">
            <summary>
            Gets or sets the minimum total time among full executions in the time window.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.ExecutionMaxTime">
            <summary>
            Gets or sets the maximum total time among full executions in the time window.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.ExecutionP95Time">
            <summary>
            Gets or sets the 95th percentile of total time among full executions in the time window.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceSummary.TotalExecutionTime">
            <summary>
            Gets or sets the sum of total times across all full executions in the time window.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphPerformanceSummary.ToFormattedString">
            <summary>
            Gets a formatted string representation of the performance summary.
            </summary>
            <returns>Formatted summary text</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodePerformanceSummary">
            <summary>
            Performance summary for a specific node in the graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodePerformanceSummary.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodePerformanceSummary.NodeName">
            <summary>
            Gets or sets the node name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodePerformanceSummary.TotalExecutions">
            <summary>
            Gets or sets the total number of executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodePerformanceSummary.AverageExecutionTime">
            <summary>
            Gets or sets the average execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodePerformanceSummary.TotalExecutionTime">
            <summary>
            Gets or sets the total execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodePerformanceSummary.SuccessRate">
            <summary>
            Gets or sets the success rate as a percentage (0-100).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PathFrequencySummary">
            <summary>
            Frequency summary for an execution path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathFrequencySummary.Path">
            <summary>
            Gets or sets the path string representation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathFrequencySummary.ExecutionCount">
            <summary>
            Gets or sets the number of times this path was executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathFrequencySummary.AverageExecutionTime">
            <summary>
            Gets or sets the average execution time for this path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathFrequencySummary.SuccessRate">
            <summary>
            Gets or sets the success rate as a percentage (0-100).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionSample">
            <summary>
            Individual execution sample for statistical analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionSample.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionSample.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionSample.Duration">
            <summary>
            Gets or sets the execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionSample.Success">
            <summary>
            Gets or sets whether the execution was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionSample.Timestamp">
            <summary>
            Gets or sets the timestamp when the execution completed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionDurationSample">
            <summary>
            Aggregated duration sample for a full graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionDurationSample.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionDurationSample.Duration">
            <summary>
            Gets or sets the total execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionDurationSample.Success">
            <summary>
            Gets or sets whether the execution was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionDurationSample.Timestamp">
            <summary>
            Gets or sets the timestamp when the execution completed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphRealtimeHighlighter">
            <summary>
            Real-time execution path highlighter for graph visualizations.
            Provides live updates of execution progress with visual highlighting,
            streaming capabilities, and customizable highlight styles.
            </summary>
            <remarks>
            Features:
            - Real-time execution path tracking
            - Live visual highlights for current and completed nodes
            - Streaming updates for web/mobile consumption
            - Customizable highlight styles and animations
            - Performance-optimized updates
            - Multi-subscriber support
            - Historical execution replay
            - Batch updates for high-frequency executions
            </remarks>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.NodeExecutionStarted">
            <summary>
            Occurs when a node execution starts.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.NodeExecutionCompleted">
            <summary>
            Occurs when a node execution completes.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.ExecutionPathUpdated">
            <summary>
            Occurs when the execution path is updated.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.HighlightsUpdated">
            <summary>
            Occurs when highlights are updated for an execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.#ctor(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of GraphRealtimeHighlighter.
            </summary>
            <param name="eventStream">Optional event stream for real-time updates</param>
            <param name="options">Highlighter configuration options</param>
            <param name="logger">Logger instance for diagnostics</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.StartHighlighting(System.String,SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.ExecutionHighlightStyle)">
            <summary>
            Starts highlighting for a graph execution.
            </summary>
            <param name="executionId">The execution ID to highlight</param>
            <param name="initialVisualizationData">Initial graph structure</param>
            <param name="highlightStyle">Optional custom highlight style</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.StopHighlighting(System.String)">
            <summary>
            Stops highlighting for a graph execution.
            </summary>
            <param name="executionId">The execution ID to stop highlighting</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.UpdateCurrentNode(System.String,SemanticKernel.Graph.Core.IGraphNode,System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Updates the current node being executed.
            </summary>
            <param name="executionId">The execution ID</param>
            <param name="currentNode">The current node being executed</param>
            <param name="executionPath">The current execution path</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.UpdateExecutionPath(System.String,System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Updates the execution path for progressive highlighting.
            </summary>
            <param name="executionId">The execution ID</param>
            <param name="newExecutionPath">The updated execution path</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.AddNodeCompletionHighlight(System.String,SemanticKernel.Graph.Core.IGraphNode,System.Boolean,System.TimeSpan)">
            <summary>
            Adds a node completion highlight.
            </summary>
            <param name="executionId">The execution ID</param>
            <param name="completedNode">The node that completed</param>
            <param name="success">Whether the node completed successfully</param>
            <param name="executionTime">The time taken to execute the node</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.Subscribe(System.String,SemanticKernel.Graph.Core.IExecutionHighlightSubscriber)">
            <summary>
            Subscribes to highlight updates for a specific execution.
            </summary>
            <param name="executionId">The execution ID to subscribe to</param>
            <param name="subscriber">The subscriber to add</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.Unsubscribe(System.String,SemanticKernel.Graph.Core.IExecutionHighlightSubscriber)">
            <summary>
            Unsubscribes from highlight updates for a specific execution.
            </summary>
            <param name="executionId">The execution ID to unsubscribe from</param>
            <param name="subscriber">The subscriber to remove</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.GenerateHighlightedVisualization(System.String,SemanticKernel.Graph.Core.HighlightVisualizationFormat)">
            <summary>
            Generates current visualization with highlights.
            </summary>
            <param name="executionId">The execution ID</param>
            <param name="format">The output format</param>
            <returns>Highlighted visualization data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.GetCurrentHighlightState(System.String)">
            <summary>
            Gets current highlight state for an execution.
            </summary>
            <param name="executionId">The execution ID</param>
            <returns>Current highlight state or null if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.GetHighlightHistory(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets highlight history for replay purposes.
            </summary>
            <param name="executionId">The execution ID</param>
            <param name="fromTimestamp">Optional start timestamp for history</param>
            <returns>Highlight history data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.ProcessPendingUpdates(System.Object)">
            <summary>
            Processes pending highlight updates in batches.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.QueueHighlightUpdate(System.String,SemanticKernel.Graph.Core.HighlightUpdateType,SemanticKernel.Graph.Core.ExecutionHighlightState)">
            <summary>
            Queues a highlight update for batch processing.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.NotifySubscribers(System.String,SemanticKernel.Graph.Core.HighlightUpdateType,SemanticKernel.Graph.Core.ExecutionHighlightState)">
            <summary>
            Notifies all subscribers of a highlight update.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.CreateHighlightUpdate(SemanticKernel.Graph.Core.ExecutionHighlightState)">
            <summary>
            Creates a highlight update from current state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.GenerateHighlightedMermaid(SemanticKernel.Graph.Core.ExecutionHighlightState)">
            <summary>
            Generates highlighted Mermaid diagram.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.GenerateHighlightedJson(SemanticKernel.Graph.Core.ExecutionHighlightState)">
            <summary>
            Generates highlighted JSON data.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.GenerateHighlightedDot(SemanticKernel.Graph.Core.ExecutionHighlightState)">
            <summary>
            Generates highlighted DOT data.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.GenerateHighlightedSvg(SemanticKernel.Graph.Core.ExecutionHighlightState)">
            <summary>
            Generates highlighted SVG.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.OnEventEmitted(System.Object,SemanticKernel.Graph.Streaming.GraphExecutionEvent)">
            <summary>
            Handles events from the event stream.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.ThrowIfDisposed">
            <summary>
            Throws if the highlighter has been disposed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRealtimeHighlighter.Dispose">
            <summary>
            Disposes the realtime highlighter and releases resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions">
            <summary>
            Configuration options for real-time highlighting.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions.UpdateInterval">
            <summary>
            Gets or sets the update interval for batched updates.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions.EnableImmediateUpdates">
            <summary>
            Gets or sets whether to enable immediate updates (bypassing batching).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions.MaxHistorySnapshots">
            <summary>
            Gets or sets the maximum number of historical snapshots to keep.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions.DefaultHighlightStyle">
            <summary>
            Gets or sets the default highlight style.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions.EnableAnimations">
            <summary>
            Gets or sets whether to enable animations in highlights.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions.MaxConcurrentExecutions">
            <summary>
            Gets or sets the maximum number of concurrent executions to highlight.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions.AutoCleanupCompleted">
            <summary>
            Gets or sets whether to automatically clean up completed executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphRealtimeHighlightOptions.CompletedExecutionTimeout">
            <summary>
            Gets or sets the timeout for keeping completed execution highlights.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionHighlightState">
            <summary>
            Represents the highlight state for a specific execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IExecutionHighlightSubscriber">
            <summary>
            Interface for subscribers to highlight updates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IExecutionHighlightSubscriber.OnHighlightUpdated(System.String,SemanticKernel.Graph.Core.HighlightUpdateType,SemanticKernel.Graph.Core.ExecutionHighlightUpdate)">
            <summary>
            Called when highlights are updated for an execution.
            </summary>
            <param name="executionId">The execution ID</param>
            <param name="updateType">The type of update</param>
            <param name="highlightUpdate">The highlight update data</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionHighlightUpdate">
            <summary>
            Represents a highlight update.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionHighlightSnapshot">
            <summary>
            Represents a historical snapshot of highlight state.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeCompletion">
            <summary>
            Represents a completed node execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionHighlightStyle">
            <summary>
            Defines the visual style for execution highlights.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionHighlightStyle.CurrentNodeStyle">
            <summary>
            Gets or sets the style for the currently executing node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionHighlightStyle.CompletedNodeStyle">
            <summary>
            Gets or sets the style for completed nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionHighlightStyle.FailedNodeStyle">
            <summary>
            Gets or sets the style for failed nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionHighlightStyle.ExecutionPathStyle">
            <summary>
            Gets or sets the style for execution path edges.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeHighlightStyle">
            <summary>
            Defines the visual style for a highlighted node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeHighlightStyle.FillColor">
            <summary>
            Gets or sets the fill color for the node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeHighlightStyle.StrokeColor">
            <summary>
            Gets or sets the stroke color for the node border.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeHighlightStyle.StrokeWidth">
            <summary>
            Gets or sets the stroke width for the node border.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeHighlightStyle.Opacity">
            <summary>
            Gets or sets the opacity for the node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.EdgeHighlightStyle">
            <summary>
            Defines the visual style for a highlighted edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EdgeHighlightStyle.StrokeColor">
            <summary>
            Gets or sets the stroke color for the edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EdgeHighlightStyle.StrokeWidth">
            <summary>
            Gets or sets the stroke width for the edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.EdgeHighlightStyle.Opacity">
            <summary>
            Gets or sets the opacity for the edge.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HighlightUpdateType">
            <summary>
            Enumeration of highlight update types.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightUpdateType.ExecutionStarted">
            <summary>
            Execution has started.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightUpdateType.NodeChanged">
            <summary>
            Current node has changed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightUpdateType.NodeCompleted">
            <summary>
            A node has completed execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightUpdateType.PathExtended">
            <summary>
            Execution path has been extended.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightUpdateType.ExecutionCompleted">
            <summary>
            Execution has completed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightUpdateType.SubscriberAdded">
            <summary>
            A new subscriber was added.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HighlightVisualizationFormat">
            <summary>
            Enumeration of highlight visualization formats.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightVisualizationFormat.Mermaid">
            <summary>
            Mermaid diagram format.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightVisualizationFormat.Json">
            <summary>
            JSON format.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightVisualizationFormat.Dot">
            <summary>
            DOT format for GraphViz.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HighlightVisualizationFormat.Svg">
            <summary>
            SVG format.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeHighlightEventArgs">
            <summary>
            Event args for node highlight events.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionPathHighlightEventArgs">
            <summary>
            Event args for execution path highlight events.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HighlightUpdateEventArgs">
            <summary>
            Event args for general highlight update events.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphRecoveryService">
            <summary>
            Service for automatic failure detection and recovery management in graph execution.
            Provides intelligent recovery strategies, rollback capabilities, and notification system.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.#ctor(SemanticKernel.Graph.Core.ICheckpointManager,SemanticKernel.Graph.Integration.IGraphExecutor,SemanticKernel.Graph.Core.RecoveryOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.GraphRecoveryService})">
            <summary>
            Initializes a new instance of GraphRecoveryService.
            </summary>
            <param name="checkpointManager">Checkpoint manager for state persistence</param>
            <param name="graphExecutor">Graph executor for resuming execution</param>
            <param name="options">Recovery configuration options</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.AddNotificationHandler(SemanticKernel.Graph.Core.IRecoveryNotificationHandler)">
            <summary>
            Adds a notification handler for recovery events.
            </summary>
            <param name="handler">Notification handler to add</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.RemoveNotificationHandler(SemanticKernel.Graph.Core.IRecoveryNotificationHandler)">
            <summary>
            Removes a notification handler.
            </summary>
            <param name="handler">Notification handler to remove</param>
            <returns>True if the handler was removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.AttemptRecoveryAsync(System.String,SemanticKernel.Graph.Core.ExecutionFailureContext,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Attempts automatic recovery from an execution failure.
            </summary>
            <param name="executionId">Execution identifier that failed</param>
            <param name="failureContext">Context about the failure</param>
            <param name="kernel">Semantic kernel instance for recovery</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Recovery result with success status and details</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.ValidateCheckpointHealthAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the health of checkpoints for a specific execution.
            </summary>
            <param name="executionId">Execution identifier to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Health check result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.GetActiveRecoverySessions">
            <summary>
            Gets information about active recovery sessions.
            </summary>
            <returns>Collection of active recovery sessions</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.IsRecoveryAllowed(SemanticKernel.Graph.Core.ExecutionFailureContext)">
            <summary>
            Determines if recovery is allowed for the given failure context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.AttemptCheckpointRecoveryAsync(SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation,Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Core.RecoverySession,System.Threading.CancellationToken)">
            <summary>
            Attempts recovery using a recommended checkpoint.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.AttemptRollbackRecoveryAsync(System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.Core.GraphCheckpoint},Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Core.RecoverySession,System.Threading.CancellationToken)">
            <summary>
            Attempts rollback recovery using alternative checkpoints.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.NotifyRecoveryEventAsync(SemanticKernel.Graph.Core.RecoveryEventType,SemanticKernel.Graph.Core.RecoverySession,SemanticKernel.Graph.Core.RecoveryResult,System.Threading.CancellationToken)">
            <summary>
            Notifies all registered handlers about a recovery event.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.PerformHealthCheck(System.Object)">
            <summary>
            Performs periodic health check on active sessions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphRecoveryService.Dispose">
            <summary>
            Disposes of resources used by the recovery service.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryOptions">
            <summary>
            Configuration options for graph recovery service.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryOptions.MaxRecoveryAttempts">
            <summary>
            Gets or sets the maximum number of recovery attempts per execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryOptions.MaxRollbackAttempts">
            <summary>
            Gets or sets the maximum number of rollback attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryOptions.EnableRollbackOnFailure">
            <summary>
            Gets or sets whether to enable rollback to previous checkpoints on recovery failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryOptions.EnablePeriodicHealthCheck">
            <summary>
            Gets or sets whether to enable periodic health checks of recovery sessions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryOptions.HealthCheckInterval">
            <summary>
            Gets or sets the interval for periodic health checks.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryOptions.MaxSessionDuration">
            <summary>
            Gets or sets the maximum duration for a recovery session before timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryOptions.MinimumHealthScore">
            <summary>
            Gets or sets the minimum health score (0.0 to 1.0) for checkpoints to be considered healthy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryOptions.AllowedFailureTypes">
            <summary>
            Gets or sets the failure types that are allowed for automatic recovery.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoverySession">
            <summary>
            Represents an active recovery session.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoverySession.ExecutionId">
            <summary>
            Gets or sets the execution identifier being recovered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoverySession.FailureContext">
            <summary>
            Gets or sets the failure context that triggered recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoverySession.StartTime">
            <summary>
            Gets or sets when the recovery session started.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoverySession.AttemptCount">
            <summary>
            Gets or sets the number of recovery attempts made.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoverySession.Metadata">
            <summary>
            Gets or sets additional session metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryResult">
            <summary>
            Result of a recovery attempt.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.IsSuccessful">
            <summary>
            Gets or sets whether the recovery was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.Reason">
            <summary>
            Gets or sets the reason for success or failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.RecoveryStrategy">
            <summary>
            Gets or sets the recovery strategy that was used.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.AttemptCount">
            <summary>
            Gets or sets the number of attempts made.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.Recommendation">
            <summary>
            Gets or sets the recovery recommendation that was used.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.ConsistencyValidation">
            <summary>
            Gets or sets the consistency validation result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.ResumedResult">
            <summary>
            Gets or sets the result from resumed execution (if successful).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.Error">
            <summary>
            Gets or sets any error that occurred during recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryResult.Duration">
            <summary>
            Gets or sets the time taken for the recovery attempt.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryStrategy">
            <summary>
            Recovery strategies that can be employed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryStrategy.None">
            <summary>
            No recovery strategy applied.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryStrategy.CheckpointRestore">
            <summary>
            Recovery by restoring from checkpoint.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryStrategy.RollbackToPrevious">
            <summary>
            Recovery by rolling back to a previous checkpoint.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryStrategy.SkipFailedOperation">
            <summary>
            Recovery by skipping the failed operation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryStrategy.RetryWithModification">
            <summary>
            Recovery by retrying with modified parameters.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointHealthResult">
            <summary>
            Result of checkpoint health validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointHealthResult.ExecutionId">
            <summary>
            Gets or sets the execution identifier that was checked.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointHealthResult.TotalCheckpoints">
            <summary>
            Gets or sets the total number of checkpoints found.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointHealthResult.HealthyCheckpoints">
            <summary>
            Gets or sets the number of healthy checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointHealthResult.UnhealthyCheckpoints">
            <summary>
            Gets or sets the number of unhealthy checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointHealthResult.HealthScore">
            <summary>
            Gets or sets the overall health score (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointHealthResult.IsHealthy">
            <summary>
            Gets or sets whether the checkpoints are considered healthy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointHealthResult.UnhealthyDetails">
            <summary>
            Gets or sets details about unhealthy checkpoints.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IRecoveryNotificationHandler">
            <summary>
            Interface for handling recovery notifications.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IRecoveryNotificationHandler.HandleRecoveryNotificationAsync(SemanticKernel.Graph.Core.RecoveryNotification,System.Threading.CancellationToken)">
            <summary>
            Handles a recovery notification event.
            </summary>
            <param name="notification">Recovery notification details</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the handling operation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryNotification">
            <summary>
            Notification about a recovery event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryNotification.EventType">
            <summary>
            Gets or sets the type of recovery event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryNotification.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryNotification.FailureContext">
            <summary>
            Gets or sets the failure context.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryNotification.Timestamp">
            <summary>
            Gets or sets when the event occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryNotification.RecoveryResult">
            <summary>
            Gets or sets the recovery result (if available).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryNotification.SessionDuration">
            <summary>
            Gets or sets the duration of the recovery session.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryNotification.Metadata">
            <summary>
            Gets or sets additional notification metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryEventType">
            <summary>
            Types of recovery events that can occur.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryEventType.RecoveryStarted">
            <summary>
            Recovery process has started.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryEventType.RecoverySkipped">
            <summary>
            Recovery was skipped due to configuration.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryEventType.RecoveryNotRecommended">
            <summary>
            Recovery was not recommended by the system.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryEventType.RecoverySucceeded">
            <summary>
            Recovery completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryEventType.RecoveryFailed">
            <summary>
            Recovery attempt failed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryEventType.RecoveryTimeout">
            <summary>
            Recovery session timed out.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryEventType.RecoveryError">
            <summary>
            An error occurred during recovery.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphTypeInferenceEngine">
            <summary>
            Performs lightweight type inference over a graph using available typed schemas.
            The inference is conservative and name-based: it propagates known output types from sources
            to targets that do not declare a typed schema.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphTypeInferenceEngine.InferInputSchemas(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Infers input schemas for nodes that do not implement <see cref="T:SemanticKernel.Graph.Core.ITypedSchemaNode"/>.
            When possible, derives input parameter names and types from upstream nodes' outputs by name.
            </summary>
            <param name="graph">Graph to analyze</param>
            <returns>Map of nodeId to inferred input schema (empty when nothing could be inferred)</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphVisualizationEngine">
            <summary>
            Comprehensive graph visualization engine for serialization and export to multiple formats.
            Provides methods for generating DOT, JSON, Mermaid, and other visualization formats.
            Includes support for execution path highlighting and real-time updates.
            </summary>
            <remarks>
            Supported formats:
            - DOT (GraphViz): For professional graph visualizations
            - JSON: For API consumption and data exchange
            - Mermaid: For documentation and web-based diagrams
            - SVG/PNG: For static image exports (via external tools)
            
            Features:
            - Real-time execution path highlighting
            - Performance metrics integration
            - Customizable styling and themes
            - Multi-format export capabilities
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.#ctor(SemanticKernel.Graph.Core.GraphVisualizationOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of GraphVisualizationEngine.
            </summary>
            <param name="options">Visualization configuration options</param>
            <param name="logger">Logger instance for diagnostics</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.SerializeToDot(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.DotSerializationOptions)">
            <summary>
            Serializes the graph structure to DOT format for GraphViz rendering.
            </summary>
            <param name="visualizationData">Graph visualization data</param>
            <param name="options">DOT-specific rendering options</param>
            <returns>DOT format string</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.SerializeToSvg(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.SvgSerializationOptions)">
            <summary>
            Serializes the graph structure to a simple, self-contained SVG.
            Note: This is a lightweight SVG generator for quick previews. For production-grade
            layout, prefer exporting DOT and rendering via Graphviz to SVG.
            </summary>
            <param name="visualizationData">Graph visualization data</param>
            <param name="options">SVG-specific rendering options</param>
            <returns>SVG markup string</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.SerializeToJson(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.JsonSerializationOptions)">
            <summary>
            Serializes the graph structure to JSON format for API consumption.
            </summary>
            <param name="visualizationData">Graph visualization data</param>
            <param name="options">JSON-specific serialization options</param>
            <returns>JSON string representation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.GenerateEnhancedMermaidDiagram(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.MermaidGenerationOptions)">
            <summary>
            Generates an enhanced Mermaid diagram with advanced styling and features.
            </summary>
            <param name="visualizationData">Graph visualization data</param>
            <param name="options">Mermaid-specific rendering options</param>
            <returns>Enhanced Mermaid diagram string</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.ExportMetricsForVisualization(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Core.MetricsExportFormat)">
            <summary>
            Exports execution metrics in a visualization-friendly format.
            </summary>
            <param name="performanceMetrics">Performance metrics to export</param>
            <param name="format">Export format</param>
            <returns>Formatted metrics data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.GeneratePerformanceHeatmap(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Debug.GraphVisualizationData)">
            <summary>
            Generates a performance heatmap visualization data.
            </summary>
            <param name="performanceMetrics">Performance metrics</param>
            <param name="visualizationData">Graph structure data</param>
            <returns>Heatmap visualization data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.UpdateRealtimeHighlights(SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Updates visualization data with real-time execution highlights.
            </summary>
            <param name="visualizationData">Current visualization data</param>
            <param name="currentExecutionContext">Current execution context</param>
            <returns>Updated visualization data with highlights</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.BuildDotNodeAttributes(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Debug.GraphVisualizationData,SemanticKernel.Graph.Core.DotSerializationOptions)">
            <summary>
            Builds DOT node attributes based on node properties and styling options.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.BuildDotEdgeAttributes(SemanticKernel.Graph.Debug.GraphEdgeInfo,SemanticKernel.Graph.Core.DotSerializationOptions)">
            <summary>
            Builds DOT edge attributes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.GetMermaidNodeShape(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.MermaidGenerationOptions)">
            <summary>
            Gets the appropriate Mermaid node shape based on node type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.GetMermaidEdgeStyle(SemanticKernel.Graph.Debug.GraphEdgeInfo,SemanticKernel.Graph.Core.MermaidGenerationOptions)">
            <summary>
            Gets the appropriate Mermaid edge style.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.GetColorForNodeType(System.String)">
            <summary>
            Gets color scheme for node types in visualizations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.CalculateHeatValue(SemanticKernel.Graph.Core.NodePerformanceSummary)">
            <summary>
            Calculates heat value for performance visualization.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.ExportMetricsAsJson(SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Exports performance metrics as JSON.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.ExportMetricsAsCsv(SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Exports performance metrics as CSV.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.ExportMetricsAsPrometheus(SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Exports performance metrics in Prometheus format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.GetNodeProperties(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Gets node properties for detailed JSON export.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.EscapeDotLabel(System.String)">
            <summary>
            Escapes special characters for DOT format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.EscapeMermaidLabel(System.String)">
            <summary>
            Escapes special characters for Mermaid format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.ThrowIfDisposed">
            <summary>
            Throws if the engine has been disposed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphVisualizationEngine.Dispose">
            <summary>
            Disposes the visualization engine and releases resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphVisualizationOptions">
            <summary>
            Configuration options for graph visualization engine.
            Controls various aspects of visualization generation and formatting.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphVisualizationOptions.Theme">
            <summary>
            Gets or sets the default visualization theme.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphVisualizationOptions.EnableRealtimeUpdates">
            <summary>
            Gets or sets whether to enable real-time updates.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphVisualizationOptions.EnableCaching">
            <summary>
            Gets or sets whether to cache generated visualizations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphVisualizationOptions.MaxCacheSize">
            <summary>
            Gets or sets the maximum cache size in number of entries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphVisualizationOptions.CacheExpirationMinutes">
            <summary>
            Gets or sets the cache expiration time in minutes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphVisualizationOptions.IncludePerformanceMetrics">
            <summary>
            Gets or sets whether to include performance metrics in visualizations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphVisualizationOptions.MaxNodesPerVisualization">
            <summary>
            Gets or sets the maximum number of nodes to process in a single visualization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphVisualizationOptions.EnableAdvancedStyling">
            <summary>
            Gets or sets whether to enable advanced styling features.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SvgSerializationOptions">
            <summary>
            Options specific to SVG serialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SvgSerializationOptions.Width">
            <summary>
            Gets or sets the canvas width in pixels.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SvgSerializationOptions.Height">
            <summary>
            Gets or sets the canvas height in pixels.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SvgSerializationOptions.HorizontalSpacing">
            <summary>
            Gets or sets the horizontal spacing between nodes in pixels.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SvgSerializationOptions.VerticalSpacing">
            <summary>
            Gets or sets the vertical spacing between nodes in pixels.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SvgSerializationOptions.IncludeMetricsOverlay">
            <summary>
            Gets or sets whether to draw a simple metrics overlay (node/edge counts, generated time).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SvgSerializationOptions.HighlightExecutionPath">
            <summary>
            Gets or sets whether to highlight the execution path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SvgSerializationOptions.HighlightCurrentNode">
            <summary>
            Gets or sets whether to highlight the current node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DotSerializationOptions">
            <summary>
            Options specific to DOT format serialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DotSerializationOptions.GraphName">
            <summary>
            Gets or sets the graph name in the DOT output.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DotSerializationOptions.EnableClustering">
            <summary>
            Gets or sets whether to enable node clustering.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DotSerializationOptions.HighlightExecutionPath">
            <summary>
            Gets or sets whether to highlight the execution path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DotSerializationOptions.HighlightCurrentNode">
            <summary>
            Gets or sets whether to highlight the current node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DotSerializationOptions.LayoutDirection">
            <summary>
            Gets or sets the layout direction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DotSerializationOptions.IncludeNodeTypeInfo">
            <summary>
            Gets or sets whether to include node type information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DotSerializationOptions.CustomNodeStyles">
            <summary>
            Gets or sets custom node styling rules.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DotSerializationOptions.CustomEdgeStyles">
            <summary>
            Gets or sets custom edge styling rules.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.JsonSerializationOptions">
            <summary>
            Options specific to JSON serialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.JsonSerializationOptions.Indented">
            <summary>
            Gets or sets whether to format JSON with indentation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.JsonSerializationOptions.UseCamelCase">
            <summary>
            Gets or sets whether to use camelCase property naming.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.JsonSerializationOptions.IncludeNodeProperties">
            <summary>
            Gets or sets whether to include detailed node properties.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.JsonSerializationOptions.IncludeLayoutInfo">
            <summary>
            Gets or sets whether to include layout information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.JsonSerializationOptions.IncludeExecutionMetrics">
            <summary>
            Gets or sets whether to include execution metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.JsonSerializationOptions.IncludeTimestamps">
            <summary>
            Gets or sets whether to include timestamp information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.JsonSerializationOptions.MaxSerializationDepth">
            <summary>
            Gets or sets the maximum depth for nested object serialization.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MermaidGenerationOptions">
            <summary>
            Options specific to Mermaid diagram generation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.Direction">
            <summary>
            Gets or sets the diagram direction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.IncludeTitle">
            <summary>
            Gets or sets whether to include a title in the diagram.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.EnableStyling">
            <summary>
            Gets or sets whether to enable styling classes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.HighlightExecutionPath">
            <summary>
            Gets or sets whether to highlight the execution path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.HighlightCurrentNode">
            <summary>
            Gets or sets whether to highlight the current node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.StyleByNodeType">
            <summary>
            Gets or sets whether to style nodes based on their type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.IncludePerformanceIndicators">
            <summary>
            Gets or sets whether to include performance indicators.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.Theme">
            <summary>
            Gets or sets the theme for the diagram.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MermaidGenerationOptions.CustomStyles">
            <summary>
            Gets or sets custom CSS styles to apply.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.VisualizationTheme">
            <summary>
            Enumeration of supported visualization themes.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.VisualizationTheme.Default">
            <summary>
            Default theme with standard colors and styling.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.VisualizationTheme.Dark">
            <summary>
            Dark theme optimized for dark backgrounds.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.VisualizationTheme.Light">
            <summary>
            Light theme optimized for light backgrounds.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.VisualizationTheme.HighContrast">
            <summary>
            High contrast theme for accessibility.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.VisualizationTheme.Professional">
            <summary>
            Professional theme suitable for business presentations.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.VisualizationTheme.Colorful">
            <summary>
            Colorful theme with vibrant colors for better visual distinction.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DotLayoutDirection">
            <summary>
            Enumeration of DOT layout directions.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DotLayoutDirection.TopToBottom">
            <summary>
            Top to bottom layout.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DotLayoutDirection.LeftToRight">
            <summary>
            Left to right layout.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DotLayoutDirection.BottomToTop">
            <summary>
            Bottom to top layout.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.DotLayoutDirection.RightToLeft">
            <summary>
            Right to left layout.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MermaidTheme">
            <summary>
            Enumeration of Mermaid themes.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MermaidTheme.Default">
            <summary>
            Default Mermaid theme.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MermaidTheme.Dark">
            <summary>
            Dark theme.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MermaidTheme.Forest">
            <summary>
            Forest theme with green colors.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MermaidTheme.Base">
            <summary>
            Base theme with neutral colors.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MermaidTheme.Neutral">
            <summary>
            Neutral theme.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MetricsExportFormat">
            <summary>
            Enumeration of metrics export formats.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MetricsExportFormat.Json">
            <summary>
            JSON format for API consumption.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MetricsExportFormat.Csv">
            <summary>
            CSV format for spreadsheet applications.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MetricsExportFormat.Prometheus">
            <summary>
            Prometheus format for monitoring systems.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MetricsExportFormat.Xml">
            <summary>
            XML format for legacy systems.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.MetricsExportFormat.Yaml">
            <summary>
            YAML format for configuration management.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HumanApprovalBatchManager">
            <summary>
            Batch manager for group human approvals.
            Collects, organizes, and processes multiple approval requests efficiently.
            </summary>
            <remarks>
            This manager provides:
            - Smart grouping: By type, priority, user, context
            - Configurable timeouts: For batch formation and processing
            - Partial approval: Option to process incomplete batches
            - Detailed statistics: Performance and usage metrics
            - Thread safety: Safe concurrent operations
            - Persistence: Option to persist batch state
            </remarks>
        </member>
        <member name="E:SemanticKernel.Graph.Core.HumanApprovalBatchManager.BatchFormed">
            <summary>
            Event raised when a batch is formed and ready for processing.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.HumanApprovalBatchManager.BatchCompleted">
            <summary>
            Event raised when a batch is completed.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.HumanApprovalBatchManager.RequestAddedToBatch">
            <summary>
            Event raised when a request is added to a batch.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.#ctor(SemanticKernel.Graph.Core.IHumanInteractionChannel,SemanticKernel.Graph.Core.BatchApprovalOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Core.HumanApprovalBatchManager"/>.
            </summary>
            <param name="defaultChannel">Default channel for processing batches</param>
            <param name="options">Configuration options for batches</param>
            <param name="logger">Optional logger</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatchManager.ActiveBatches">
            <summary>
            Currently active batches.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatchManager.PendingRequests">
            <summary>
            Pending requests waiting for grouping.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatchManager.Options">
            <summary>
            Batch configuration options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatchManager.Statistics">
            <summary>
            Batch manager statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.AddRequestToBatchAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest)">
            <summary>
            Adds a request for batch processing.
            </summary>
            <param name="request">Interruption request</param>
            <returns>Identifier of the batch it was added to</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.ProcessBatchAsync(System.String)">
            <summary>
            Processes a specific batch immediately.
            </summary>
            <param name="batchId">Batch identifier</param>
            <returns>Batch responses</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.CancelBatchAsync(System.String)">
            <summary>
            Cancels an active batch.
            </summary>
            <param name="batchId">Batch identifier</param>
            <returns>True if successfully cancelled</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.FlushAllBatchesAsync">
            <summary>
            Forces processing of all pending batches.
            </summary>
            <returns>Number of batches processed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.GetBatchInfo(System.String)">
            <summary>
            Gets detailed information about a batch.
            </summary>
            <param name="batchId">Batch identifier</param>
            <returns>Batch information</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.FindOrCreateBatchAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest)">
            <summary>
            Finds or creates an appropriate batch for the request.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.GenerateGroupingCriteria(SemanticKernel.Graph.Core.HumanInterruptionRequest)">
            <summary>
            Generates grouping criteria for a request.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.GetGroupingStrategy">
            <summary>
            Gets the configured grouping strategy label.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.IsBatchReadyForProcessing(SemanticKernel.Graph.Core.HumanApprovalBatch)">
            <summary>
            Checks whether a batch is ready for processing.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.ProcessBatchImmediatelyAsync(SemanticKernel.Graph.Core.HumanApprovalBatch)">
            <summary>
            Processes a batch immediately.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.ProcessBatchInternalAsync(SemanticKernel.Graph.Core.HumanApprovalBatch)">
            <summary>
            Processes a batch internally.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.ProcessBatchIndividuallyAsync(SemanticKernel.Graph.Core.HumanApprovalBatch,SemanticKernel.Graph.Core.IHumanInteractionChannel)">
            <summary>
            Processes a batch individually when the channel does not support batches.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.DetermineChannelForBatch(SemanticKernel.Graph.Core.HumanApprovalBatch)">
            <summary>
            Determines the appropriate channel for a batch.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.DetermineBatchStatus(System.Collections.Generic.List{SemanticKernel.Graph.Core.HumanInterruptionResponse},System.Boolean)">
            <summary>
            Determines the final batch status based on responses.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.ProcessBatchFormation(System.Object)">
            <summary>
            Timer callback for batch formation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.CleanupExpiredBatches(System.Object)">
            <summary>
            Timer callback for cleaning up expired batches.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.GetManagerStatistics">
            <summary>
            Gets statistics for the manager.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.ThrowIfDisposed">
            <summary>
            Throws if this instance has been disposed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatchManager.Dispose">
            <summary>
            Releases resources used by the manager.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.BatchRequestAddedEventArgs">
            <summary>
            Event arguments for when a request is added to a batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchRequestAddedEventArgs.Request">
            <summary>
            The request that was added.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchRequestAddedEventArgs.Batch">
            <summary>
            The batch the request was added to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchRequestAddedEventArgs.BatchSize">
            <summary>
            The current batch size.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.BatchCompletionEventArgs">
            <summary>
            Event arguments for when a batch is completed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchCompletionEventArgs.Batch">
            <summary>
            The processed batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchCompletionEventArgs.Responses">
            <summary>
            Responses obtained.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchCompletionEventArgs.ProcessingTime">
            <summary>
            Processing time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchCompletionEventArgs.Success">
            <summary>
            Indicates whether processing was successful.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.BatchInfo">
            <summary>
            Information about a batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.BatchId">
            <summary>
            Batch identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.RequestCount">
            <summary>
            Number of requests in the batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.GroupingCriteria">
            <summary>
            Grouping criteria used.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.Priority">
            <summary>
            Batch priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.Status">
            <summary>
            Current batch status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.CreatedAt">
            <summary>
            Creation timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.AllowPartialApproval">
            <summary>
            Allows partial approval.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.CompletedResponses">
            <summary>
            Number of completed responses.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchInfo.ElapsedTime">
            <summary>
            Elapsed time since creation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.BatchManagerStatistics">
            <summary>
            Batch manager statistics model.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchManagerStatistics.ActiveBatchCount">
            <summary>
            Number of active batches.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchManagerStatistics.PendingRequestCount">
            <summary>
            Number of pending requests.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchManagerStatistics.TotalBatchRequests">
            <summary>
            Total number of requests across all batches.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchManagerStatistics.AverageBatchSize">
            <summary>
            Average batch size.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchManagerStatistics.OldestBatchAge">
            <summary>
            Age of the oldest active batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchManagerStatistics.BatchesByPriority">
            <summary>
            Distribution of batches by priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchManagerStatistics.BatchesByStatus">
            <summary>
            Distribution of batches by status.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IHumanInteractionStore">
            <summary>
            Abstraction for persisting and coordinating Human-in-the-Loop requests and responses.
            Implementations must be thread-safe.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionStore.AddPendingAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest,System.Threading.CancellationToken)">
            <summary>
            Adds a new pending interruption request. Returns false if a request with the same id already exists.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionStore.GetRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a request by id, or null if not found.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionStore.ListPendingAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists pending requests optionally filtered by executionId and/or nodeId.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionStore.SubmitResponseAsync(SemanticKernel.Graph.Core.HumanInterruptionResponse,System.Threading.CancellationToken)">
            <summary>
            Submits a user response for the given request. Returns false if the request doesn't exist or was already resolved.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionStore.CancelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a pending request. Returns false if the request doesn't exist or was already resolved.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionStore.GetStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the current status of a request.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionStore.WaitForResponseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Awaits until a response is submitted or the token is cancelled. Throws if request doesn't exist.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.IHumanInteractionStore.ResponseSubmitted">
            <summary>
            Event raised when a response is submitted.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.IHumanInteractionStore.RequestAdded">
            <summary>
            Event raised when a new request is added to the pending store.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.IHumanInteractionStore.RequestCancelled">
            <summary>
            Event raised when a pending request is cancelled.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.InMemoryHumanInteractionStore">
            <summary>
            In-memory implementation of <see cref="T:SemanticKernel.Graph.Core.IHumanInteractionStore"/> suitable for single-process hosting and tests.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HumanInterruptionRequest">
            <summary>
            Data for a human-in-the-loop interruption request used for approvals and input during graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.RequestId">
            <summary>
            Unique identifier of the request.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.NodeId">
            <summary>
            Identifier of the node requesting the interruption.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.NodeName">
            <summary>
            Display name of the node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.ExecutionId">
            <summary>
            Graph execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.InterruptionType">
            <summary>
            Type of interruption requested.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.Priority">
            <summary>
            Request priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.Title">
            <summary>
            Request title for display.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.Message">
            <summary>
            Detailed message for the user.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.StateContext">
            <summary>
            Current graph state context.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.Options">
            <summary>
            Available options for the user to choose from.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.ConfidenceContext">
            <summary>
            Confidence/uncertainty data (if applicable).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.Timeout">
            <summary>
            Timeout settings for this request.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.PreferredChannel">
            <summary>
            Preferred interaction channel.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.ChannelData">
            <summary>
            Channel-specific data.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.CreatedAt">
            <summary>
            Timestamp when the request was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.LastModified">
            <summary>
            Timestamp of the last modification.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.Status">
            <summary>
            Current approval status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.ApprovedBy">
            <summary>
            Identifier of the user who approved.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.RespondedAt">
            <summary>
            Timestamp of the response.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.BatchId">
            <summary>
            Indicates whether this request is part of a batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionRequest.Metadata">
            <summary>
            Additional metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanInterruptionRequest.GetDisplaySummary">
            <summary>
            Creates a summarized context for display.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HumanInteractionOption">
            <summary>
            Option available for a human interaction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.OptionId">
            <summary>
            Unique identifier of the option.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.DisplayText">
            <summary>
            Display text for the option.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.Description">
            <summary>
            Detailed description of the option.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.Value">
            <summary>
            Value to return if this option is selected.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.IsDefault">
            <summary>
            Indicates whether this is the default option.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.AllowsCustomInput">
            <summary>
            Indicates whether this option allows custom user input.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.CustomInputType">
            <summary>
            Expected data type for custom input.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.CustomInputValidator">
            <summary>
            Validator for custom input.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionOption.Metadata">
            <summary>
            Additional metadata for the option.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HumanInterruptionResponse">
            <summary>
            Response to a human interruption request.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.RequestId">
            <summary>
            Identifier of the original request.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.Status">
            <summary>
            Approval status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.SelectedOptionId">
            <summary>
            Identifier of the selected option.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.CustomValue">
            <summary>
            Custom value provided by the user.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.Comments">
            <summary>
            User comments/justification.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.UserId">
            <summary>
            Identifier of the user who responded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.RespondedAt">
            <summary>
            Timestamp of the response.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.ResponseChannel">
            <summary>
            Channel used for the response.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.StateModifications">
            <summary>
            Modifications to the graph state (if applicable).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.ChannelData">
            <summary>
            Response channel-specific data.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.IsAutomatedResponse">
            <summary>
            Indicates whether the response was automated (timeout).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInterruptionResponse.AutomationReason">
            <summary>
            Reason for the automated response.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanInterruptionResponse.GetEffectiveValue">
            <summary>
            Gets the effective value to be used in the graph.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HumanApprovalContext">
            <summary>
            Human approval context for a specific node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalContext.GraphState">
            <summary>
            Current graph state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalContext.PreviousResult">
            <summary>
            Execution result of the previous node (if available).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalContext.ExecutionHistory">
            <summary>
            Execution history up to this point.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalContext.ProposedParameters">
            <summary>
            Proposed parameters for the next node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalContext.CandidateNextNodes">
            <summary>
            Candidate next nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalContext.PerformanceMetrics">
            <summary>
            Performance data up to this point.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalContext.RelevantLogs">
            <summary>
            Relevant logs for decision-making.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalContext.CreateContextualSummary">
            <summary>
            Creates a contextual summary for human display.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalContext.SerializeToJson">
            <summary>
            Serializes the context to JSON.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HumanApprovalBatch">
            <summary>
            Batch of approval requests for grouped processing.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.BatchId">
            <summary>
            Unique identifier of the batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.Requests">
            <summary>
            Requests included in the batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.GroupingCriteria">
            <summary>
            Grouping type used.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.BatchPriority">
            <summary>
            Consolidated batch priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.CreatedAt">
            <summary>
            Timestamp when the batch was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.BatchTimeout">
            <summary>
            Consolidated timeout configuration for the batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.Responses">
            <summary>
            Collected responses for the batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.BatchStatus">
            <summary>
            Overall batch status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.AllowPartialApproval">
            <summary>
            Allows partial approval.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanApprovalBatch.Metadata">
            <summary>
            Batch metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatch.IsComplete">
            <summary>
            Checks whether the batch is complete.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.HumanApprovalBatch.GetBatchStatistics">
            <summary>
            Gets batch statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.InterruptionType">
            <summary>
            Types of human-in-the-loop interruptions during graph execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InterruptionType.ManualApproval">
            <summary>
            Manual approval required to continue execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InterruptionType.ConfidenceGate">
            <summary>
            Pause triggered due to low confidence or system uncertainty.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InterruptionType.HumanInput">
            <summary>
            Human data entry is required.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InterruptionType.ResultValidation">
            <summary>
            Human validation of results before proceeding.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InterruptionType.HumanDecision">
            <summary>
            Human decision between multiple options.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InterruptionType.ConditionalPause">
            <summary>
            Conditional pause based on custom rules.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ApprovalStatus">
            <summary>
            Status of human approval.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ApprovalStatus.Pending">
            <summary>
            Waiting for human approval.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ApprovalStatus.Approved">
            <summary>
            Approved by the user.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ApprovalStatus.Rejected">
            <summary>
            Rejected by the user.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ApprovalStatus.TimedOut">
            <summary>
            Timed out — no response within the expected time window.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ApprovalStatus.Cancelled">
            <summary>
            Cancelled by the system or user.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ApprovalStatus.ModifiedAndApproved">
            <summary>
            Modified by the user — approved with changes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HumanInteractionChannelType">
            <summary>
            Types of communication channels for human interaction.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HumanInteractionChannelType.Console">
            <summary>
            Console/terminal interaction.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HumanInteractionChannelType.WebApi">
            <summary>
            Web API endpoints for human interaction.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HumanInteractionChannelType.CLI">
            <summary>
            Command-line interface.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HumanInteractionChannelType.Email">
            <summary>
            Email-based interaction.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HumanInteractionChannelType.Webhook">
            <summary>
            Webhook callback for external systems.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HumanInteractionChannelType.Custom">
            <summary>
            Custom implementation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.InteractionPriority">
            <summary>
            Priority of a human interaction request.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InteractionPriority.Low">
            <summary>
            Low priority — can wait longer.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InteractionPriority.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InteractionPriority.High">
            <summary>
            High priority — requires quick attention.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.InteractionPriority.Critical">
            <summary>
            Critical — requires immediate attention.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HumanInteractionTimeout">
            <summary>
            Timeout settings for human interactions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionTimeout.PrimaryTimeout">
            <summary>
            Primary timeout while waiting for human response.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionTimeout.WarningTimeout">
            <summary>
            Warning timeout — when to notify that time is running out.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionTimeout.ExtendedTimeout">
            <summary>
            Extended timeout for critical cases.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionTimeout.MaxRetries">
            <summary>
            Maximum number of re-notification attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionTimeout.RetryInterval">
            <summary>
            Interval between re-notification attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HumanInteractionTimeout.DefaultAction">
            <summary>
            Default action when a timeout occurs.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.TimeoutAction">
            <summary>
            Actions to take when a timeout occurs in a human interaction.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeoutAction.Reject">
            <summary>
            Automatically reject the request.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeoutAction.Approve">
            <summary>
            Automatically approve the request.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeoutAction.Cancel">
            <summary>
            Cancel the graph execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeoutAction.UseDefault">
            <summary>
            Use the configured default value.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeoutAction.Escalate">
            <summary>
            Escalate to another approver.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TimeoutAction.PauseIndefinitely">
            <summary>
            Pause indefinitely until manual intervention.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConfidenceContext">
            <summary>
            Confidence context for pauses based on uncertainty.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConfidenceContext.ConfidenceLevel">
            <summary>
            Current confidence level (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConfidenceContext.ConfidenceThreshold">
            <summary>
            Threshold below which a pause is triggered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConfidenceContext.ConfidenceSource">
            <summary>
            Source of the confidence measurement.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConfidenceContext.UncertaintyContext">
            <summary>
            Additional context about the uncertainty.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConfidenceContext.UncertaintyReasons">
            <summary>
            Specific reasons explaining the low confidence.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConfidenceContext.RequiresHumanApproval">
            <summary>
            Indicates whether the low confidence requires human approval.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.BatchApprovalOptions">
            <summary>
            Configuration options for batch approvals.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchApprovalOptions.MaxBatchSize">
            <summary>
            Maximum number of items per batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchApprovalOptions.BatchFormationTimeout">
            <summary>
            Maximum time to wait for items to form a batch.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchApprovalOptions.AllowPartialApproval">
            <summary>
            Allows partial approval of batches.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchApprovalOptions.GroupByInterruptionType">
            <summary>
            Groups items by interruption type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchApprovalOptions.GroupByPriority">
            <summary>
            Groups items by priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BatchApprovalOptions.BatchTimeout">
            <summary>
            Batch-specific timeout configuration.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IAgentConnection">
            <summary>
            Represents a reusable remote agent connection that can execute graph work on behalf of an agent.
            Implementations should be thread-safe for independent executions, or explicitly guard per-call usage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IAgentConnection.AgentId">
            <summary>
            Gets the logical agent identifier this connection belongs to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IAgentConnection.Executor">
            <summary>
            Gets an <see cref="T:SemanticKernel.Graph.Integration.IGraphExecutor"/> used to perform remote executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IAgentConnection.Endpoint">
            <summary>
            Optional human-readable endpoint or target metadata (host, region, etc.).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IAgentConnection.IsHealthyAsync(System.Threading.CancellationToken)">
            <summary>
            Optional health probe called by pools or monitors. Should be cheap and fast.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ICheckpointManager">
            <summary>
            Interface for managing graph execution checkpoints.
            Provides functionality for creating, restoring, and managing checkpoint lifecycle.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.CreateCheckpointAsync(System.String,SemanticKernel.Graph.State.GraphState,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Creates a checkpoint of the current graph state.
            </summary>
            <param name="executionId">Unique execution identifier</param>
            <param name="graphState">Current graph state to checkpoint</param>
            <param name="nodeId">ID of the node being executed when checkpoint was created</param>
            <param name="metadata">Additional metadata about the checkpoint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The created checkpoint</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.GetCheckpointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific checkpoint by its ID.
            </summary>
            <param name="checkpointId">Checkpoint identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The checkpoint if found, null otherwise</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.GetLatestCheckpointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the latest checkpoint for a specific execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The latest checkpoint if found, null otherwise</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.ListCheckpointsAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Lists all checkpoints for a specific execution, ordered by creation time.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="limit">Maximum number of checkpoints to return</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of checkpoints ordered by creation time descending</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.RestoreFromCheckpointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Restores graph state from a checkpoint.
            </summary>
            <param name="checkpointId">Checkpoint identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Restored graph state</returns>
            <exception cref="T:SemanticKernel.Graph.Core.CheckpointNotFoundException">Thrown when checkpoint is not found</exception>
            <exception cref="T:SemanticKernel.Graph.Core.CheckpointCorruptedException">Thrown when checkpoint data is corrupted</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.CleanupCheckpointsAsync(System.String,SemanticKernel.Graph.Core.CheckpointRetentionPolicy,System.Threading.CancellationToken)">
            <summary>
            Removes old checkpoints based on retention policy.
            </summary>
            <param name="executionId">Execution identifier, or null to clean all executions</param>
            <param name="retentionPolicy">Retention policy to apply</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of checkpoints removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.ValidateCheckpointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the integrity of a checkpoint.
            </summary>
            <param name="checkpointId">Checkpoint identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.BackupCheckpointsAsync(System.String,SemanticKernel.Graph.Core.CheckpointBackupOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a backup of critical checkpoints to distributed storage.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="backupOptions">Backup configuration options</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Backup operation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.GetRecoveryRecommendationAsync(System.String,SemanticKernel.Graph.Core.ExecutionFailureContext,System.Threading.CancellationToken)">
            <summary>
            Attempts to find the best checkpoint for recovery based on execution history and validation.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="failureContext">Context about the failure that occurred</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Recovery recommendation with suggested checkpoint</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ICheckpointManager.ValidateRestoredStateConsistencyAsync(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.RecoveryContext,System.Threading.CancellationToken)">
            <summary>
            Validates the consistency of a restored state after recovery.
            </summary>
            <param name="restoredState">The state that was restored</param>
            <param name="expectedContext">Expected execution context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Consistency validation result</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphCheckpoint">
            <summary>
            Represents a graph execution checkpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.CheckpointId">
            <summary>
            Gets the unique checkpoint identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.ExecutionId">
            <summary>
            Gets the execution identifier this checkpoint belongs to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.NodeId">
            <summary>
            Gets the node ID where this checkpoint was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.SequenceNumber">
            <summary>
            Gets the sequence number of this checkpoint within the execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.SerializedState">
            <summary>
            Gets the serialized graph state at the time of checkpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.CreatedAt">
            <summary>
            Gets the timestamp when this checkpoint was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.SizeInBytes">
            <summary>
            Gets the size of the checkpoint data in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.Checksum">
            <summary>
            Gets the checksum for data integrity validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.IsCompressed">
            <summary>
            Gets whether this checkpoint is compressed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.IsBackedUp">
            <summary>
            Gets whether this checkpoint is backed up to distributed storage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.Metadata">
            <summary>
            Gets additional metadata about this checkpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphCheckpoint.BackupLocations">
            <summary>
            Gets the backup locations if this checkpoint is backed up.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointRetentionPolicy">
            <summary>
            Configuration options for checkpoint retention policy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRetentionPolicy.MaxAge">
            <summary>
            Gets or sets the maximum age of checkpoints to keep.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRetentionPolicy.MaxCheckpointsPerExecution">
            <summary>
            Gets or sets the maximum number of checkpoints to keep per execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRetentionPolicy.MaxTotalStorageBytes">
            <summary>
            Gets or sets the maximum total storage size for all checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRetentionPolicy.KeepCriticalCheckpoints">
            <summary>
            Gets or sets whether to keep critical checkpoints regardless of age.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRetentionPolicy.CriticalCheckpointInterval">
            <summary>
            Gets or sets the interval between critical checkpoints.
            Critical checkpoints are preserved longer than regular ones.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointValidationResult">
            <summary>
            Result of checkpoint validation operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointValidationResult.IsValid">
            <summary>
            Gets whether the checkpoint is valid.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointValidationResult.ErrorMessage">
            <summary>
            Gets the validation error message if invalid.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointValidationResult.ValidationDetails">
            <summary>
            Gets additional validation details.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointValidationResult.IsCorrupted">
            <summary>
            Gets whether the checkpoint data is corrupted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointValidationResult.IsMissing">
            <summary>
            Gets whether the checkpoint is missing.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointBackupOptions">
            <summary>
            Options for checkpoint backup operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupOptions.BackupLocations">
            <summary>
            Gets or sets the backup storage locations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupOptions.CompressBackup">
            <summary>
            Gets or sets whether to compress checkpoints during backup.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupOptions.EncryptBackup">
            <summary>
            Gets or sets whether to encrypt backups.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupOptions.ReplicationFactor">
            <summary>
            Gets or sets the backup replication factor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupOptions.VerifyAfterBackup">
            <summary>
            Gets or sets whether to verify backup integrity after creation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointBackupResult">
            <summary>
            Result of checkpoint backup operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupResult.IsSuccessful">
            <summary>
            Gets whether the backup operation was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupResult.BackupLocations">
            <summary>
            Gets the backup locations where checkpoints were stored.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupResult.CheckpointCount">
            <summary>
            Gets the number of checkpoints backed up.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupResult.TotalSizeBytes">
            <summary>
            Gets the total size of backed up data in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupResult.Duration">
            <summary>
            Gets the backup duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointBackupResult.Errors">
            <summary>
            Gets any errors that occurred during backup.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointNotFoundException">
            <summary>
            Exception thrown when a checkpoint is not found.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of CheckpointNotFoundException.
            </summary>
            <param name="checkpointId">The checkpoint ID that was not found</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointNotFoundException.CheckpointId">
            <summary>
            Gets the checkpoint ID that was not found.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointCorruptedException">
            <summary>
            Exception thrown when a checkpoint is corrupted or invalid.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CheckpointCorruptedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of CheckpointCorruptedException.
            </summary>
            <param name="checkpointId">The corrupted checkpoint ID</param>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointCorruptedException.CheckpointId">
            <summary>
            Gets the corrupted checkpoint ID.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionFailureContext">
            <summary>
            Context information about an execution failure that requires recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionFailureContext.ExecutionId">
            <summary>
            Gets the execution identifier where the failure occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionFailureContext.FailedNodeId">
            <summary>
            Gets the node identifier where the failure occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionFailureContext.Exception">
            <summary>
            Gets the exception that caused the failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionFailureContext.FailureTimestamp">
            <summary>
            Gets the timestamp when the failure occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionFailureContext.FailureType">
            <summary>
            Gets the type of failure that occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionFailureContext.Metadata">
            <summary>
            Gets additional metadata about the failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionFailureContext.IsRecoverable">
            <summary>
            Gets whether this failure is considered recoverable.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ExecutionFailureContext.Severity">
            <summary>
            Gets the severity level of the failure.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.FailureType">
            <summary>
            Types of execution failures that can occur.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureType.Unknown">
            <summary>
            Unknown or unclassified failure.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureType.NodeExecutionFailure">
            <summary>
            Node execution threw an exception.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureType.GraphValidationFailure">
            <summary>
            Graph validation failed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureType.ResourceExhaustion">
            <summary>
            Resource exhaustion (memory, CPU, etc.).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureType.Timeout">
            <summary>
            Timeout during execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureType.CheckpointFailure">
            <summary>
            Checkpoint corruption or unavailability.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureType.DependencyFailure">
            <summary>
            External dependency failure.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureType.Cancellation">
            <summary>
            Cancellation requested.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.FailureSeverity">
            <summary>
            Severity levels for execution failures.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureSeverity.Low">
            <summary>
            Low severity - minor issues that may be safely ignored.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureSeverity.Medium">
            <summary>
            Medium severity - issues that should be addressed but don't prevent recovery.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureSeverity.High">
            <summary>
            High severity - critical issues that require immediate attention.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.FailureSeverity.Critical">
            <summary>
            Critical severity - system-threatening issues that may prevent recovery.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation">
            <summary>
            Recommendation for checkpoint recovery based on failure analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation.IsRecoveryRecommended">
            <summary>
            Gets whether recovery is recommended.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation.RecommendedCheckpoint">
            <summary>
            Gets the recommended checkpoint to recover from.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation.AlternativeCheckpoints">
            <summary>
            Gets alternative checkpoint options if the primary recommendation fails.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation.ConfidenceLevel">
            <summary>
            Gets the confidence level of the recovery recommendation (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation.Reason">
            <summary>
            Gets the reason for the recovery recommendation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation.RecoveryStrategies">
            <summary>
            Gets additional recovery strategy suggestions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation.EstimatedRecoveryTime">
            <summary>
            Gets the estimated time to recover using this recommendation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CheckpointRecoveryRecommendation.RiskLevel">
            <summary>
            Gets the risk level associated with this recovery approach.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryRisk">
            <summary>
            Risk levels for recovery operations.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryRisk.Low">
            <summary>
            Low risk - recovery is very likely to succeed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryRisk.Medium">
            <summary>
            Medium risk - recovery has a good chance of success.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryRisk.High">
            <summary>
            High risk - recovery may fail or cause additional issues.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.RecoveryRisk.Critical">
            <summary>
            Critical risk - recovery attempt may make the situation worse.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RecoveryContext">
            <summary>
            Context information for recovery validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryContext.ExecutionId">
            <summary>
            Gets the execution identifier being recovered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryContext.SourceCheckpoint">
            <summary>
            Gets the checkpoint that was used for recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryContext.ExpectedResumeNodeId">
            <summary>
            Gets the expected node where execution should resume.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryContext.ExpectedStateValues">
            <summary>
            Gets the expected state values at recovery point.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryContext.OriginalFailure">
            <summary>
            Gets the failure context that triggered the recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.RecoveryContext.RecoveryTimestamp">
            <summary>
            Gets the recovery timestamp.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConsistencyValidationResult">
            <summary>
            Result of consistency validation after state recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyValidationResult.IsConsistent">
            <summary>
            Gets whether the restored state is consistent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyValidationResult.ConsistencyScore">
            <summary>
            Gets the overall consistency score (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyValidationResult.Issues">
            <summary>
            Gets validation issues found during consistency check.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyValidationResult.ValidatedElements">
            <summary>
            Gets the validated state elements.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyValidationResult.Recommendations">
            <summary>
            Gets recommendations for fixing consistency issues.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyValidationResult.HasCriticalIssues">
            <summary>
            Gets whether the inconsistencies are considered critical.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyValidationResult.IsRecoverable">
            <summary>
            Gets whether the state can be safely used for recovery despite inconsistencies.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConsistencyIssue">
            <summary>
            Represents a consistency issue found during validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyIssue.ElementName">
            <summary>
            Gets the element or property that has the consistency issue.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyIssue.IssueType">
            <summary>
            Gets the type of consistency issue.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyIssue.Severity">
            <summary>
            Gets the severity of the issue.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyIssue.Description">
            <summary>
            Gets a description of the consistency issue.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyIssue.ExpectedValue">
            <summary>
            Gets the expected value for the element.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyIssue.ActualValue">
            <summary>
            Gets the actual value found in the restored state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConsistencyIssue.RemediationSuggestions">
            <summary>
            Gets suggested remediation actions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConsistencyIssueType">
            <summary>
            Types of consistency issues that can be detected.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConsistencyIssueType.MissingElement">
            <summary>
            Missing required state element.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConsistencyIssueType.InvalidValue">
            <summary>
            Invalid or corrupted state value.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConsistencyIssueType.VersionMismatch">
            <summary>
            State version mismatch.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConsistencyIssueType.BrokenReference">
            <summary>
            Referenced dependency no longer exists.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConsistencyIssueType.TypeMismatch">
            <summary>
            State element type mismatch.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConsistencyIssueType.ConstraintViolation">
            <summary>
            Constraint violation in state values.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConsistencyIssueType.TemporalInconsistency">
            <summary>
            Temporal inconsistency (outdated state).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ValidationElementResult">
            <summary>
            Result of validating a specific state element.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ValidationElementResult.IsValid">
            <summary>
            Gets whether the element passed validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ValidationElementResult.Confidence">
            <summary>
            Gets the confidence level of the validation (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ValidationElementResult.Details">
            <summary>
            Gets validation details or error messages.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ValidationElementResult.ValidatedValue">
            <summary>
            Gets the element value that was validated.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IGraphNode">
            <summary>
            Base contract for all graph nodes.
            Defines the essential structure and behavior that all nodes must implement.
            </summary>
            <remarks>
            Nodes are expected to be side-effect aware and operate on the shared <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>
            contained in the <see cref="T:SemanticKernel.Graph.State.GraphState"/>. Implementations should:
            <para>
            • Validate inputs in <see cref="M:SemanticKernel.Graph.Core.IGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)"/> and fail fast with actionable messages.
            </para>
            <para>
            • Use <see cref="M:SemanticKernel.Graph.Core.IGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)"/> and
            <see cref="M:SemanticKernel.Graph.Core.IGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)"/> for
            initialization/cleanup rather than constructors.
            </para>
            <para>
            • Honor <see cref="T:System.Threading.CancellationToken"/> for all async operations.
            </para>
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IGraphNode.NodeId">
            <summary>
            Gets the unique identifier for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IGraphNode.Name">
            <summary>
            Gets the human-readable name of this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IGraphNode.Description">
            <summary>
            Gets the description of what this node does.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IGraphNode.Metadata">
            <summary>
            Gets the metadata associated with this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IGraphNode.IsExecutable">
            <summary>
            Indicates whether this node can be executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IGraphNode.InputParameters">
            <summary>
            Gets the list of input parameter names this node expects.
            </summary>
            <remarks>
            This is a best-effort hint for wiring and validation. For typed contracts,
            prefer implementing a typed schema interface when available.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IGraphNode.OutputParameters">
            <summary>
            Gets the list of output parameter names this node produces.
            </summary>
            <remarks>
            Output names should be stable across versions to preserve graph compatibility.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes this node with the provided kernel and arguments.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments containing the graph state</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of the node execution</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when kernel or arguments are null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the node cannot be executed</exception>
            <remarks>
            Implementations should avoid throwing for expected domain errors and instead encode
            failures in the result when appropriate. Reserve exceptions for truly exceptional conditions.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Validates that this node can execute with the provided arguments.
            </summary>
            <param name="arguments">Arguments to validate</param>
            <returns>Validation result indicating if execution is possible</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments are null</exception>
            <remarks>
            Should perform lightweight checks only; do not mutate state.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets the next possible nodes to execute after this one.
            </summary>
            <param name="executionResult">Result of executing this node</param>
            <param name="graphState">Current graph state</param>
            <returns>Collection of possible next nodes</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when graphState is null</exception>
            <remarks>
            Implementations may use either <paramref name="executionResult"/> and/or
            <paramref name="graphState"/> to decide transitions. Return an empty collection
            to terminate execution when appropriate.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Determines if this node should be executed based on the current state.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>True if the node should execute</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when graphState is null</exception>
            <remarks>
            This method should be deterministic and side-effect free.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Called before the node is executed.
            Allows for setup and validation.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the setup operation</returns>
            <remarks>
            Perform only idempotent setup. Avoid expensive I/O here; prefer doing work in
            <see cref="M:SemanticKernel.Graph.Core.IGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after the node has been executed successfully.
            Allows for cleanup and post-processing.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments</param>
            <param name="result">Execution result</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the cleanup operation</returns>
            <remarks>
            Avoid throwing from this method. Prefer logging and compensating actions.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the node execution fails.
            Allows for error handling and recovery.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments</param>
            <param name="exception">Exception that occurred</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the error handling operation</returns>
            <remarks>
            Implementations may perform cleanup, emit telemetry, or request retries via shared state.
            Must not throw unless recovery cannot proceed.
            </remarks>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IHumanInteractionChannel">
            <summary>
            Interface for human communication channels during graph execution.
            Defines the contract for different interaction types (console, web, CLI, etc.).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IHumanInteractionChannel.ChannelType">
            <summary>
            Communication channel type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IHumanInteractionChannel.ChannelName">
            <summary>
            Identifier name of the channel.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IHumanInteractionChannel.IsAvailable">
            <summary>
            Indicates whether the channel is available for use.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IHumanInteractionChannel.SupportsBatchOperations">
            <summary>
            Indicates whether the channel supports batch interactions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IHumanInteractionChannel.ChannelConfiguration">
            <summary>
            Channel-specific configuration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionChannel.SendInterruptionRequestAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest,System.Threading.CancellationToken)">
            <summary>
            Sends an interruption request for human approval.
            </summary>
            <param name="request">Interruption request</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Human interaction response</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionChannel.SendBatchRequestAsync(SemanticKernel.Graph.Core.HumanApprovalBatch,System.Threading.CancellationToken)">
            <summary>
            Sends a batch of requests for approval.
            </summary>
            <param name="batch">Batch of requests</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Batch responses</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionChannel.CheckRequestStatusAsync(System.String)">
            <summary>
            Checks the status of a pending request.
            </summary>
            <param name="requestId">Request identifier</param>
            <returns>Current request status</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionChannel.CancelRequestAsync(System.String)">
            <summary>
            Cancels a pending request.
            </summary>
            <param name="requestId">Request identifier</param>
            <returns>True if successfully cancelled</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionChannel.InitializeAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes the communication channel.
            </summary>
            <param name="configuration">Channel-specific configuration</param>
            <returns>Initialization task</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHumanInteractionChannel.ShutdownAsync">
            <summary>
            Shuts down the communication channel and releases resources.
            </summary>
            <returns>Shutdown task</returns>
        </member>
        <member name="E:SemanticKernel.Graph.Core.IHumanInteractionChannel.ResponseReceived">
            <summary>
            Event raised when a response is received.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.IHumanInteractionChannel.RequestTimedOut">
            <summary>
            Event raised when a request times out.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IRealtimeHumanInteractionChannel">
            <summary>
            Extended interface for channels that support real-time notifications.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IRealtimeHumanInteractionChannel.SendProgressNotificationAsync(System.String,SemanticKernel.Graph.Core.ProgressNotification)">
            <summary>
            Sends a progress notification to the user.
            </summary>
            <param name="requestId">Related request identifier</param>
            <param name="progress">Progress information</param>
            <returns>Notification task</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IRealtimeHumanInteractionChannel.SendTimeoutWarningAsync(SemanticKernel.Graph.Core.HumanInterruptionRequest,System.TimeSpan)">
            <summary>
            Sends an imminent timeout warning.
            </summary>
            <param name="request">Request that is expiring</param>
            <param name="timeRemaining">Time remaining</param>
            <returns>Notification task</returns>
        </member>
        <member name="E:SemanticKernel.Graph.Core.IRealtimeHumanInteractionChannel.UserActivityDetected">
            <summary>
            Event raised when the user is typing/interacting.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IAuthenticatedHumanInteractionChannel">
            <summary>
            Interface for channels that support user authentication.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IAuthenticatedHumanInteractionChannel.AuthenticateUserAsync(SemanticKernel.Graph.Core.UserCredentials)">
            <summary>
            Authenticates a user for interaction.
            </summary>
            <param name="credentials">User credentials</param>
            <returns>Authentication token or user information</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IAuthenticatedHumanInteractionChannel.CanUserApproveAsync(System.String,SemanticKernel.Graph.Core.HumanInterruptionRequest)">
            <summary>
            Checks whether a user is allowed to approve a request.
            </summary>
            <param name="userId">User identifier</param>
            <param name="request">Request to be approved</param>
            <returns>True if the user is allowed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IAuthenticatedHumanInteractionChannel.GetAvailableApproversAsync">
            <summary>
            Gets information about available approvers.
            </summary>
            <returns>List of approver users</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ProgressNotification">
            <summary>
            Progress information for real-time notifications.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProgressNotification.Message">
            <summary>
            Progress message.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProgressNotification.ProgressPercentage">
            <summary>
            Progress percentage (0-100).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProgressNotification.Timestamp">
            <summary>
            Notification timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProgressNotification.Type">
            <summary>
            Progress type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ProgressNotification.AdditionalData">
            <summary>
            Additional progress data.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ProgressType">
            <summary>
            Progress types.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ProgressType.General">
            <summary>
            General progress.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ProgressType.Starting">
            <summary>
            Starting the process.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ProgressType.Processing">
            <summary>
            Processing data.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ProgressType.AwaitingInput">
            <summary>
            Awaiting input.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ProgressType.Validating">
            <summary>
            Validating result.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ProgressType.Completing">
            <summary>
            Completing.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ProgressType.Warning">
            <summary>
            Warning or error state.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.UserCredentials">
            <summary>
            User credentials for authentication.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.UserCredentials.UserId">
            <summary>
            User identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.UserCredentials.AuthenticationToken">
            <summary>
            Authentication token.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.UserCredentials.AuthenticationData">
            <summary>
            Channel-specific authentication data.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AuthenticationResult">
            <summary>
            Authentication result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AuthenticationResult.IsAuthenticated">
            <summary>
            Indicates whether authentication succeeded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AuthenticationResult.UserId">
            <summary>
            Authenticated user identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AuthenticationResult.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AuthenticationResult.Roles">
            <summary>
            User roles/permissions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AuthenticationResult.SessionToken">
            <summary>
            Session token.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AuthenticationResult.ExpiresAt">
            <summary>
            Expiration timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AuthenticationResult.ErrorMessage">
            <summary>
            Error message (if applicable).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ApproverInfo">
            <summary>
            Information about an available approver.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ApproverInfo.ApproverId">
            <summary>
            Approver identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ApproverInfo.ApproverName">
            <summary>
            Approver name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ApproverInfo.Email">
            <summary>
            Approver email.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ApproverInfo.Roles">
            <summary>
            Approver roles/permissions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ApproverInfo.IsAvailable">
            <summary>
            Indicates whether the approver is currently available.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ApproverInfo.Priority">
            <summary>
            Approver priority (higher number = higher priority).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ApproverInfo.PreferredChannels">
            <summary>
            Preferred communication channels.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ApproverInfo.CanApproveTypes">
            <summary>
            Request types the approver can approve.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.LoopControlOperation">
            <summary>
            Enumeration of loop control operations.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopControlOperation.None">
            <summary>No control operation requested.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopControlOperation.Break">
            <summary>Break out of the current loop iteration and exit the loop.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopControlOperation.Continue">
            <summary>Continue to the next iteration of the current loop.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopControlOperation.Return">
            <summary>Return from the loop with a specific value.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.LoopTerminationReason">
            <summary>
            Enumeration of loop termination reasons.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopTerminationReason.ConditionFalse">
            <summary>Loop completed normally (condition became false).</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopTerminationReason.BreakRequested">
            <summary>Loop was terminated by a break statement.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopTerminationReason.MaxIterationsReached">
            <summary>Loop reached maximum iteration limit.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopTerminationReason.Cancelled">
            <summary>Loop was cancelled due to cancellation token.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopTerminationReason.Error">
            <summary>Loop was terminated due to an error.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopTerminationReason.Timeout">
            <summary>Loop was terminated due to timeout.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopTerminationReason.MemoryLimitReached">
            <summary>Loop was terminated due to memory limit.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopTerminationReason.ExternalTermination">
            <summary>Loop was terminated by external request.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.LoopMonitoringLevel">
            <summary>
            Enumeration of loop performance monitoring levels.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopMonitoringLevel.None">
            <summary>No monitoring.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopMonitoringLevel.Basic">
            <summary>Basic monitoring (iteration count, execution time).</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopMonitoringLevel.Detailed">
            <summary>Detailed monitoring (per-iteration metrics, memory usage).</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.LoopMonitoringLevel.Comprehensive">
            <summary>Comprehensive monitoring (all metrics, profiling data).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.LoopControlManager">
            <summary>
            Manages loop control operations like break and continue across loop nodes.
            Provides centralized control flow management for loops with safety features.
            </summary>
            <remarks>
            This manager provides:
            - Break/continue control: Centralized management of loop control flow
            - Safety features: Prevents infinite loops and ensures proper cleanup
            - Performance monitoring: Tracks loop execution metrics
            - Thread safety: All operations are thread-safe for concurrent execution
            - State management: Proper state handling during loop control operations
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlManager.Instance">
            <summary>
            Gets the singleton instance of LoopControlManager.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.#ctor">
            <summary>
            Private constructor to enforce singleton pattern.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.RequestBreak(System.String,System.String)">
            <summary>
            Requests a break operation for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node to break from</param>
            <param name="reason">Optional reason for the break</param>
            <returns>True if the break request was successfully registered</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.RequestContinue(System.String,System.String)">
            <summary>
            Requests a continue operation for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node to continue</param>
            <param name="reason">Optional reason for the continue</param>
            <returns>True if the continue request was successfully registered</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.IsBreakRequested(System.String)">
            <summary>
            Checks if a break is requested for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node to check</param>
            <returns>True if a break is requested</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.IsContinueRequested(System.String)">
            <summary>
            Checks if a continue is requested for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node to check</param>
            <returns>True if a continue is requested</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.ClearLoopState(System.String)">
            <summary>
            Clears the break/continue state for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node to clear</param>
            <returns>True if the state was cleared</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetLoopState(System.String)">
            <summary>
            Gets the control state for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node</param>
            <returns>The loop control state, or null if not found</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetAllLoopStates">
            <summary>
            Gets all active loop states.
            </summary>
            <returns>Collection of all active loop states</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.ClearAllLoopStates">
            <summary>
            Clears all loop states.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.RequestReturn(System.String,System.Object,System.String)">
            <summary>
            Requests a return operation for a specific loop with a value.
            </summary>
            <param name="loopNodeId">ID of the loop node to return from</param>
            <param name="returnValue">Value to return from the loop</param>
            <param name="reason">Optional reason for the return</param>
            <returns>True if the return request was successfully registered</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.IsReturnRequested(System.String)">
            <summary>
            Checks if a return is requested for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node to check</param>
            <returns>True if a return is requested</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetReturnValue(System.String)">
            <summary>
            Gets the return value for a specific loop if return was requested.
            </summary>
            <param name="loopNodeId">ID of the loop node to check</param>
            <returns>The return value or null if no return was requested</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.CreateAdvancedLoopState(System.String,SemanticKernel.Graph.Core.LoopMonitoringLevel,System.Nullable{System.TimeSpan},System.Nullable{System.Int64})">
            <summary>
            Creates a loop state with advanced monitoring and safety features.
            </summary>
            <param name="loopNodeId">ID of the loop node</param>
            <param name="monitoringLevel">Level of performance monitoring</param>
            <param name="maxExecutionTime">Maximum execution time before timeout</param>
            <param name="maxMemoryUsage">Maximum memory usage before termination</param>
            <returns>True if the loop state was created successfully</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.ShouldTerminateLoop(System.String)">
            <summary>
            Checks if a loop should be terminated based on safety constraints.
            </summary>
            <param name="loopNodeId">ID of the loop node to check</param>
            <returns>True if the loop should be terminated</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetTerminationReason(System.String)">
            <summary>
            Gets the termination reason for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node to check</param>
            <returns>The termination reason</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetPerformanceMetrics(System.String)">
            <summary>
            Gets performance metrics for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node</param>
            <returns>Performance metrics or null if not available</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.UpdateLoopMemoryUsage(System.String,System.Int64)">
            <summary>
            Updates memory usage for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node</param>
            <param name="memoryUsage">Current memory usage in bytes</param>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetLoopStateInfo(System.String)">
            <summary>
            Gets detailed state information for a specific loop.
            </summary>
            <param name="loopNodeId">ID of the loop node</param>
            <returns>Dictionary containing detailed state information</returns>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetMetadata">
            <summary>
            Gets metadata about the loop control manager.
            </summary>
            <returns>Dictionary containing metadata</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetOrCreateLoopState(System.String)">
            <summary>
            Gets or creates a loop state for the specified loop node with basic monitoring.
            </summary>
            <param name="loopNodeId">ID of the loop node</param>
            <returns>The loop control state</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.GetOrCreateLoopState(System.String,SemanticKernel.Graph.Core.LoopMonitoringLevel,System.Nullable{System.TimeSpan},System.Nullable{System.Int64})">
            <summary>
            Gets or creates a loop state for the specified loop node with advanced configuration.
            </summary>
            <param name="loopNodeId">ID of the loop node</param>
            <param name="monitoringLevel">Level of performance monitoring</param>
            <param name="maxExecutionTime">Maximum execution time before timeout</param>
            <param name="maxMemoryUsage">Maximum memory usage before termination</param>
            <returns>The loop control state</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlManager.InitializeMetadata">
            <summary>
            Initializes metadata for this manager.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.LoopControlState">
            <summary>
            Represents the enhanced control state for a specific loop with advanced safety features.
            Provides comprehensive loop control with timeout, memory monitoring, and nested loop support.
            </summary>
            <remarks>
            This class provides:
            - Enhanced control operations: Break, continue, return with typed reasons
            - Nested loop support: Support for labeled breaks and continues
            - Safety features: Timeout monitoring, memory usage tracking
            - Performance metrics: Integration with LoopPerformanceMetrics
            - Thread safety: All operations are thread-safe for concurrent access
            - State persistence: Detailed state tracking for debugging and recovery
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.#ctor(System.String,SemanticKernel.Graph.Core.LoopMonitoringLevel,System.Nullable{System.TimeSpan},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of LoopControlState.
            </summary>
            <param name="loopNodeId">ID of the loop node</param>
            <param name="monitoringLevel">Level of performance monitoring to enable</param>
            <param name="maxExecutionTime">Maximum execution time before timeout (optional)</param>
            <param name="maxMemoryUsage">Maximum memory usage in bytes before termination (optional)</param>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.LoopNodeId">
            <summary>
            Gets the ID of the loop node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.MonitoringLevel">
            <summary>
            Gets the monitoring level for this loop state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.MaxExecutionTime">
            <summary>
            Gets the maximum execution time before timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.MaxMemoryUsage">
            <summary>
            Gets the maximum memory usage in bytes before termination.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.CurrentOperation">
            <summary>
            Gets the current loop control operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.TerminationReason">
            <summary>
            Gets the termination reason for this loop.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.IsBreakRequested">
            <summary>
            Gets whether a break is requested.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.IsContinueRequested">
            <summary>
            Gets whether a continue is requested.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.IsReturnRequested">
            <summary>
            Gets whether a return is requested.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.OperationReason">
            <summary>
            Gets the reason for the last control operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.ReturnValue">
            <summary>
            Gets the return value if return was requested.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.CreatedAt">
            <summary>
            Gets the timestamp when this state was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.LastModified">
            <summary>
            Gets the timestamp when this state was last modified.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.BreakRequestCount">
            <summary>
            Gets the number of break requests made.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.ContinueRequestCount">
            <summary>
            Gets the number of continue requests made.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.ReturnRequestCount">
            <summary>
            Gets the number of return requests made.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.PerformanceMetrics">
            <summary>
            Gets the performance metrics for this loop (if monitoring is enabled).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.HasTimedOut">
            <summary>
            Gets whether the loop has timed out.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopControlState.HasExceededMemoryLimit">
            <summary>
            Gets whether the loop has exceeded memory limits.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.RequestBreak(System.String,System.String)">
            <summary>
            Requests a break operation.
            </summary>
            <param name="reason">Optional reason for the break</param>
            <param name="targetLoop">Optional target loop for labeled break (for nested loops)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.RequestContinue(System.String,System.String)">
            <summary>
            Requests a continue operation.
            </summary>
            <param name="reason">Optional reason for the continue</param>
            <param name="targetLoop">Optional target loop for labeled continue (for nested loops)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.RequestReturn(System.Object,System.String)">
            <summary>
            Requests a return operation with an optional value.
            </summary>
            <param name="returnValue">Value to return from the loop</param>
            <param name="reason">Optional reason for the return</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.SetTerminationReason(SemanticKernel.Graph.Core.LoopTerminationReason)">
            <summary>
            Sets the termination reason for this loop.
            </summary>
            <param name="reason">Reason for termination</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.ShouldTerminate">
            <summary>
            Checks if the loop should be terminated based on safety constraints.
            </summary>
            <returns>True if the loop should be terminated</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.StartIteration(System.Int32)">
            <summary>
            Starts a new iteration and returns metrics tracker.
            </summary>
            <param name="iterationNumber">The iteration number</param>
            <returns>Iteration metrics tracker or null if monitoring is disabled</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.CompleteIteration(SemanticKernel.Graph.Core.IterationMetrics,System.Boolean,System.Exception)">
            <summary>
            Completes an iteration with the specified metrics.
            </summary>
            <param name="iteration">Iteration metrics to complete</param>
            <param name="success">Whether the iteration was successful</param>
            <param name="error">Optional error that occurred</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.UpdateMemoryUsage(System.Int64)">
            <summary>
            Updates the current memory usage.
            </summary>
            <param name="memoryUsage">Current memory usage in bytes</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.Clear">
            <summary>
            Clears the current control state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.GetStateInfo">
            <summary>
            Gets detailed state information including performance metrics.
            </summary>
            <returns>Dictionary containing state information</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.ToString">
            <summary>
            Gets a string representation of the current state.
            </summary>
            <returns>String representation of the state</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopControlState.InitializeMetadata">
            <summary>
            Initializes metadata for this loop state.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.LoopPerformanceMetrics">
            <summary>
            Comprehensive performance metrics for loop execution.
            Tracks detailed statistics about loop performance, resource usage, and execution patterns.
            </summary>
            <remarks>
            This class provides:
            - Iteration-level metrics: Individual iteration timing and resource usage
            - Aggregate metrics: Total execution time, average performance, throughput
            - Resource monitoring: Memory usage, CPU utilization estimates
            - Safety metrics: Infinite loop detection patterns, performance degradation
            - Historical tracking: Performance trends and patterns over time
            - Thread safety: All operations are thread-safe for concurrent access
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.#ctor(System.String,SemanticKernel.Graph.Core.LoopMonitoringLevel)">
            <summary>
            Initializes a new instance of LoopPerformanceMetrics.
            </summary>
            <param name="loopNodeId">ID of the loop node these metrics belong to</param>
            <param name="monitoringLevel">Level of monitoring detail to capture</param>
            <exception cref="T:System.ArgumentException">Thrown when loopNodeId is null or whitespace</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.LoopNodeId">
            <summary>
            Gets the ID of the loop node these metrics belong to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.MonitoringLevel">
            <summary>
            Gets the monitoring level for these metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.TotalIterations">
            <summary>
            Gets the total number of iterations executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.TotalExecutionTime">
            <summary>
            Gets the total execution time across all iterations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.AverageIterationTime">
            <summary>
            Gets the average execution time per iteration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.IterationsPerSecond">
            <summary>
            Gets the throughput in iterations per second.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.CurrentMemoryUsage">
            <summary>
            Gets the current memory usage in bytes (if monitoring level supports it).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.PeakMemoryUsage">
            <summary>
            Gets the peak memory usage in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.StartTime">
            <summary>
            Gets the time when metrics collection started.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.LoopPerformanceMetrics.LastUpdateTime">
            <summary>
            Gets the time when the loop was last updated.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.StartIteration(System.Int32)">
            <summary>
            Records the start of a new iteration.
            </summary>
            <param name="iterationNumber">The iteration number (0-based)</param>
            <returns>Iteration metrics object for tracking this iteration</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.CompleteIteration(SemanticKernel.Graph.Core.IterationMetrics,System.Boolean,System.Exception)">
            <summary>
            Records the completion of an iteration.
            </summary>
            <param name="iteration">The iteration metrics to complete</param>
            <param name="success">Whether the iteration completed successfully</param>
            <param name="error">Optional error that occurred during iteration</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.RecordTermination(SemanticKernel.Graph.Core.LoopTerminationReason,System.Int32)">
            <summary>
            Records loop termination with the specified reason.
            </summary>
            <param name="reason">Reason for loop termination</param>
            <param name="finalIterationCount">Final number of iterations completed</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.UpdateMemoryUsage(System.Int64)">
            <summary>
            Updates memory usage statistics.
            </summary>
            <param name="currentMemoryUsage">Current memory usage in bytes</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.DetectInfiniteLoopPattern">
            <summary>
            Detects potential infinite loop patterns based on metrics.
            </summary>
            <returns>True if infinite loop patterns are detected</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.GetPerformanceSummary">
            <summary>
            Gets performance summary for the loop.
            </summary>
            <returns>Dictionary containing key performance metrics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.GetIterationHistory">
            <summary>
            Gets detailed iteration history (if monitoring level supports it).
            </summary>
            <returns>List of iteration metrics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.InitializeMetrics">
            <summary>
            Initializes default metric values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LoopPerformanceMetrics.UpdateAggregateMetrics(SemanticKernel.Graph.Core.IterationMetrics)">
            <summary>
            Updates aggregate metrics based on completed iteration.
            </summary>
            <param name="iteration">Completed iteration metrics</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IterationMetrics">
            <summary>
            Metrics for a single loop iteration.
            Captures detailed performance and resource usage data for one iteration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IterationMetrics.#ctor(System.Int32,System.String,SemanticKernel.Graph.Core.LoopMonitoringLevel)">
            <summary>
            Initializes a new instance of IterationMetrics.
            </summary>
            <param name="iterationNumber">The iteration number (0-based)</param>
            <param name="loopNodeId">ID of the loop node</param>
            <param name="monitoringLevel">Level of monitoring detail</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.IterationNumber">
            <summary>
            Gets the iteration number (0-based).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.LoopNodeId">
            <summary>
            Gets the ID of the loop node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.MonitoringLevel">
            <summary>
            Gets the monitoring level for this iteration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.StartTime">
            <summary>
            Gets the start time of this iteration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.EndTime">
            <summary>
            Gets the end time of this iteration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.ExecutionTime">
            <summary>
            Gets the execution time for this iteration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.Success">
            <summary>
            Gets whether this iteration completed successfully.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.Error">
            <summary>
            Gets the error that occurred during this iteration (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.MemoryUsage">
            <summary>
            Gets the memory usage at the end of this iteration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IterationMetrics.IsCompleted">
            <summary>
            Gets whether this iteration has completed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IterationMetrics.Complete(System.Boolean,System.Exception)">
            <summary>
            Marks this iteration as completed.
            </summary>
            <param name="success">Whether the iteration completed successfully</param>
            <param name="error">Optional error that occurred</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MachineLearningOptimizer">
            <summary>
            Machine Learning system for automatic graph optimization.
            Uses simple and effective learning algorithms to optimize configurations based on history.
            </summary>
            <remarks>
            This system implements:
            - Simple linear regression for performance prediction
            - Basic K-means clustering to group execution patterns
            - Correlation analysis to identify performance factors
            - Similarity-based recommendation system
            - Incremental learning to improve predictions over time
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.#ctor(SemanticKernel.Graph.Core.MLOptimizerOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes the Machine Learning optimizer.
            </summary>
            <param name="options">ML optimizer settings</param>
            <param name="logger">Optional logger</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.TrainModelsAsync(System.Collections.Generic.List{SemanticKernel.Graph.Core.GraphPerformanceHistory})">
            <summary>
            Trains models based on execution history.
            </summary>
            <param name="performanceHistory">Performance history</param>
            <returns>Training result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.PredictPerformanceAsync(SemanticKernel.Graph.Core.GraphConfiguration)">
            <summary>
            Predicts performance based on graph configuration.
            </summary>
            <param name="graphConfiguration">Graph configuration</param>
            <returns>Performance prediction</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.DetectAnomaliesAsync(SemanticKernel.Graph.Core.GraphExecutionMetrics)">
            <summary>
            Detects anomalies in execution metrics.
            </summary>
            <param name="executionMetrics">Execution metrics</param>
            <returns>Anomaly detection result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.GenerateIntelligentRecommendationsAsync(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Generates optimization recommendations based on learned history.
            </summary>
            <param name="currentState">Current graph state</param>
            <returns>List of intelligent recommendations</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.UpdateModelWithExperienceAsync(SemanticKernel.Graph.Core.GraphExecutionResult,System.Collections.Generic.List{SemanticKernel.Graph.Core.OptimizationRecommendation})">
            <summary>
            Updates models with new execution experience.
            </summary>
            <param name="executionResult">Execution result</param>
            <param name="appliedOptimizations">Optimizations that were applied</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.ExportModelState">
            <summary>
            Exports current ML model state.
            </summary>
            <returns>Model state as JSON</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.ConvertToTrainingData(System.Collections.Generic.List{SemanticKernel.Graph.Core.GraphPerformanceHistory})">
            <summary>
            Converts performance history into training data points.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.TrainLatencyPredictionModelAsync(System.Collections.Generic.List{SemanticKernel.Graph.Core.TrainingDataPoint})">
            <summary>
            Trains a latency prediction model using simple linear regression.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.TrainAnomalyDetectionModelAsync(System.Collections.Generic.List{SemanticKernel.Graph.Core.TrainingDataPoint})">
            <summary>
            Trains an anomaly detection model using Z-score.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.TrainOptimizationRecommendationModelAsync(System.Collections.Generic.List{SemanticKernel.Graph.Core.TrainingDataPoint})">
            <summary>
            Trains a recommendation model using simple clustering.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.ExtractFeatures(SemanticKernel.Graph.Core.GraphConfiguration)">
            <summary>
            Extracts features from a graph configuration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.ExtractMetricFeatures(SemanticKernel.Graph.Core.GraphExecutionMetrics)">
            <summary>
            Extracts features from execution metrics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.ExtractStateFeatures(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Extracts features from graph state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.GenerateRecommendationsAsync(System.Double[])">
            <summary>
            Generates recommendations based on features.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.AnalyzePossibleCausesAsync(SemanticKernel.Graph.Core.GraphExecutionMetrics)">
            <summary>
            Analyzes possible causes of anomalies.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.ConvertPredictionToRecommendationsAsync(SemanticKernel.Graph.Core.MLPrediction,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Converts ML prediction into concrete recommendations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.GroupSimilarConfigurations(System.Collections.Generic.List{SemanticKernel.Graph.Core.TrainingDataPoint})">
            <summary>
            Groups similar configurations for clustering.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.IncrementalUpdateAsync(SemanticKernel.Graph.Core.TrainingDataPoint)">
            <summary>
            Incremental update of models.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.PeriodicRetraining(System.Object)">
            <summary>
            Periodic retraining of models.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MachineLearningOptimizer.Dispose">
            <summary>
            Disposes resources used by the ML optimizer.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MLOptimizerOptions">
            <summary>
            ML optimizer settings.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLOptimizerOptions.RetrainingInterval">
            <summary>Retraining interval.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLOptimizerOptions.MaxTrainingDataSize">
            <summary>Maximum training data size.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLOptimizerOptions.AnomalyThreshold">
            <summary>Threshold for anomaly detection.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLOptimizerOptions.EnableIncrementalLearning">
            <summary>Enable incremental learning.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLOptimizerOptions.MinimumDataForRetraining">
            <summary>Minimum data for retraining.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.TrainingDataPoint">
            <summary>
            Training data point.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TrainingDataPoint.Timestamp">
            <summary>Timestamp of the data point.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TrainingDataPoint.GraphConfiguration">
            <summary>Graph configuration.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TrainingDataPoint.ActualLatency">
            <summary>Observed actual latency.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TrainingDataPoint.ActualThroughput">
            <summary>Observed actual throughput.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TrainingDataPoint.ActualSuccessRate">
            <summary>Actual success rate.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TrainingDataPoint.NodeCount">
            <summary>Number of nodes in the graph.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TrainingDataPoint.PathComplexity">
            <summary>Average path complexity.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TrainingDataPoint.AppliedOptimizations">
            <summary>Applied optimizations.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphConfiguration">
            <summary>
            Graph configuration for ML.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConfiguration.NodeCount">
            <summary>Number of nodes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConfiguration.AveragePathLength">
            <summary>Average path length.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConfiguration.ConditionalNodeCount">
            <summary>Number of conditional nodes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConfiguration.LoopNodeCount">
            <summary>Number of loop nodes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphConfiguration.ParallelNodeCount">
            <summary>Number of parallel nodes.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphExecutionMetrics">
            <summary>
            Execution metrics for ML.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionMetrics.TotalExecutionTime">
            <summary>Total execution time.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionMetrics.CpuUsage">
            <summary>CPU usage.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionMetrics.MemoryUsage">
            <summary>Memory usage.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionMetrics.ErrorRate">
            <summary>Error rate.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionMetrics.ThroughputPerSecond">
            <summary>Throughput per second.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphPerformanceHistory">
            <summary>
            Performance history for training.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceHistory.Timestamp">
            <summary>Timestamp of the record.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceHistory.GraphConfiguration">
            <summary>Graph configuration.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceHistory.AverageLatency">
            <summary>Observed average latency.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceHistory.Throughput">
            <summary>Observed throughput.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceHistory.SuccessRate">
            <summary>Success rate.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphPerformanceHistory.AppliedOptimizations">
            <summary>Applied optimizations.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphExecutionResult">
            <summary>
            Execution result for feedback.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionResult.GraphConfiguration">
            <summary>Configuration of the executed graph.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionResult.TotalExecutionTime">
            <summary>Total execution time.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionResult.Throughput">
            <summary>Achieved throughput.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphExecutionResult.SuccessRate">
            <summary>Success rate.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MLTrainingResult">
            <summary>
            ML training result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLTrainingResult.Success">
            <summary>Indicates whether training succeeded.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLTrainingResult.TrainingTime">
            <summary>Time spent on training.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLTrainingResult.DataPointsUsed">
            <summary>Number of data points used.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLTrainingResult.ModelsUpdated">
            <summary>Updated models.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLTrainingResult.ErrorMessage">
            <summary>Error message, if any.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PerformancePrediction">
            <summary>
            Performance prediction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PerformancePrediction.PredictedLatency">
            <summary>Predicted latency.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PerformancePrediction.Confidence">
            <summary>Prediction confidence.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PerformancePrediction.RecommendedOptimizations">
            <summary>Recommended optimizations.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AnomalyDetectionResult">
            <summary>
            Anomaly detection result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AnomalyDetectionResult.IsAnomaly">
            <summary>Indicates whether this is an anomaly.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AnomalyDetectionResult.Confidence">
            <summary>Detection confidence.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AnomalyDetectionResult.AnomalyScore">
            <summary>Anomaly score.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AnomalyDetectionResult.PossibleCauses">
            <summary>Possible causes of the anomaly.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IntelligentOptimizationRecommendation">
            <summary>
            Intelligent optimization recommendation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntelligentOptimizationRecommendation.Type">
            <summary>Type of optimization.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntelligentOptimizationRecommendation.Confidence">
            <summary>Recommendation confidence.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntelligentOptimizationRecommendation.Description">
            <summary>Description of the recommendation.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntelligentOptimizationRecommendation.RecommendedActions">
            <summary>Recommended actions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IntelligentOptimizationRecommendation.ExpectedImpact">
            <summary>Expected impact.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MLModel">
            <summary>
            Base class for ML models.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLModel.LastTraining">
            <summary>Timestamp of the last training.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLModel.Accuracy">
            <summary>Model accuracy.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MLModel.PredictAsync(System.Double[])">
            <summary>Makes a prediction based on features.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MLModel.UpdateIncrementallyAsync(SemanticKernel.Graph.Core.TrainingDataPoint)">
            <summary>Updates the model incrementally.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MLModel.Dispose">
            <summary>Disposes resources.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MLPrediction">
            <summary>
            Prediction from an ML model.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLPrediction.Value">
            <summary>Predicted value.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MLPrediction.Confidence">
            <summary>Prediction confidence.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.LinearRegressionModel">
            <summary>
            Simple linear regression model.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.LinearRegressionModel.TrainAsync(System.Double[][],System.Double[])">
            <summary>
            Trains the model with data.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AnomalyDetectionModel">
            <summary>
            Z-score based anomaly detection model.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AnomalyDetectionModel.TrainAsync(System.Double,System.Double,System.Double)">
            <summary>
            Trains the model with statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.OptimizationRecommendationModel">
            <summary>
            Optimization recommendation model.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.OptimizationRecommendationModel.TrainAsync(System.Collections.Generic.List{SemanticKernel.Graph.Core.ConfigurationCluster})">
            <summary>
            Trains with configuration clusters.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConfigurationCluster">
            <summary>
            Cluster of similar configurations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConfigurationCluster.Id">
            <summary>Cluster ID.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ConfigurationCluster.DataPoints">
            <summary>Data points in the cluster.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MetricsDashboard">
            <summary>
            Basic dashboard for visualizing graph performance metrics in real-time.
            Provides formatted reports and monitoring capabilities for development and production.
            </summary>
            <remarks>
            This dashboard generates text-based reports suitable for console output, logging,
            or basic monitoring interfaces. For advanced visualization, integrate with
            external dashboarding solutions using the provided metrics APIs.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MetricsDashboard.#ctor(SemanticKernel.Graph.Core.GraphPerformanceMetrics,SemanticKernel.Graph.Core.ErrorMetricsCollector,SemanticKernel.Graph.Integration.IGraphLogger,SemanticKernel.Graph.Core.DashboardOptions)">
            <summary>
            Initializes a new instance of MetricsDashboard.
            </summary>
            <param name="performanceMetrics">Performance metrics collector</param>
            <param name="errorMetrics">Error metrics collector (optional)</param>
            <param name="logger">Logger for dashboard operations (optional)</param>
            <param name="options">Dashboard configuration options (optional)</param>
            <exception cref="T:System.ArgumentNullException">Thrown when performanceMetrics is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MetricsDashboard.GenerateDashboard(System.Nullable{System.TimeSpan},System.Boolean,System.Boolean)">
            <summary>
            Generates a comprehensive metrics dashboard report.
            </summary>
            <param name="timeWindow">Time window for metrics analysis (default: last 1 hour)</param>
            <param name="includeNodeDetails">Whether to include detailed node metrics</param>
            <param name="includePathAnalysis">Whether to include execution path analysis</param>
            <returns>Formatted dashboard report</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MetricsDashboard.GenerateStatusOverview(System.Nullable{System.TimeSpan})">
            <summary>
            Generates a compact status overview suitable for monitoring.
            </summary>
            <param name="timeWindow">Time window for analysis</param>
            <returns>Compact status report</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MetricsDashboard.GenerateRealTimeMetrics">
            <summary>
            Generates real-time metrics suitable for periodic display.
            </summary>
            <returns>Real-time metrics report</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DashboardOptions">
            <summary>
            Configuration options for the metrics dashboard.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DashboardOptions.MaxNodesToShow">
            <summary>
            Gets or sets the maximum number of nodes to show in detailed view.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DashboardOptions.MaxPathsToShow">
            <summary>
            Gets or sets the maximum number of execution paths to show.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DashboardOptions.UseVisualEnhancements">
            <summary>
            Gets or sets whether to use colors/emojis in the output.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DashboardOptions.RefreshInterval">
            <summary>
            Gets or sets the refresh interval for real-time metrics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DashboardStringExtensions">
            <summary>
            Extension methods for string manipulation in dashboard generation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.DashboardStringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates a string to the specified length with ellipsis.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MultiAgentCoordinator">
            <summary>
            Coordinates multiple graph executor instances to enable multi-agent execution.
            Provides agent lifecycle management, shared state coordination, and result aggregation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.#ctor(SemanticKernel.Graph.Core.MultiAgentOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of MultiAgentCoordinator.
            </summary>
            <param name="options">Multi-agent configuration options</param>
            <param name="logger">Optional logger for coordination operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentCoordinator.ActiveAgentCount">
            <summary>
            Gets the number of currently active agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentCoordinator.TotalAgentCount">
            <summary>
            Gets the total number of registered agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentCoordinator.Options">
            <summary>
            Gets the multi-agent configuration options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentCoordinator.SharedStateManager">
            <summary>
            Gets the shared state manager.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentCoordinator.WorkDistributor">
            <summary>
            Gets the work distributor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentCoordinator.ResultAggregator">
            <summary>
            Gets the result aggregator.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentCoordinator.HealthMonitor">
            <summary>
            Gets the health monitor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentCoordinator.AgentConnectionPool">
            <summary>
            Gets the agent connection pool used for remote agent reuse.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.RegisterAgentAsync(System.String,SemanticKernel.Graph.Integration.IGraphExecutor,SemanticKernel.Graph.Core.AgentRole,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Registers a new agent instance with the coordinator.
            </summary>
            <param name="agentId">Unique identifier for the agent</param>
            <param name="executor">Graph executor instance</param>
            <param name="role">Agent role specification</param>
            <param name="initialState">Initial state for the agent</param>
            <returns>Task representing the registration operation</returns>
            <exception cref="T:System.ArgumentException">Thrown when agentId is invalid</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when executor or role are null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when maximum agents exceeded</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.UnregisterAgentAsync(System.String,System.Boolean)">
            <summary>
            Unregisters an agent from the coordinator.
            </summary>
            <param name="agentId">Agent identifier</param>
            <param name="graceful">Whether to wait for current execution to complete</param>
            <returns>Task representing the unregistration operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.GetAgent(System.String)">
            <summary>
            Gets an agent instance by ID.
            </summary>
            <param name="agentId">Agent identifier</param>
            <returns>Agent instance if found, null otherwise</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.GetAllAgents">
            <summary>
            Gets all registered agents.
            </summary>
            <returns>Collection of all agent instances</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.ExecuteWorkflowAsync(SemanticKernel.Graph.Core.MultiAgentWorkflow,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes a coordinated multi-agent workflow.
            </summary>
            <param name="workflow">Workflow definition</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Aggregated workflow result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.ExecuteAgentWorkItemAsync(SemanticKernel.Graph.Core.AgentInstance,SemanticKernel.Graph.Core.WorkItem,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Executes a work item on a specific agent.
            </summary>
            <param name="agent">Agent instance</param>
            <param name="workItem">Work item to execute</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Agent execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.ExecuteWithDependenciesAsync(SemanticKernel.Graph.Core.MultiAgentWorkflow,System.Collections.Generic.List{SemanticKernel.Graph.Core.WorkItem},Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Executes work items honoring task dependencies via wave-based fork/join scheduling.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.MultiAgentCoordinator.CanAttemptCandidate(System.String)">
            <summary>
            Determines whether execution can be attempted for a candidate agent based on circuit breaker state.
            Moves Open->HalfOpen when open duration has elapsed and enforces half-open probe limits.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MultiAgentOptions">
            <summary>
            Configuration options for multi-agent coordination.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.MaxConcurrentAgents">
            <summary>
            Gets or sets the maximum number of concurrent agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.SharedStateOptions">
            <summary>
            Gets or sets the shared state management options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.WorkDistributionOptions">
            <summary>
            Gets or sets the work distribution options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.ResultAggregationOptions">
            <summary>
            Gets or sets the result aggregation options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.HealthMonitoringOptions">
            <summary>
            Gets or sets the health monitoring options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.CoordinationTimeout">
            <summary>
            Gets or sets the coordination timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.EnableAutomaticCleanup">
            <summary>
            Gets or sets whether to enable automatic cleanup of completed workflows.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.WorkflowRetentionPeriod">
            <summary>
            Gets or sets the workflow retention period.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.EnableDistributedTracing">
            <summary>
            Gets or sets whether to enable distributed tracing (ActivitySource) for multi-agent workflows.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.DistributedTracingSourceName">
            <summary>
            Gets or sets the ActivitySource name used for distributed tracing within the multi-agent coordinator.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.EnableAgentFailover">
            <summary>
            Gets or sets whether automatic agent failover should be attempted when an agent is unavailable or fails.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentOptions.MaxFailoverAttempts">
            <summary>
            Gets or sets the maximum number of failover attempts across alternative agents per work item.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SharedStateOptions">
            <summary>
            Configuration options for shared state management.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateOptions.ConflictResolutionStrategy">
            <summary>
            Gets or sets the conflict resolution strategy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateOptions.AllowOverwrite">
            <summary>
            Gets or sets whether to allow overwrites during merging.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateOptions.MinimumPriorityForOverride">
            <summary>
            Gets or sets the minimum priority required for override operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateOptions.EnableAutomaticCleanup">
            <summary>
            Gets or sets whether to enable automatic cleanup of expired states.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateOptions.CleanupInterval">
            <summary>
            Gets or sets the cleanup interval.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateOptions.StateRetentionPeriod">
            <summary>
            Gets or sets the state retention period.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateOptions.MaxStateVersions">
            <summary>
            Gets or sets the maximum number of state versions to keep.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateOptions.EnableStateCompression">
            <summary>
            Gets or sets whether to enable state compression.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WorkDistributionOptions">
            <summary>
            Configuration options for work distribution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.DistributionStrategy">
            <summary>
            Gets or sets the work distribution strategy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.MaxQueueSizePerAgent">
            <summary>
            Gets or sets the maximum queue size per agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.WorkItemTimeout">
            <summary>
            Gets or sets the work item timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.EnablePrioritization">
            <summary>
            Gets or sets whether to enable work item prioritization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.LoadBalancingThreshold">
            <summary>
            Gets or sets the load balancing threshold.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.EnableAutoRedistribution">
            <summary>
            Gets or sets whether to enable automatic work redistribution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.RedistributionInterval">
            <summary>
            Gets or sets the redistribution check interval.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.DefaultAgentMaxCapacity">
            <summary>
            Gets or sets the default max capacity per agent when not explicitly reported.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.MaxParallelWorkItems">
            <summary>
            Gets or sets the maximum degree of parallelism for fork/join when executing work items.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.EnableMetrics">
            <summary>
            Gets or sets whether to enable metrics emission for distribution operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.MetricsMeterName">
            <summary>
            Gets or sets the meter name for distribution metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributionOptions.EnableDetailedAssignmentMetrics">
            <summary>
            Gets or sets whether to emit detailed assignment distribution metrics (skew, stddev, agents assigned).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ResultAggregationOptions">
            <summary>
            Configuration options for result aggregation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.DefaultAggregationStrategy">
            <summary>
            Gets or sets the default aggregation strategy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.AggregationTimeout">
            <summary>
            Gets or sets the aggregation timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.IncludeMetadata">
            <summary>
            Gets or sets whether to include metadata in aggregated results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.PreserveIndividualResults">
            <summary>
            Gets or sets whether to preserve individual results in aggregated output.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.ConsensusThreshold">
            <summary>
            Gets or sets the consensus threshold for consensus-based aggregation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.MaxResultSizeBytes">
            <summary>
            Gets or sets the maximum result size for aggregation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.EnableResultValidation">
            <summary>
            Gets or sets whether to enable result validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.EnableCaching">
            <summary>
            Gets or sets whether to enable caching of aggregation results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.CacheExpiration">
            <summary>
            Gets or sets the cache expiration time for aggregation results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregationOptions.MaxCacheEntries">
            <summary>
            Gets or sets the maximum number of cached aggregation entries.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HealthMonitoringOptions">
            <summary>
            Configuration options for agent health monitoring.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.EnablePeriodicHealthChecks">
            <summary>
            Gets or sets whether to enable periodic health checks.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.HealthCheckInterval">
            <summary>
            Gets or sets the health check interval.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.EnableMetricsCollection">
            <summary>
            Gets or sets whether to enable metrics collection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.MetricsCollectionInterval">
            <summary>
            Gets or sets the metrics collection interval.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.UnhealthyThreshold">
            <summary>
            Gets or sets the unhealthy threshold (consecutive failures).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.InactivityThreshold">
            <summary>
            Gets or sets the inactivity threshold.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.HealthCheckHistorySize">
            <summary>
            Gets or sets the health check history size.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.HealthCheckTimeout">
            <summary>
            Gets or sets the health check timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.EnableAutomaticRecovery">
            <summary>
            Gets or sets whether to enable automatic recovery.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.RecoveryRetryCount">
            <summary>
            Gets or sets the recovery retry count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.EnableAgentCircuitBreaker">
            <summary>
            Gets or sets whether to enable a per-agent circuit breaker to avoid hammering failing agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.AgentCircuitBreakerFailureThreshold">
            <summary>
            Gets or sets the number of consecutive failures to open the circuit for the agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.AgentCircuitBreakerOpenDuration">
            <summary>
            Gets or sets the duration the circuit remains open before transitioning to half-open for probe attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.AgentCircuitBreakerHalfOpenMaxAttempts">
            <summary>
            Gets or sets the maximum number of probe attempts allowed while in half-open state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthMonitoringOptions.AgentCircuitBreakerSuccessesToClose">
            <summary>
            Gets or sets the number of consecutive successes required in half-open to close the circuit.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConflictResolutionStrategy">
            <summary>
            Defines conflict resolution strategies for shared state.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConflictResolutionStrategy.LastWriterWins">
            <summary>
            Last writer wins - most recent update overwrites previous values.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConflictResolutionStrategy.FirstWriterWins">
            <summary>
            First writer wins - first update is preserved, subsequent updates are ignored.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConflictResolutionStrategy.Merge">
            <summary>
            Merge compatible changes, throw exception on conflicts.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.ConflictResolutionStrategy.AgentPriority">
            <summary>
            Resolve conflicts based on agent priority.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentHealthStatus">
            <summary>
            Health status snapshot for an agent, including recency and failure counters.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.AgentId">
            <summary>
            Gets or sets the agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.Status">
            <summary>
            Gets or sets the current health status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.LastHealthCheck">
            <summary>
            Gets or sets the last health check timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.LastActivity">
            <summary>
            Gets or sets the last activity timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.ConsecutiveFailures">
            <summary>
            Gets or sets the number of consecutive failures.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.TotalHealthChecks">
            <summary>
            Gets or sets the total number of health checks performed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.LastError">
            <summary>
            Gets or sets the last error message (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.HealthCheckHistory">
            <summary>
            Gets or sets the health check history.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.IsHealthy">
            <summary>
            Gets whether the agent is currently healthy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.CircuitState">
            <summary>
            Gets or sets the current circuit breaker state for this agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.CircuitOpenedAt">
            <summary>
            Gets or sets the timestamp when the circuit was opened (if applicable).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.HalfOpenTrialAttempts">
            <summary>
            Gets or sets the number of probe attempts performed while half-open.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentHealthStatus.HalfOpenConsecutiveSuccesses">
            <summary>
            Gets or sets the number of consecutive successes while half-open.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentPerformanceMetrics">
            <summary>
            Aggregated performance metrics for an individual agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.AgentId">
            <summary>
            Gets or sets the agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.ExecutionCount">
            <summary>
            Gets or sets the total number of executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.TotalExecutionTime">
            <summary>
            Gets or sets the total execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.AverageExecutionTime">
            <summary>
            Gets or sets the average execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.LastExecutionTime">
            <summary>
            Gets or sets the last execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.ErrorCount">
            <summary>
            Gets or sets the total number of errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.ErrorRate">
            <summary>
            Gets or sets the error rate (errors/executions).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.ThroughputPerMinute">
            <summary>
            Gets or sets the throughput (executions per minute).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.MemoryUsage">
            <summary>
            Gets or sets the memory usage in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.CpuUsage">
            <summary>
            Gets or sets the CPU usage percentage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentPerformanceMetrics.FirstExecutionTime">
            <summary>
            Gets or sets the first execution timestamp.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HealthCheckResult">
            <summary>
            Represents the result of a health check.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthCheckResult.AgentId">
            <summary>
            Gets or sets the agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthCheckResult.CheckTime">
            <summary>
            Gets or sets the health check timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthCheckResult.Success">
            <summary>
            Gets or sets whether the health check was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthCheckResult.ResponseTime">
            <summary>
            Gets or sets the response time for the health check.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthCheckResult.ErrorMessage">
            <summary>
            Gets or sets the error message if the health check failed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthCheckResult.Metadata">
            <summary>
            Gets or sets additional health check metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SystemHealthMetrics">
            <summary>
            Represents system-wide health metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SystemHealthMetrics.Timestamp">
            <summary>
            Gets or sets the timestamp of the metrics collection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SystemHealthMetrics.TotalAgents">
            <summary>
            Gets or sets the total number of agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SystemHealthMetrics.HealthyAgents">
            <summary>
            Gets or sets the number of healthy agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SystemHealthMetrics.UnhealthyAgents">
            <summary>
            Gets or sets the number of unhealthy agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SystemHealthMetrics.SystemHealthRatio">
            <summary>
            Gets or sets the system health ratio.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SystemHealthMetrics.AverageResponseTime">
            <summary>
            Gets or sets the average response time across all agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SystemHealthMetrics.TotalThroughput">
            <summary>
            Gets or sets the total system throughput.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SystemHealthMetrics.AdditionalMetrics">
            <summary>
            Gets or sets additional system metrics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HealthStatus">
            <summary>
            Defines health status values.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthStatus.Healthy">
            <summary>
            Agent is healthy and operating normally.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthStatus.Degraded">
            <summary>
            Agent is experiencing some issues but still functional.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthStatus.Unhealthy">
            <summary>
            Agent is unhealthy and may not be functioning properly.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthStatus.Unknown">
            <summary>
            Agent health status is unknown.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentCircuitState">
            <summary>
            Defines circuit breaker states for per-agent resilience.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentCircuitState.Closed">
            <summary>
            Circuit is closed; operations are allowed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentCircuitState.Open">
            <summary>
            Circuit is open; operations are blocked until open duration elapses.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentCircuitState.HalfOpen">
            <summary>
            Circuit is half-open; limited probe attempts are allowed to test recovery.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentActivity">
            <summary>
            Defines agent activity types for health tracking.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentActivity.ExecutionStarted">
            <summary>
            Agent started execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentActivity.ExecutionCompleted">
            <summary>
            Agent completed execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentActivity.ExecutionFailed">
            <summary>
            Agent failed during execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentActivity.HealthCheck">
            <summary>
            Agent received a health check.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentActivity.StateUpdate">
            <summary>
            Agent state was updated.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentActivity.Communication">
            <summary>
            Agent communicated with other agents.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HealthEventType">
            <summary>
            Defines health event types.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthEventType.AgentUnhealthy">
            <summary>
            Agent became unhealthy.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthEventType.AgentRecovered">
            <summary>
            Agent recovered from unhealthy state.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthEventType.SystemHealthThresholdBreached">
            <summary>
            System health threshold breached.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthEventType.AgentUnresponsive">
            <summary>
            Agent became unresponsive.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.HealthEventType.HighErrorRate">
            <summary>
            High error rate detected.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.HealthEvent">
            <summary>
            Represents a health event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthEvent.AgentId">
            <summary>
            Gets or sets the agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthEvent.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthEvent.Timestamp">
            <summary>
            Gets or sets the event timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthEvent.Error">
            <summary>
            Gets or sets the associated error (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.HealthEvent.Metadata">
            <summary>
            Gets or sets additional event metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IHealthEventHandler">
            <summary>
            Interface for handling health events.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IHealthEventHandler.HandleHealthEventAsync(SemanticKernel.Graph.Core.HealthEvent)">
            <summary>
            Handles a health event.
            </summary>
            <param name="healthEvent">The health event to handle</param>
            <returns>Task representing the handling operation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IMetricsEventHandler">
            <summary>
            Interface for handling metrics events.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IMetricsEventHandler.HandleMetricsEventAsync(SemanticKernel.Graph.Core.SystemHealthMetrics)">
            <summary>
            Handles a metrics event.
            </summary>
            <param name="metrics">The system health metrics</param>
            <returns>Task representing the handling operation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentInstance">
            <summary>
            Represents a running agent instance in a multi‑agent system, tracking identity,
            role, state, lifecycle status, and coordinating execution through an executor.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentInstance.#ctor(System.String,SemanticKernel.Graph.Integration.IGraphExecutor,SemanticKernel.Graph.Core.AgentRole,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Core.AgentInstance"/>.
            </summary>
            <param name="agentId">Unique agent identifier.</param>
            <param name="executor">Graph executor used to run agent work.</param>
            <param name="role">Agent role specification.</param>
            <param name="initialState">Initial state for the agent.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentInstance.AgentId">
            <summary>
            Gets the unique identifier for this agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentInstance.Role">
            <summary>
            Gets the agent role specification.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentInstance.State">
            <summary>
            Gets or sets the current state of the agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentInstance.CreatedAt">
            <summary>
            Gets the creation timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentInstance.Status">
            <summary>
            Gets the current status of the agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentInstance.Executor">
            <summary>
            Gets the graph executor for this agent.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentInstance.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the agent with the supplied kernel and arguments.
            </summary>
            <param name="kernel">Semantic Kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The node execution result.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentInstance.StopAsync">
            <summary>
            Requests a graceful stop and waits briefly for shutdown.
            </summary>
            <returns>A task representing the stop operation.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AgentInstance.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentRole">
            <summary>
            Defines the role, capabilities, and metadata of an agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentRole.Name">
            <summary>
            Gets or sets the role name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentRole.Description">
            <summary>
            Gets or sets the role description.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentRole.Priority">
            <summary>
            Gets or sets the agent priority (higher values have more priority).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentRole.Capabilities">
            <summary>
            Gets or sets the capabilities this role provides.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentRole.Specializations">
            <summary>
            Gets or sets the specializations of this role.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentRole.Metadata">
            <summary>
            Gets or sets role-specific metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentStatus">
            <summary>
            Represents the lifecycle status of an agent.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentStatus.Idle">
            <summary>
            Agent is idle and ready for work.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentStatus.Running">
            <summary>
            Agent is currently executing work.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentStatus.Stopping">
            <summary>
            Agent is in the process of stopping.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentStatus.Stopped">
            <summary>
            Agent has been stopped.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentStatus.Failed">
            <summary>
            Agent has failed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AgentStatus.Disposed">
            <summary>
            Agent has been disposed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MultiAgentWorkflow">
            <summary>
            Defines a multi-agent workflow.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentWorkflow.Id">
            <summary>
            Gets or sets the workflow identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentWorkflow.Name">
            <summary>
            Gets or sets the workflow name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentWorkflow.Description">
            <summary>
            Gets or sets the workflow description.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentWorkflow.Tasks">
            <summary>
            Gets or sets the list of tasks in this workflow.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentWorkflow.RequiredAgents">
            <summary>
            Gets or sets the required agent IDs for this workflow.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentWorkflow.AggregationStrategy">
            <summary>
            Gets or sets the result aggregation strategy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentWorkflow.Metadata">
            <summary>
            Gets or sets workflow-specific metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WorkflowTask">
            <summary>
            Represents a task within a workflow.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkflowTask.Id">
            <summary>
            Gets or sets the task identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkflowTask.Name">
            <summary>
            Gets or sets the task name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkflowTask.Description">
            <summary>
            Gets or sets the task description.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkflowTask.Priority">
            <summary>
            Gets or sets the task priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkflowTask.RequiredCapabilities">
            <summary>
            Gets or sets the required capabilities for this task.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkflowTask.Parameters">
            <summary>
            Gets or sets task-specific parameters.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkflowTask.EstimatedDuration">
            <summary>
            Gets or sets the estimated execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkflowTask.DependsOn">
            <summary>
            Gets or sets task dependencies that must complete before this task can run.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WorkItem">
            <summary>
            Represents a work item assigned to an agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.Id">
            <summary>
            Gets or sets the work item identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.WorkflowId">
            <summary>
            Gets or sets the workflow identifier this work item belongs to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.AgentId">
            <summary>
            Gets or sets the assigned agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.Task">
            <summary>
            Gets or sets the task to be executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.Arguments">
            <summary>
            Gets or sets the execution arguments.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.Priority">
            <summary>
            Gets or sets the work item priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.CreatedAt">
            <summary>
            Gets or sets the creation timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.Status">
            <summary>
            Gets or sets the current status of the work item.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkItem.Metadata">
            <summary>
            Gets or sets additional metadata for the work item.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WorkItemStatus">
            <summary>
            Represents the status of a work item.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkItemStatus.Pending">
            <summary>
            Work item is pending execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkItemStatus.InProgress">
            <summary>
            Work item is currently being executed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkItemStatus.Completed">
            <summary>
            Work item completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkItemStatus.Failed">
            <summary>
            Work item failed during execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkItemStatus.Cancelled">
            <summary>
            Work item was cancelled.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MultiAgentResult">
            <summary>
            Represents the result of a multi-agent workflow execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentResult.WorkflowId">
            <summary>
            Gets or sets the workflow identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentResult.Success">
            <summary>
            Gets or sets whether the workflow was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentResult.Results">
            <summary>
            Gets or sets the individual agent results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentResult.AggregatedResult">
            <summary>
            Gets or sets the aggregated result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentResult.Duration">
            <summary>
            Gets or sets the total execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentResult.AgentsInvolved">
            <summary>
            Gets or sets the agents that were involved in the execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentResult.Error">
            <summary>
            Gets or sets the error if the workflow failed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.MultiAgentResult.Metadata">
            <summary>
            Gets or sets additional result metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentExecutionResult">
            <summary>
            Represents the result of an individual agent execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentExecutionResult.AgentId">
            <summary>
            Gets or sets the agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentExecutionResult.WorkItemId">
            <summary>
            Gets or sets the work item identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentExecutionResult.Success">
            <summary>
            Gets or sets whether the execution was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentExecutionResult.Result">
            <summary>
            Gets or sets the execution result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentExecutionResult.Duration">
            <summary>
            Gets or sets the execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentExecutionResult.FinalState">
            <summary>
            Gets or sets the final state after execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentExecutionResult.Error">
            <summary>
            Gets or sets the error if execution failed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentExecutionResult.Metadata">
            <summary>
            Gets or sets additional execution metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AggregatedResult">
            <summary>
            Represents an aggregated result from multiple agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AggregatedResult.WorkflowId">
            <summary>
            Gets or sets the workflow identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AggregatedResult.Strategy">
            <summary>
            Gets or sets the aggregation strategy used.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AggregatedResult.Success">
            <summary>
            Gets or sets whether the aggregation was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AggregatedResult.Result">
            <summary>
            Gets or sets the aggregated result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AggregatedResult.SourceResults">
            <summary>
            Gets or sets the source results that were aggregated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AggregatedResult.AggregationDuration">
            <summary>
            Gets or sets the aggregation duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AggregatedResult.Metadata">
            <summary>
            Gets or sets aggregation metadata.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AggregatedResult.Error">
            <summary>
            Gets or sets the error if aggregation failed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AggregationStrategy">
            <summary>
            Defines available aggregation strategies.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AggregationStrategy.Merge">
            <summary>
            Merge all successful results into a combined output.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AggregationStrategy.Concat">
            <summary>
            Concatenate all successful results.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AggregationStrategy.First">
            <summary>
            Return the first successful result.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AggregationStrategy.Last">
            <summary>
            Return the last successful result.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AggregationStrategy.Majority">
            <summary>
            Use majority vote to determine the result.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AggregationStrategy.Weighted">
            <summary>
            Use weighted aggregation based on agent confidence.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.AggregationStrategy.Consensus">
            <summary>
            Require consensus among agents.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SharedWorkflowState">
            <summary>
            Represents shared state for a workflow.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedWorkflowState.WorkflowId">
            <summary>
            Gets or sets the workflow identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedWorkflowState.SharedState">
            <summary>
            Gets or sets the shared state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedWorkflowState.CreatedAt">
            <summary>
            Gets or sets the creation timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedWorkflowState.LastUpdated">
            <summary>
            Gets or sets the last update timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedWorkflowState.Version">
            <summary>
            Gets or sets the state version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedWorkflowState.ParticipatingAgents">
            <summary>
            Gets or sets the participating agents.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentParticipation">
            <summary>
            Represents an agent's participation in a workflow.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentParticipation.AgentId">
            <summary>
            Gets or sets the agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentParticipation.LastUpdate">
            <summary>
            Gets or sets the last update timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentParticipation.UpdateCount">
            <summary>
            Gets or sets the number of updates made by this agent.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentStateEntry">
            <summary>
            Represents an agent state entry in the shared state manager.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentStateEntry.AgentId">
            <summary>
            Gets or sets the agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentStateEntry.Role">
            <summary>
            Gets or sets the agent role.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentStateEntry.State">
            <summary>
            Gets or sets the agent state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentStateEntry.LastUpdated">
            <summary>
            Gets or sets the last update timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentStateEntry.Version">
            <summary>
            Gets or sets the state version.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AgentCapacity">
            <summary>
            Represents agent capacity information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentCapacity.AgentId">
            <summary>
            Gets or sets the agent identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentCapacity.MaxCapacity">
            <summary>
            Gets or sets the maximum capacity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentCapacity.CurrentLoad">
            <summary>
            Gets or sets the current load.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentCapacity.AvailableCapacity">
            <summary>
            Gets the available capacity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentCapacity.Capabilities">
            <summary>
            Gets or sets the agent capabilities.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.AgentCapacity.Metadata">
            <summary>
            Gets or sets capacity metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WorkDistributionStrategy">
            <summary>
            Defines work distribution strategies.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkDistributionStrategy.RoundRobin">
            <summary>
            Distribute work in round-robin fashion.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkDistributionStrategy.LoadBased">
            <summary>
            Distribute work based on current agent load.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkDistributionStrategy.RoleBased">
            <summary>
            Distribute work based on agent roles and capabilities.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.WorkDistributionStrategy.CapacityBased">
            <summary>
            Distribute work based on agent capacity.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.DistributionMetricsSnapshot">
            <summary>
            Snapshot of distribution metrics for a single work distribution operation.
            Provides aggregate information useful for monitoring balance and failure patterns.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.Strategy">
            <summary>
            Gets or sets the work distribution strategy used.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.TotalTasks">
            <summary>
            Gets or sets the total number of tasks considered for distribution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.AgentsInWorkflow">
            <summary>
            Gets or sets the total number of agents that were part of the workflow.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.AgentsAssigned">
            <summary>
            Gets or sets the number of agents that received at least one assignment.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.MinAssignmentsPerAgent">
            <summary>
            Gets or sets the minimum number of tasks assigned to any agent (0 when some agents received none).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.MaxAssignmentsPerAgent">
            <summary>
            Gets or sets the maximum number of tasks assigned to any agent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.AverageAssignmentsPerAgent">
            <summary>
            Gets or sets the average number of tasks assigned per agent (considering only agents that received assignments).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.AssignmentStdDev">
            <summary>
            Gets or sets the standard deviation of assignments per agent (considering only agents that received assignments).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.AssignmentSkewRatio">
            <summary>
            Gets or sets the skew ratio defined as max/min (min coerced to at least 1 to avoid division by zero).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.StrategyFallbacks">
            <summary>
            Gets or sets the number of strategy fallbacks that occurred during distribution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.UnknownCapacityAgents">
            <summary>
            Gets or sets the number of agents lacking capacity information during distribution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.DistributionMetricsSnapshot.CompletedAt">
            <summary>
            Gets or sets the timestamp when the distribution completed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeCircuitBreakerManager">
            <summary>
            Manages circuit breakers for individual nodes with integrated telemetry and resource budget awareness.
            Provides node-level failure protection and metrics collection.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.#ctor(SemanticKernel.Graph.Integration.IGraphLogger,SemanticKernel.Graph.Core.ErrorMetricsCollector,SemanticKernel.Graph.Streaming.GraphExecutionEventStream,SemanticKernel.Graph.Core.ResourceGovernor,SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Initializes a new instance of NodeCircuitBreakerManager.
            </summary>
            <param name="logger">Optional logger for circuit breaker operations</param>
            <param name="errorMetricsCollector">Optional error metrics collector for integration</param>
            <param name="eventStream">Optional event stream for real-time notifications</param>
            <param name="resourceGovernor">Optional resource governor for budget integration</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.ConfigureNode(System.String,SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig)">
            <summary>
            Configures circuit breaker for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="config">Circuit breaker configuration</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.GetNodeConfig(System.String)">
            <summary>
            Gets circuit breaker configuration for a node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>Circuit breaker configuration, or null if not configured</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.ExecuteAsync``1(System.String,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an operation through the node's circuit breaker.
            </summary>
            <typeparam name="T">Operation result type</typeparam>
            <param name="nodeId">Node identifier</param>
            <param name="executionId">Execution identifier for telemetry</param>
            <param name="operation">Operation to execute</param>
            <param name="fallback">Optional fallback operation</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.GetNodeState(System.String)">
            <summary>
            Gets the current state of a node's circuit breaker.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>Circuit breaker state, or null if not configured</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.GetNodeMetrics(System.String)">
            <summary>
            Gets circuit breaker metrics for a node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>Circuit breaker metrics, or null if not configured</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.GetAllNodeStates">
            <summary>
            Gets summary of all circuit breaker states.
            </summary>
            <returns>Dictionary of node states</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.CheckResourceBudgets(System.String,System.String)">
            <summary>
            Checks resource budgets and throws exception if exhausted.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.ShouldCountAsFailure(System.Exception,SemanticKernel.Graph.Core.GraphErrorType,SemanticKernel.Graph.Core.CircuitBreakerPolicyConfig)">
            <summary>
            Determines if an error should count as a circuit breaker failure.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.RecordOperationAttempt(System.String,System.String)">
            <summary>
            Records a circuit breaker operation attempt.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.RecordOperationSuccess(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Records a successful circuit breaker operation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.RecordOperationFailure(System.String,System.String,System.DateTimeOffset,System.Exception)">
            <summary>
            Records a failed circuit breaker operation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.RecordCircuitBreakerOpen(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Records when a circuit breaker opens.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeCircuitBreakerManager.Dispose">
            <summary>
            Disposes resources used by the circuit breaker manager.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CircuitBreakerMetrics">
            <summary>
            Metrics for circuit breaker operations on a specific node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CircuitBreakerMetrics.#ctor(System.String)">
            <summary>
            Initializes circuit breaker metrics for a node.
            </summary>
            <param name="nodeId">Node identifier</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.TotalOperations">
            <summary>
            Gets the total number of operations attempted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.SuccessfulOperations">
            <summary>
            Gets the number of successful operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.FailedOperations">
            <summary>
            Gets the number of failed operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.CircuitOpenCount">
            <summary>
            Gets the number of times the circuit opened.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.LastCircuitOpenTime">
            <summary>
            Gets the timestamp of the last circuit open event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.LastCircuitCloseTime">
            <summary>
            Gets the timestamp of the last circuit close event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.LastHalfOpenTime">
            <summary>
            Gets the timestamp of the last half-open state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.SuccessRate">
            <summary>
            Gets the success rate as a percentage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CircuitBreakerMetrics.AverageLatency">
            <summary>
            Gets the average operation latency.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.CircuitBreakerMetrics.RecordLatency(System.TimeSpan)">
            <summary>
            Records operation latency for averaging.
            </summary>
            <param name="latency">Operation latency</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeExecutionMetrics">
            <summary>
            Tracks execution metrics for a specific graph node.
            Provides detailed statistics about node performance and behavior.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionMetrics.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of NodeExecutionMetrics.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="nodeName">Node name</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.NodeName">
            <summary>
            Gets the node name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.TotalExecutions">
            <summary>
            Gets the total number of executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.SuccessfulExecutions">
            <summary>
            Gets the number of successful executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.FailedExecutions">
            <summary>
            Gets the number of failed executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.SuccessRate">
            <summary>
            Gets the success rate as a percentage (0-100).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.TotalExecutionTime">
            <summary>
            Gets the total execution time across all runs.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.AverageExecutionTime">
            <summary>
            Gets the average execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.MinExecutionTime">
            <summary>
            Gets the minimum execution time recorded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.MaxExecutionTime">
            <summary>
            Gets the maximum execution time recorded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.FirstExecution">
            <summary>
            Gets the timestamp of the first execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.LastExecution">
            <summary>
            Gets the timestamp of the last execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionMetrics.ExecutionsPerSecond">
            <summary>
            Gets the throughput in executions per second.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionMetrics.RecordExecution(System.TimeSpan,System.Boolean,System.Object,System.Exception)">
            <summary>
            Records a new execution result.
            </summary>
            <param name="duration">Execution duration</param>
            <param name="success">Whether execution was successful</param>
            <param name="result">Execution result (optional)</param>
            <param name="exception">Exception if failed (optional)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionMetrics.GetPercentile(System.Double)">
            <summary>
            Gets execution time percentile.
            </summary>
            <param name="percentile">Percentile to calculate (0-100)</param>
            <returns>Execution time at the specified percentile</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionMetrics.GetRecentSummary(System.Int32)">
            <summary>
            Gets a summary of recent executions.
            </summary>
            <param name="count">Number of recent executions to analyze</param>
            <returns>Summary of recent execution metrics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionMetrics.ToString">
            <summary>
            Returns a string representation of the node metrics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeExecutionSummary">
            <summary>
            Summary of node execution metrics for a specific time window.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.NodeName">
            <summary>
            Gets or sets the node name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.SampleSize">
            <summary>
            Gets or sets the number of executions in the sample.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.AverageTime">
            <summary>
            Gets or sets the average execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.MinTime">
            <summary>
            Gets or sets the minimum execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.MaxTime">
            <summary>
            Gets or sets the maximum execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.P50">
            <summary>
            Gets or sets the 50th percentile (median) execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.P95">
            <summary>
            Gets or sets the 95th percentile execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionSummary.P99">
            <summary>
            Gets or sets the 99th percentile execution time.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeExecutionTracker">
            <summary>
            Tracks a single node execution for performance metrics collection.
            Provides a lightweight token that pairs with the start of node tracking.
            </summary>
            <remarks>
            This class is designed to be created when node execution starts
            and passed back to complete the tracking when execution finishes.
            It prevents timing errors and ensures proper metrics correlation.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionTracker.#ctor(System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of NodeExecutionTracker.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="nodeName">Node name</param>
            <param name="executionId">Execution identifier</param>
            <param name="startTime">Execution start timestamp</param>
            <exception cref="T:System.ArgumentException">Thrown when any string parameter is null or empty</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionTracker.TrackerId">
            <summary>
            Gets the unique identifier for this tracker instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionTracker.NodeId">
            <summary>
            Gets the node identifier being tracked.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionTracker.NodeName">
            <summary>
            Gets the node name being tracked.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionTracker.ExecutionId">
            <summary>
            Gets the execution identifier this tracking belongs to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionTracker.StartTime">
            <summary>
            Gets the timestamp when tracking started.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeExecutionTracker.ElapsedTime">
            <summary>
            Gets the elapsed time since tracking started.
            Optimized to avoid DateTimeOffset allocations on hot paths.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionTracker.ToString">
            <summary>
            Returns a string representation of this tracker.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionTracker.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current tracker.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeExecutionTracker.GetHashCode">
            <summary>
            Returns a hash code for this tracker.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PathOptimizationProfile">
            <summary>
            Optimization profile for execution paths.
            Maintains history and metrics to drive intelligent, trend‑aware optimizations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.#ctor(System.String)">
            <summary>
            Initializes a new path optimization profile.
            </summary>
            <param name="pathKey">The unique path key.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationProfile.PathKey">
            <summary>Gets the path key.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationProfile.CreatedAt">
            <summary>Gets the profile creation timestamp.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationProfile.LastUpdated">
            <summary>Gets the last updated timestamp.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationProfile.OptimizationScore">
            <summary>Gets the current optimization score (0–100).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationProfile.LastOptimized">
            <summary>Gets the timestamp of the last recorded optimization.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationProfile.OptimizationHistory">
            <summary>Gets a snapshot of the optimization history.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationProfile.PerformanceTrend">
            <summary>Gets the current performance trend.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationProfile.LastMetrics">
            <summary>Gets the last recorded execution path metrics.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.UpdateMetrics(SemanticKernel.Graph.Core.ExecutionPathMetrics)">
            <summary>
            Updates the profile with new metrics and recomputes trend and score.
            </summary>
            <param name="metrics">The current execution path metrics.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.RecordOptimization(SemanticKernel.Graph.Core.OptimizationType,System.String,SemanticKernel.Graph.Core.OptimizationImpact)">
            <summary>
            Records an applied optimization in the profile history.
            </summary>
            <param name="optimizationType">The optimization type.</param>
            <param name="description">A human‑readable description.</param>
            <param name="impact">The expected impact level.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.UpdateOptimizationScore">
            <summary>
            Recomputes the weighted optimization score from the latest metrics and trend.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.AnalyzePerformanceTrend(SemanticKernel.Graph.Core.ExecutionPathMetrics,SemanticKernel.Graph.Core.ExecutionPathMetrics)">
            <summary>
            Analyzes performance trend between two metric snapshots.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.CalculateFrequencyScore">
            <summary>
            Calculates the frequency‑based component of the score.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.CalculatePerformanceScore">
            <summary>
            Calculates the performance‑based component of the score.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.CalculateReliabilityScore">
            <summary>
            Calculates the reliability‑based component of the score.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PathOptimizationProfile.CalculateTrendScore">
            <summary>
            Calculates the trend‑based component of the score.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeOptimizationProfile">
            <summary>
            Optimization profile for individual nodes.
            Maintains history and metrics to guide node‑specific optimizations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeOptimizationProfile.#ctor(System.String)">
            <summary>
            Initializes a new node optimization profile.
            </summary>
            <param name="nodeId">The node identifier.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationProfile.NodeId">
            <summary>Gets the node identifier.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationProfile.CreatedAt">
            <summary>Gets the profile creation timestamp.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationProfile.LastUpdated">
            <summary>Gets the last updated timestamp.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationProfile.OptimizationScore">
            <summary>Gets the current optimization score (0–100).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationProfile.LastOptimized">
            <summary>Gets the timestamp of the last recorded optimization.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationProfile.OptimizationHistory">
            <summary>Gets a snapshot of the optimization history.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationProfile.PerformanceTrend">
            <summary>Gets the current performance trend.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationProfile.LastMetrics">
            <summary>Gets the last recorded node execution metrics.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeOptimizationProfile.UpdateMetrics(SemanticKernel.Graph.Core.NodeExecutionMetrics)">
            <summary>
            Updates the profile with new metrics and recomputes trend and score.
            </summary>
            <param name="metrics">The current node execution metrics.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeOptimizationProfile.RecordOptimization(SemanticKernel.Graph.Core.OptimizationType,System.String,SemanticKernel.Graph.Core.OptimizationImpact)">
            <summary>
            Records an applied optimization in the profile history.
            </summary>
            <param name="optimizationType">The optimization type.</param>
            <param name="description">A human‑readable description.</param>
            <param name="impact">The expected impact level.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeOptimizationProfile.UpdateOptimizationScore">
            <summary>
            Recomputes the weighted optimization score from the latest metrics and trend.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeOptimizationProfile.AnalyzePerformanceTrend(SemanticKernel.Graph.Core.NodeExecutionMetrics,SemanticKernel.Graph.Core.NodeExecutionMetrics)">
            <summary>
            Analyzes performance trend between two metric snapshots.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.NodeOptimizationProfile.CalculateFrequencyScore">
            <summary>
            Calculates the frequency‑based component of the score (node variant).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.AdaptiveCacheManager">
            <summary>
            Adaptive cache manager that analyzes cache metrics and proposes optimizations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdaptiveCacheManager.#ctor(SemanticKernel.Graph.Core.AdaptiveCacheOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Core.AdaptiveCacheManager"/>.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdaptiveCacheManager.OptimizeCacheAsync(SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Analyzes cache metrics and produces optimization recommendations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.AdaptiveCacheManager.GetStatistics">
            <summary>
            Gets a minimal snapshot of cache manager statistics for diagnostics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PredictiveScaler">
            <summary>
            Predictive scaler that analyzes load and recommends scale actions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PredictiveScaler.#ctor(SemanticKernel.Graph.Core.PredictiveScalingOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Core.PredictiveScaler"/>.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PredictiveScaler.AnalyzeScalingNeedsAsync(SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Analyzes scaling needs and returns recommended actions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.PredictiveScaler.GetStatistics">
            <summary>
            Gets a minimal snapshot of scaler status for diagnostics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PathOptimizationEntry">
            <summary>
            Optimization entry recorded for a path.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationEntry.Timestamp">
            <summary>Gets or sets the timestamp when the optimization was recorded.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationEntry.OptimizationType">
            <summary>Gets or sets the optimization type.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationEntry.Description">
            <summary>Gets or sets the human‑readable description.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationEntry.ExpectedImpact">
            <summary>Gets or sets the expected impact.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.PathOptimizationEntry.MetricsBeforeOptimization">
            <summary>Gets or sets the metrics snapshot captured before the optimization.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeOptimizationEntry">
            <summary>
            Optimization entry recorded for a node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationEntry.Timestamp">
            <summary>Gets or sets the timestamp when the optimization was recorded.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationEntry.OptimizationType">
            <summary>Gets or sets the optimization type.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationEntry.Description">
            <summary>Gets or sets the human‑readable description.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationEntry.ExpectedImpact">
            <summary>Gets or sets the expected impact.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.NodeOptimizationEntry.MetricsBeforeOptimization">
            <summary>Gets or sets the metrics snapshot captured before the optimization.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.CacheMetrics">
            <summary>
            Cache metrics tracked by the adaptive cache manager.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CacheMetrics.Hits">
            <summary>Gets or sets the number of cache hits.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CacheMetrics.Misses">
            <summary>Gets or sets the number of cache misses.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.CacheMetrics.HitRate">
            <summary>Gets the cache hit rate as a value between 0 and 1.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PerformanceTrend">
            <summary>
            Performance trend across metric snapshots.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.PerformanceTrend.Improving">
            <summary>Performance improving.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.PerformanceTrend.Stable">
            <summary>Performance stable.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.PerformanceTrend.Degrading">
            <summary>Performance degrading.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ReActQualityEvaluator">
             <summary>
             Provides comprehensive quality evaluation for ReAct pattern executions, including reasoning quality,
             action effectiveness, observation accuracy, goal achievement, pattern consistency, and efficiency.
             </summary>
             <remarks>
             Dimensions assessed:
             - Reasoning quality: logical structure, clarity/specificity, domain‑aware patterns, cross‑iteration consistency
             - Action effectiveness: alignment with reasoning, success rate, and overall impact
             - Observation accuracy: accuracy, completeness, and insightfulness
             - Goal achievement: binary success plus trajectory and efficiency
             - Pattern consistency: stability across iterations
             - Performance: time and iteration efficiency
            
             Thread‑safety: instances are safe for concurrent evaluations; internal collections are concurrent.
             </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.#ctor(SemanticKernel.Graph.Core.ReActQualityOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.ReActQualityEvaluator})">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Core.ReActQualityEvaluator"/>.
            </summary>
            <param name="options">Configuration options. If null, sensible defaults are used.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluateExecution(SemanticKernel.Graph.Nodes.ReActLoopResult,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates the quality of a complete ReAct execution.
            </summary>
            <param name="executionResult">The ReAct loop result to evaluate.</param>
            <param name="domain">Optional domain context for specialized evaluation criteria.</param>
            <returns>A comprehensive <see cref="T:SemanticKernel.Graph.Core.QualityEvaluationResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="executionResult"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluateIteration(SemanticKernel.Graph.Nodes.ReActIteration,SemanticKernel.Graph.Core.IterationContext,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates the quality of a single ReAct iteration.
            </summary>
            <param name="iteration">The iteration to evaluate.</param>
            <param name="context">Context from previous iterations.</param>
            <param name="domain">Optional domain context for specialized evaluation.</param>
            <returns>An <see cref="T:SemanticKernel.Graph.Core.IterationQualityResult"/> for the specified iteration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="iteration"/> or <paramref name="context"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.GetQualityTrends(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Gets quality trends for a specific execution context or pattern.
            </summary>
            <param name="contextKey">Key identifying the execution context</param>
            <param name="timeRange">Optional time range for trend analysis</param>
            <returns>Quality trend analysis</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.CreateQualityProfile(System.String,System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Nodes.ReActLoopResult})">
            <summary>
            Creates a quality profile for specific execution patterns.
            </summary>
            <param name="profileKey">Key identifying the quality profile</param>
            <param name="executionResults">Historical execution results to analyze</param>
            <returns>Generated quality profile</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluateReasoningQuality(SemanticKernel.Graph.Nodes.ReActLoopResult,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates the quality of reasoning across all iterations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluateActionEffectiveness(SemanticKernel.Graph.Nodes.ReActLoopResult,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates the effectiveness of actions taken.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluateObservationAccuracy(SemanticKernel.Graph.Nodes.ReActLoopResult,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates the accuracy and completeness of observations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluateGoalAchievement(SemanticKernel.Graph.Nodes.ReActLoopResult,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates goal achievement and progress.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluatePatternConsistency(SemanticKernel.Graph.Nodes.ReActLoopResult,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates consistency of the ReAct pattern execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluatePerformanceMetrics(SemanticKernel.Graph.Nodes.ReActLoopResult,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates performance metrics like timing and efficiency.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluateReasoningContent(System.String,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates the content quality of reasoning text.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.EvaluateDomainSpecificReasoning(System.String,SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Evaluates domain-specific reasoning patterns.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.CalculateOverallQualityScore(SemanticKernel.Graph.Core.QualityEvaluationResult)">
            <summary>
            Calculates overall quality score from individual metrics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.GetExpectedIterations(SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Gets expected iterations for a domain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.GetExpectedExecutionTime(SemanticKernel.Graph.Nodes.ReActDomain,System.Int32)">
            <summary>
            Gets expected execution time for a domain and iteration count.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.GenerateQualityInsights(SemanticKernel.Graph.Core.QualityEvaluationResult,SemanticKernel.Graph.Nodes.ReActLoopResult)">
            <summary>
            Generates quality insights from evaluation results.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.GenerateImprovementRecommendations(SemanticKernel.Graph.Core.QualityEvaluationResult,SemanticKernel.Graph.Nodes.ReActLoopResult)">
            <summary>
            Generates improvement recommendations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.StoreEvaluationResult(SemanticKernel.Graph.Core.QualityEvaluationResult)">
            <summary>
            Stores evaluation result for historical analysis.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.AnalyzeQualityTrends(System.Collections.Generic.List{SemanticKernel.Graph.Core.EvaluationResult})">
            <summary>
            Analyzes quality trends from historical evaluations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.CalculateTrend(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculates trend direction from a series of values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.CalculateQualityBenchmarks(System.Collections.Generic.List{SemanticKernel.Graph.Core.QualityEvaluationResult})">
            <summary>
            Calculates quality benchmarks from evaluations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ReActQualityEvaluator.IdentifyCommonPatterns(System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ReActLoopResult})">
            <summary>
            Identifies common execution patterns.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ReActQualityOptions">
            <summary>
            Configuration options for ReAct quality evaluation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ReActQualityOptions.QualityWeights">
            <summary>Quality weights for calculating overall score.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ReActQualityOptions.ConsistencyThreshold">
            <summary>Threshold for pattern consistency detection.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ReActQualityOptions.MaxHistorySize">
            <summary>Maximum number of evaluations to keep in history.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ReActQualityOptions.EnableDetailedLogging">
            <summary>Whether to enable detailed quality logging.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.QualityWeights">
            <summary>
            Weights for different quality dimensions in overall score calculation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.QualityEvaluationResult">
            <summary>
            Comprehensive quality evaluation result for a ReAct execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ReasoningQualityMetrics">
            <summary>Quality metrics for reasoning evaluation.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ActionEffectivenessMetrics">
            <summary>Quality metrics for action effectiveness evaluation.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ObservationAccuracyMetrics">
            <summary>Quality metrics for observation accuracy evaluation.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GoalAchievementMetrics">
            <summary>Quality metrics for goal achievement evaluation.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PatternConsistencyMetrics">
            <summary>Quality metrics for pattern consistency evaluation.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.PerformanceQualityMetrics">
            <summary>Quality metrics for performance evaluation.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IterationQualityResult">
            <summary>Quality evaluation result for a single iteration.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IterationContext">
            <summary>Context information for iteration evaluation.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.QualityTrendAnalysis">
            <summary>Quality trend analysis result.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.QualityProfile">
            <summary>Quality profile for specific execution patterns.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.EvaluationResult">
            <summary>Simplified evaluation result for historical storage.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.TrendDirection">
            <summary>Trend direction enumeration.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ExecutionPriority">
            <summary>
            Execution priority levels used for resource governance and QoS decisions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphResourceOptions">
            <summary>
            Options controlling graph-level resource governance: CPU/Memory thresholds,
            adaptive rate limiting, and QoS behavior.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.EnableResourceGovernance">
            <summary>
            Enables resource governance. When disabled, all gating is bypassed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.PreferMetricsCollector">
            <summary>
            If true and a metrics collector is present, system CPU/memory readings
            from it are used; otherwise fallback to lightweight process metrics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.CpuHighWatermarkPercent">
            <summary>
            Upper CPU utilization threshold (%) to apply backpressure (0-100).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.CpuSoftLimitPercent">
            <summary>
            Soft CPU threshold (%) above which the rate limiter starts scaling down permits.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.MinAvailableMemoryMB">
            <summary>
            Minimum available memory in MB before applying strong backpressure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.BasePermitsPerSecond">
            <summary>
            Base permits per second for the adaptive token-bucket rate limiter.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.MaxBurstSize">
            <summary>
            Maximum burst size of permits granted at once.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.DefaultPriority">
            <summary>
            Default execution priority when not specified in arguments.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.NodeCostWeights">
            <summary>
            Optional per-node overrides: nodeId -> estimated cost weight (>=1.0).
            Higher weight consumes more permits and is throttled earlier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphResourceOptions.EnableCooperativePreemption">
            <summary>
            Enables cooperative preemption during candidate selection in the deterministic scheduler.
            When true, the scheduler will prefer next-node candidates that can immediately acquire
            resource permits without waiting, effectively applying backpressure-aware selection
            while preserving deterministic ordering among eligible candidates.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ResourceLease">
            <summary>
            Represents a lease acquired from the resource governor. Disposing releases the lease.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ResourceGovernor">
            <summary>
            Lightweight in-process resource governor providing adaptive rate limiting and
            cooperative scheduling based on CPU/memory and execution priority.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.ResourceGovernor.BudgetExhausted">
            <summary>
            Event fired when resource budget is exhausted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResourceGovernor.BudgetExhaustionCount">
            <summary>
            Gets the total number of times budget has been exhausted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResourceGovernor.LastBudgetExhaustion">
            <summary>
            Gets the timestamp of the last budget exhaustion.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResourceGovernor.AcquireAsync(System.Double,SemanticKernel.Graph.Core.ExecutionPriority,System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires a lease for a unit of work with a given cost and priority.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResourceGovernor.TryAcquire(System.Double,SemanticKernel.Graph.Core.ExecutionPriority,SemanticKernel.Graph.Core.ResourceLease@)">
            <summary>
            Attempts a non-consuming, non-blocking check for immediate availability of required permits.
            Returns true when the governor currently has capacity for the given cost/priority.
            This is a heuristic check to guide cooperative preemption logic and does not reserve permits.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResourceGovernor.UpdateSystemLoad(System.Double,System.Double)">
            <summary>
            Updates the rate limiter based on observed CPU/memory levels.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResourceGovernor.OnBudgetExhausted(System.Double,SemanticKernel.Graph.Core.ExecutionPriority,System.TimeSpan)">
            <summary>
            Handles budget exhaustion event.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.BudgetExhaustedEventArgs">
            <summary>
            Event arguments for budget exhaustion events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BudgetExhaustedEventArgs.RequestedCost">
            <summary>
            Gets or sets the requested resource cost that couldn't be satisfied.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BudgetExhaustedEventArgs.Priority">
            <summary>
            Gets or sets the execution priority of the request.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BudgetExhaustedEventArgs.WaitTime">
            <summary>
            Gets or sets the time spent waiting for permits.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BudgetExhaustedEventArgs.Timestamp">
            <summary>
            Gets or sets the timestamp when budget exhaustion occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BudgetExhaustedEventArgs.AvailablePermits">
            <summary>
            Gets or sets the number of available permits at the time of exhaustion.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.BudgetExhaustedEventArgs.CurrentPermitsPerSecond">
            <summary>
            Gets or sets the current permit refill rate.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ResourceBudgetExhaustedException">
            <summary>
            Exception thrown when resource budget is exhausted.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResourceBudgetExhaustedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of ResourceBudgetExhaustedException.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResourceBudgetExhaustedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of ResourceBudgetExhaustedException.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ResultAggregator">
            <summary>
            Aggregates results from multiple agents into consolidated outputs.
            Provides various aggregation strategies and result transformation capabilities.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.#ctor(SemanticKernel.Graph.Core.ResultAggregationOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ResultAggregator.
            </summary>
            <param name="options">Result aggregation configuration options</param>
            <param name="logger">Optional logger for aggregation operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregator.Options">
            <summary>
            Gets the result aggregation configuration options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.ResultAggregator.AvailableStrategies">
            <summary>
            Gets the available aggregation strategies.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.AggregateResultsAsync(System.String,System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.AgentExecutionResult},SemanticKernel.Graph.Core.AggregationStrategy)">
            <summary>
            Aggregates results from multiple agents using the specified strategy.
            </summary>
            <param name="workflowId">Workflow identifier</param>
            <param name="agentResults">Results from individual agents</param>
            <param name="strategy">Aggregation strategy to use</param>
            <returns>Aggregated result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.RegisterStrategy(System.String,SemanticKernel.Graph.Core.IAggregationStrategy)">
            <summary>
            Registers a custom aggregation strategy.
            </summary>
            <param name="name">Strategy name</param>
            <param name="strategy">Strategy implementation</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.UnregisterStrategy(System.String)">
            <summary>
            Unregisters an aggregation strategy.
            </summary>
            <param name="name">Strategy name</param>
            <returns>True if strategy was removed, false if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.GenerateCacheKey(System.String,SemanticKernel.Graph.Core.AggregationStrategy,System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.Core.AgentExecutionResult})">
            <summary>
            Generates a stable cache key based on workflow, strategy and input results content.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.InitializeDefaultStrategies">
            <summary>
            Initializes default aggregation strategies.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.GetAggregationStrategy(SemanticKernel.Graph.Core.AggregationStrategy)">
            <summary>
            Gets the aggregation strategy implementation.
            </summary>
            <param name="strategy">Requested strategy</param>
            <returns>Strategy implementation</returns>
            <exception cref="T:System.NotSupportedException">Thrown when strategy is not supported</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.CreateAggregationMetadata(System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.Core.AgentExecutionResult})">
            <summary>
            Creates metadata about the aggregation process.
            </summary>
            <param name="results">Source agent results</param>
            <returns>Aggregation metadata</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.InvalidateCache">
            <summary>
            Invalidates the entire aggregation cache.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.InvalidateCacheForWorkflow(System.String)">
            <summary>
            Invalidates cache entries for a specific workflow.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ResultAggregator.GetCacheStatistics">
            <summary>
            Returns basic cache statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IAggregationStrategy">
            <summary>
            Interface for result aggregation strategies.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IAggregationStrategy.AggregateAsync(System.String,System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.Core.AgentExecutionResult})">
            <summary>
            Aggregates multiple agent results into a single result.
            </summary>
            <param name="workflowId">Workflow identifier</param>
            <param name="results">Agent execution results</param>
            <returns>Aggregated function result</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MergeAggregationStrategy">
            <summary>
            Merges successful results by combining their outputs.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConcatenationAggregationStrategy">
            <summary>
            Concatenates successful results into a single output.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.FirstSuccessfulAggregationStrategy">
            <summary>
            Returns the first successful result.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.LastSuccessfulAggregationStrategy">
            <summary>
            Returns the last successful result.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.MajorityVoteAggregationStrategy">
            <summary>
            Implements majority vote aggregation for consensus-based results.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WeightedAggregationStrategy">
            <summary>
            Aggregates results using weighted scoring based on agent confidence or priority.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ConsensusAggregationStrategy">
            <summary>
            Implements consensus-based aggregation requiring agreement among agents.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.IRoutingStrategy">
            <summary>
            Base interface for routing strategies.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.IRoutingStrategy.Type">
            <summary>Type of the routing strategy.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IRoutingStrategy.GetWeight">
            <summary>Gets the weight of this strategy in aggregated decisions.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.IRoutingStrategy.SelectNodeAsync(System.Collections.Generic.List{SemanticKernel.Graph.Core.IGraphNode},SemanticKernel.Graph.Core.AdvancedRoutingContext,System.Threading.CancellationToken)">
            <summary>Selects a node from candidates using the strategy.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingStrategyResult">
            <summary>
            Result from a routing strategy.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SemanticRoutingStrategy">
            <summary>
            Semantic embedding-based routing strategy.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ContentSimilarityRoutingStrategy">
            <summary>
            Content similarity routing strategy based on execution history.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ProbabilisticRoutingStrategy">
            <summary>
            Probabilistic routing strategy with dynamic weights.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ContextualRoutingStrategy">
            <summary>
            Contextual routing strategy based on execution history patterns.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.FeedbackLearningRoutingStrategy">
            <summary>
            Feedback learning routing strategy that adapts based on user feedback.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.FeedbackLearningRoutingStrategy.ProvideFeedbackAsync(System.String,SemanticKernel.Graph.Core.RoutingFeedbackInfo,System.Threading.CancellationToken)">
            <summary>
            Provides feedback for a routing decision to improve future routing.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.NodeEmbedding">
            <summary>
            Node embedding information for semantic routing.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingHistory">
            <summary>
            Routing decision history entry.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingFeedback">
            <summary>
            Routing feedback information.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingFeedbackInfo">
            <summary>
            Individual feedback entry.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.RoutingFeedbackType">
            <summary>
            Types of routing feedback.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SemanticRoutingDetails">
            <summary>Strategy-specific details for semantic routing.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SimilarityRoutingDetails">
            <summary>Strategy-specific details for similarity routing.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ProbabilisticRoutingDetails">
            <summary>Strategy-specific details for probabilistic routing.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ContextualRoutingDetails">
            <summary>Strategy-specific details for contextual routing.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.FeedbackLearningDetails">
            <summary>Strategy-specific details for feedback learning routing.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SharedStateManager">
            <summary>
            Manages shared state between multiple agents in a coordinated execution environment.
            Provides thread-safe state synchronization, conflict resolution, and state versioning.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.#ctor(SemanticKernel.Graph.Core.SharedStateOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of SharedStateManager.
            </summary>
            <param name="options">Shared state configuration options</param>
            <param name="logger">Optional logger for state operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateManager.ActiveWorkflowCount">
            <summary>
            Gets the number of active workflow states.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateManager.RegisteredAgentCount">
            <summary>
            Gets the number of registered agent states.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SharedStateManager.Options">
            <summary>
            Gets the shared state configuration options.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.RegisterAgentAsync(SemanticKernel.Graph.Core.AgentInstance)">
            <summary>
            Registers an agent with the shared state manager.
            </summary>
            <param name="agent">Agent instance to register</param>
            <returns>Task representing the registration operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.UnregisterAgentAsync(System.String)">
            <summary>
            Unregisters an agent from the shared state manager.
            </summary>
            <param name="agentId">Agent identifier</param>
            <returns>Task representing the unregistration operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.InitializeWorkflowStateAsync(System.String,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Initializes shared state for a new workflow.
            </summary>
            <param name="workflowId">Workflow identifier</param>
            <param name="initialArguments">Initial kernel arguments</param>
            <returns>Task representing the initialization operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.GetSharedStateAsync(System.String)">
            <summary>
            Gets the current shared state for a workflow.
            </summary>
            <param name="workflowId">Workflow identifier</param>
            <returns>Current shared state</returns>
            <exception cref="T:System.ArgumentException">Thrown when workflowId is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when workflow not found</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.UpdateSharedStateAsync(System.String,System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Updates the shared state with changes from an agent.
            </summary>
            <param name="workflowId">Workflow identifier</param>
            <param name="agentId">Agent identifier</param>
            <param name="updatedState">Updated state from the agent</param>
            <returns>Task representing the update operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.ResolveConflictsAsync(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState,System.String)">
            <summary>
            Resolves conflicts between current shared state and agent updates.
            </summary>
            <param name="currentState">Current shared state</param>
            <param name="agentState">Updated state from agent</param>
            <param name="agentId">Agent identifier</param>
            <returns>Resolved state</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.MergeStatesAsync(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Merges two states intelligently, combining compatible changes.
            </summary>
            <param name="currentState">Current state</param>
            <param name="agentState">Agent state</param>
            <returns>Merged state</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.ResolveByAgentPriorityAsync(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState,System.String)">
            <summary>
            Resolves conflicts based on agent priority.
            </summary>
            <param name="currentState">Current state</param>
            <param name="agentState">Agent state</param>
            <param name="agentId">Agent identifier</param>
            <returns>Resolved state</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.PerformCleanup(System.Object)">
            <summary>
            Performs periodic cleanup of expired workflow states.
            </summary>
            <param name="state">Timer state (unused)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.SharedStateManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SubgraphIsolationMode">
            <summary>
            Defines how a subgraph receives and returns state with respect to the parent graph.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.SubgraphIsolationMode.SharedState">
            <summary>
            Subgraph shares the same <see cref="T:SemanticKernel.Graph.State.GraphState"/>/arguments instance with the parent.
            Any changes are immediately visible to the parent (no merge step).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.SubgraphIsolationMode.IsolatedClone">
            <summary>
            Subgraph receives a deep clone of the parent's state and arguments.
            When it finishes, selected values or a full merge are applied back to the parent.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.SubgraphIsolationMode.ScopedPrefix">
            <summary>
            Subgraph runs with a scoped view of the state using a prefix namespace.
            Only values under the specified prefix are exposed; on completion they are written back with the same prefix.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.SubgraphConfiguration">
            <summary>
            Configuration for executing a subgraph as a node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SubgraphConfiguration.InputMappings">
            <summary>
            Maps parent state keys to child keys before subgraph execution.
            If empty, no explicit mapping is applied (behavior depends on <see cref="P:SemanticKernel.Graph.Core.SubgraphConfiguration.IsolationMode"/>).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SubgraphConfiguration.OutputMappings">
            <summary>
            Maps child state keys to parent keys after subgraph completion.
            If empty, full-state merge may be applied depending on <see cref="P:SemanticKernel.Graph.Core.SubgraphConfiguration.IsolationMode"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SubgraphConfiguration.IsolationMode">
            <summary>
            Isolation strategy for the subgraph's state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SubgraphConfiguration.MergeConflictPolicy">
            <summary>
            Conflict policy used when merging child state into the parent.
            Only used when a merge is required (e.g., <see cref="F:SemanticKernel.Graph.Core.SubgraphIsolationMode.IsolatedClone"/>).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SubgraphConfiguration.ScopedPrefix">
            <summary>
            Optional namespace/prefix used when <see cref="P:SemanticKernel.Graph.Core.SubgraphConfiguration.IsolationMode"/> is <see cref="F:SemanticKernel.Graph.Core.SubgraphIsolationMode.ScopedPrefix"/>.
            Example: "invoice." will scope values like invoice.total, invoice.items, etc.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.SubgraphConfiguration.StartNodeId">
            <summary>
            Optional explicit start node ID for the subgraph.
            If not provided, the subgraph's configured start node is used.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.TemplateConditionalEdge">
            <summary>
            Advanced conditional edge that uses template-based evaluation for routing decisions.
            Supports dynamic conditions based on state content and fallback mechanisms.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.#ctor(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,System.String,SemanticKernel.Graph.Core.TemplateEdgeOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.TemplateConditionalEdge})">
            <summary>
            Initializes a new instance of TemplateConditionalEdge.
            </summary>
            <param name="sourceNode">Source node of the edge</param>
            <param name="targetNode">Target node of the edge</param>
            <param name="conditionTemplate">Template string for condition evaluation</param>
            <param name="templateEngine">Template engine for rendering</param>
            <param name="name">Optional name for the edge</param>
            <param name="options">Optional edge configuration options</param>
            <param name="logger">Optional logger instance</param>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are null</exception>
            <exception cref="T:System.ArgumentException">Thrown when conditionTemplate is null or empty</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.BaseEdge">
            <summary>
            Gets the underlying conditional edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.EdgeId">
            <summary>
            Gets the edge ID from the base edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.Name">
            <summary>
            Gets the edge name from the base edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.SourceNode">
            <summary>
            Gets the source node from the base edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.TargetNode">
            <summary>
            Gets the target node from the base edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.ConditionTemplate">
            <summary>
            Gets the condition template used by this edge.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.EvaluationCount">
            <summary>
            Gets the number of times this condition has been evaluated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.AverageEvaluationTime">
            <summary>
            Gets the average evaluation time in milliseconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.CacheHitRatio">
            <summary>
            Gets the cache hit ratio for this edge's evaluations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.EvaluateCondition(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Evaluates the template condition with enhanced error handling and caching.
            </summary>
            <param name="graphState">Graph state to evaluate against</param>
            <returns>True if the condition is met</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when graphState is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.EvaluateCondition(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Evaluates the condition using kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments to check against</param>
            <returns>True if the condition is met</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.TraversalCount">
            <summary>
            Gets the number of times this edge has been traversed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.LastTraversedAt">
            <summary>
            Gets the timestamp of the last traversal (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateConditionalEdge.HasBeenTraversed">
            <summary>
            Indicates whether this edge has ever been traversed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.ClearCache">
            <summary>
            Clears the evaluation cache for this edge.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.CreateEvaluationSummary">
            <summary>
            Creates a metrics summary for this edge.
            </summary>
            <returns>Formatted metrics summary</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.CreateTemplateCondition(System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.TemplateConditionalEdge})">
            <summary>
            Creates the template-based condition function.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.EvaluateTemplateConditionAsync(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Evaluates the template condition asynchronously.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.ParseBooleanResult(System.String)">
            <summary>
            Parses the template result as a boolean value.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.CreateCacheKey(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates a cache key for the current graph state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.ApplyFallbackStrategy(SemanticKernel.Graph.State.GraphState,System.Exception)">
            <summary>
            Applies fallback strategy when template evaluation fails.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.TemplateConditionalEdge.UpdateEvaluationMetrics(System.Double)">
            <summary>
            Updates evaluation metrics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.TemplateEdgeOptions">
            <summary>
            Configuration options for template-based conditional edges.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateEdgeOptions.EnableCaching">
            <summary>
            Gets or sets whether evaluation result caching is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateEdgeOptions.MaxCacheSize">
            <summary>
            Gets or sets the maximum number of cached evaluation results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.TemplateEdgeOptions.FallbackStrategy">
            <summary>
            Gets or sets the fallback strategy when template evaluation fails.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.TemplateFallbackStrategy">
            <summary>
            Defines fallback strategies for template evaluation failures.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TemplateFallbackStrategy.AlwaysTrue">
            <summary>
            Always return true when template evaluation fails.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TemplateFallbackStrategy.AlwaysFalse">
            <summary>
            Always return false when template evaluation fails.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TemplateFallbackStrategy.BaseCondition">
            <summary>
            Fall back to the base condition evaluation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Core.TemplateFallbackStrategy.ThrowException">
            <summary>
            Throw an exception when template evaluation fails.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphPrimitiveType">
            <summary>
            Primitive types supported by graph parameter schemas.
            Maps loosely to common JSON/.NET primitives while allowing <see cref="F:SemanticKernel.Graph.Core.GraphPrimitiveType.Any"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphType">
            <summary>
            Describes a graph parameter type using either a primitive or a .NET runtime type for stricter validation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphType.FromPrimitive(SemanticKernel.Graph.Core.GraphPrimitiveType)">
            <summary>
            Creates a <see cref="T:SemanticKernel.Graph.Core.GraphType"/> from a primitive classification.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphType.FromDotNetType(System.Type)">
            <summary>
            Creates a <see cref="T:SemanticKernel.Graph.Core.GraphType"/> from a .NET runtime type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphType.IsValueCompatible(System.Object)">
            <summary>
            Determines if a provided value is compatible with this graph type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphType.IsAssignableTo(SemanticKernel.Graph.Core.GraphType)">
            <summary>
            Checks if this type can be assigned to another schema type (compatibility relation).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphParameterSchema">
            <summary>
            Describes a single input or output parameter of a node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphParameterSchema.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphParameterSchema.Description">
            <summary>
            Gets the parameter description.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphParameterSchema.Required">
            <summary>
            Gets a value indicating whether the parameter is required.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphParameterSchema.Type">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.GraphIOSchema">
            <summary>
            Defines the typed input/output schema for a node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphIOSchema.Inputs">
            <summary>
            Gets input parameters keyed by name (case-insensitive).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.GraphIOSchema.Outputs">
            <summary>
            Gets output parameters keyed by name (case-insensitive).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphIOSchema.TryGetInput(System.String,SemanticKernel.Graph.Core.GraphParameterSchema@)">
            <summary>
            Attempts to get an input parameter schema by name (case-insensitive).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.GraphIOSchema.TryGetOutput(System.String,SemanticKernel.Graph.Core.GraphParameterSchema@)">
            <summary>
            Attempts to get an output parameter schema by name (case-insensitive).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.ITypedSchemaNode">
            <summary>
            Optional interface for nodes that expose typed input/output schemas.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ITypedSchemaNode.GetInputSchema">
            <summary>
            Returns the input schema describing required/optional inputs.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.ITypedSchemaNode.GetOutputSchema">
            <summary>
            Returns the output schema describing values produced by the node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WebApiHumanInteractionChannel">
            <summary>
            Human interaction channel that exposes requests via a backing store for consumption by a Web API host.
            This channel does not perform HTTP itself; instead, it cooperates with <see cref="T:SemanticKernel.Graph.Core.IHumanInteractionStore"/>
            so that a REST adapter can list/submit/cancel requests.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.WebApiHumanInteractionChannel.RequestAvailable">
            <summary>
            Event raised when a new HITL request becomes available for web clients.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Core.WebApiHumanInteractionChannel.RequestCancelled">
            <summary>
            Event raised when a pending HITL request is cancelled.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WorkDistributor">
            <summary>
            Distributes work items among multiple agents based on configured strategies.
            Provides load balancing, capacity management, and work item prioritization.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.#ctor(SemanticKernel.Graph.Core.WorkDistributionOptions,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of WorkDistributor.
            </summary>
            <param name="options">Work distribution configuration options</param>
            <param name="logger">Optional logger for distribution operations</param>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributor.Options">
            <summary>
            Gets the work distribution configuration options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributor.PendingWorkItemCount">
            <summary>
            Gets the number of pending work items.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Core.WorkDistributor.TrackedAgentCount">
            <summary>
            Gets the number of agents with tracked capacity.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.DistributeWorkAsync(SemanticKernel.Graph.Core.MultiAgentWorkflow,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Distributes work items for a multi-agent workflow.
            </summary>
            <param name="workflow">Workflow definition</param>
            <param name="arguments">Initial arguments</param>
            <returns>Collection of work items assigned to agents</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.UpdateAgentCapacity(System.String,SemanticKernel.Graph.Core.AgentCapacity)">
            <summary>
            Updates the capacity information for an agent.
            </summary>
            <param name="agentId">Agent identifier</param>
            <param name="capacity">Current capacity information</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.DistributeRoundRobinAsync(SemanticKernel.Graph.Core.MultiAgentWorkflow,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Core.WorkItemCounter)">
            <summary>
            Distributes work items using round-robin strategy.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.DistributeLoadBasedAsync(SemanticKernel.Graph.Core.MultiAgentWorkflow,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Core.WorkItemCounter)">
            <summary>
            Distributes work items based on current agent load.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.DistributeRoleBasedAsync(SemanticKernel.Graph.Core.MultiAgentWorkflow,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Core.WorkItemCounter)">
            <summary>
            Distributes work items based on agent roles and task compatibility.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.DistributeCapacityBasedAsync(SemanticKernel.Graph.Core.MultiAgentWorkflow,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Core.WorkItemCounter)">
            <summary>
            Distributes work items based on agent capacity and availability.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.IsAgentCompatibleWithTask(System.String,SemanticKernel.Graph.Core.WorkflowTask)">
            <summary>
            Checks if an agent is compatible with a specific task.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.OrderTasksByDependencies(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.WorkflowTask})">
            <summary>
            Topologically orders tasks based on their dependencies. Falls back to input order on cycles.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkDistributor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WorkItemCounter">
            <summary>
            Helper class for generating sequential work item IDs in async methods.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkItemCounter.Next">
            <summary>
            Gets the next work item ID.
            </summary>
            <returns>Next sequential ID</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Core.WorkflowValidator">
            <summary>
            Validates multi-agent workflows for structural integrity, capability compatibility,
            and resource configuration sanity before execution.
            </summary>
            <remarks>
            This validator performs non-throwing checks and aggregates issues into a <see cref="T:SemanticKernel.Graph.State.ValidationResult"/>.
            It can be used prior to distribution/execution to catch problems early such as:
            - Invalid or cyclic task dependencies
            - Tasks requiring capabilities not provided by any required agent
            - Missing required agents
            - Unsound resource governance configuration values
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkflowValidator.#ctor(SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Core.WorkflowValidator"/>.
            </summary>
            <param name="logger">Optional logger for validation diagnostics.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Core.WorkflowValidator.Validate(SemanticKernel.Graph.Core.MultiAgentWorkflow,System.Collections.Generic.IReadOnlyDictionary{System.String,SemanticKernel.Graph.Core.AgentRole},System.Collections.Generic.IReadOnlyDictionary{System.String,SemanticKernel.Graph.Core.AgentCapacity},SemanticKernel.Graph.Core.GraphResourceOptions)">
            <summary>
            Validates the supplied workflow.
            </summary>
            <param name="workflow">Workflow to validate.</param>
            <param name="agentRoles">Optional registry mapping agentId to <see cref="T:SemanticKernel.Graph.Core.AgentRole"/> for capability checks.</param>
            <param name="agentCapacities">Optional registry mapping agentId to <see cref="T:SemanticKernel.Graph.Core.AgentCapacity"/> for capacity sanity checks.</param>
            <param name="resourceOptions">Optional resource governance options to validate.</param>
            <returns>Aggregated <see cref="T:SemanticKernel.Graph.State.ValidationResult"/> with errors and warnings.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.DebugExecutionMode">
            <summary>
            Defines the different modes of graph execution debugging.
            Determines how the debugger controls execution flow.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugExecutionMode.Normal">
            <summary>
            Normal execution without debugging intervention.
            Executes the entire graph without pausing.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugExecutionMode.StepOver">
            <summary>
            Step-over mode: Execute current node and pause at next node.
            Does not enter into subgraph or nested execution details.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugExecutionMode.StepInto">
            <summary>
            Step-into mode: Execute current node and pause at first child operation.
            Enters into subgraph execution if available (e.g., SubgraphGraphNode).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugExecutionMode.StepOut">
            <summary>
            Step-out mode: Continue execution until exiting current context.
            Useful for getting out of subgraph or nested execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugExecutionMode.Continue">
            <summary>
            Continue mode: Resume normal execution until next breakpoint.
            Ignores step operations and runs to next breakpoint or completion.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugExecutionMode.Paused">
            <summary>
            Breakpoint mode: Execution is paused at a breakpoint.
            Waiting for user input to determine next action.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.DebugEventType">
            <summary>
            Defines the different types of debug events that can occur during execution.
            Used for event handling and debugging notifications.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.SessionStarted">
            <summary>
            Debug session has started.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.SessionEnded">
            <summary>
            Debug session has ended.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.BreakpointHit">
            <summary>
            Execution paused due to breakpoint.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.StepCompleted">
            <summary>
            Execution paused due to step operation.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.NodeExecutionStarted">
            <summary>
            Node execution started.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.NodeExecutionCompleted">
            <summary>
            Node execution completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.NodeExecutionFailed">
            <summary>
            Node execution failed with error.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.StateModified">
            <summary>
            Graph state has been modified.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.VariableChanged">
            <summary>
            Variable value has changed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Debug.DebugEventType.FlowChanged">
            <summary>
            Execution flow has changed direction.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.DebugBreakpoint">
            <summary>
            Represents a debug breakpoint with enhanced debugging capabilities.
            Extends the basic conditional breakpoint for debug session management.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugBreakpoint.#ctor(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of DebugBreakpoint.
            </summary>
            <param name="nodeId">ID of the node to break at</param>
            <param name="condition">Optional condition for the breakpoint</param>
            <param name="description">Optional description</param>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null, empty, or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugBreakpoint.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Debug.DebugBreakpoint"/> using an expression string.
            The expression is evaluated against the current <see cref="T:SemanticKernel.Graph.State.GraphState"/> using
            <see cref="T:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator"/>. The expression can
            reference variables from <see cref="P:SemanticKernel.Graph.State.GraphState.KernelArguments"/> using templates like {{var}} and
            supports logical and comparison operators.
            </summary>
            <param name="nodeId">ID of the node to break at</param>
            <param name="expression">Conditional expression to evaluate for triggering the breakpoint</param>
            <param name="description">Optional description</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="nodeId"/> or <paramref name="expression"/> is null/empty</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.BreakpointId">
            <summary>
            Gets the unique identifier for this breakpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.NodeId">
            <summary>
            Gets the node ID this breakpoint applies to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.Condition">
            <summary>
            Gets the optional condition for this breakpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.Expression">
            <summary>
            Gets the optional expression that will be evaluated to determine if the breakpoint should trigger.
            When provided, the expression is evaluated using <see cref="T:SemanticKernel.Graph.Core.ConditionalExpressionEvaluator"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.Description">
            <summary>
            Gets the description of this breakpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.IsEnabled">
            <summary>
            Gets or sets whether this breakpoint is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.HitCount">
            <summary>
            Gets the number of times this breakpoint has been hit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.CreatedAt">
            <summary>
            Gets the timestamp when this breakpoint was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.LastHitAt">
            <summary>
            Gets the timestamp when this breakpoint was last hit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.MaxHitCount">
            <summary>
            Gets the optional maximum number of hits after which this breakpoint expires and should be auto-removed.
            When null, the breakpoint does not expire based on hit count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.IsExpired">
            <summary>
            Indicates whether this breakpoint has reached its hit limit and should be removed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.TriggerOnChange">
            <summary>
            When set, this breakpoint triggers when the specified variable value changes between execution steps.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.VariableName">
            <summary>
            The variable name to watch for changes when <see cref="P:SemanticKernel.Graph.Debug.DebugBreakpoint.TriggerOnChange"/> is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugBreakpoint.LastObservedValue">
            <summary>
            Stores the last observed value of the watched variable to support change detection.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugBreakpoint.CreateDataBreakpoint(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a data-change breakpoint that pauses when a variable value changes.
            </summary>
            <param name="variableName">Variable to watch</param>
            <param name="description">Optional description</param>
            <param name="maxHitCount">Optional maximum number of hits before auto-removal</param>
            <returns>Configured data-change breakpoint</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugBreakpoint.ShouldTrigger(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Checks if this breakpoint should trigger for the given state.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>True if the breakpoint should trigger</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugBreakpoint.RecordHit">
            <summary>
            Records a hit on this breakpoint.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugBreakpoint.DidWatchedVariableChange(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState,System.Object@,System.Object@)">
            <summary>
            Determines whether a watched variable changed between two states.
            </summary>
            <param name="stateBefore">State before node execution</param>
            <param name="stateAfter">State after node execution</param>
            <param name="oldValue">Outputs the previous value</param>
            <param name="newValue">Outputs the new value</param>
            <returns>True if change detected for watched variable</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.DebugExecutionStep">
            <summary>
            Represents a single step in the debug execution history.
            Captures the state and context at each execution point.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugExecutionStep.#ctor(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.FunctionResult,System.Exception)">
            <summary>
            Initializes a new instance of DebugExecutionStep.
            </summary>
            <param name="node">Node that was executed</param>
            <param name="stateBefore">State before node execution</param>
            <param name="stateAfter">State after node execution (if successful)</param>
            <param name="result">Execution result (if successful)</param>
            <param name="error">Error that occurred (if failed)</param>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.StepId">
            <summary>
            Gets the unique identifier for this execution step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.Node">
            <summary>
            Gets the node that was executed in this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.StateBefore">
            <summary>
            Gets the graph state before node execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.StateAfter">
            <summary>
            Gets the graph state after node execution (if completed successfully).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.Result">
            <summary>
            Gets the execution result (if completed successfully).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.Error">
            <summary>
            Gets the error that occurred (if execution failed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.StartTime">
            <summary>
            Gets the timestamp when step execution started.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.EndTime">
            <summary>
            Gets the timestamp when step execution ended.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.Duration">
            <summary>
            Gets the execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.IsCompleted">
            <summary>
            Gets whether this step has completed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.IsSuccess">
            <summary>
            Gets whether this step completed successfully.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugExecutionStep.IsFailed">
            <summary>
            Gets whether this step failed with an error.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugExecutionStep.MarkCompleted(SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Marks this step as completed successfully.
            </summary>
            <param name="stateAfter">Final state after execution</param>
            <param name="result">Execution result</param>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugExecutionStep.MarkFailed(System.Exception)">
            <summary>
            Marks this step as failed.
            </summary>
            <param name="error">Error that occurred</param>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.GraphVisualizationData">
            <summary>
            Contains data for graph visualization during debugging.
            Provides structural and execution state information for visual representation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.GraphVisualizationData.#ctor(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode},System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Debug.GraphEdgeInfo},SemanticKernel.Graph.Core.IGraphNode,System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Initializes a new instance of GraphVisualizationData.
            </summary>
            <param name="nodes">Graph nodes</param>
            <param name="edges">Graph edges</param>
            <param name="currentNode">Currently executing/paused node</param>
            <param name="executionPath">Path of executed nodes</param>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.GraphVisualizationData.GeneratedAt">
            <summary>
            Gets the timestamp when this visualization was generated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.GraphVisualizationData.Nodes">
            <summary>
            Gets all nodes in the graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.GraphVisualizationData.Edges">
            <summary>
            Gets all edges in the graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.GraphVisualizationData.CurrentNode">
            <summary>
            Gets the currently executing or paused node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.GraphVisualizationData.ExecutionPath">
            <summary>
            Gets the execution path taken so far.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.GraphVisualizationData.ToMermaidDiagram(System.Boolean)">
            <summary>
            Generates a Mermaid diagram representation of the graph.
            </summary>
            <param name="includeExecutionPath">Whether to highlight execution path</param>
            <returns>Mermaid diagram string</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.GraphVisualizationData.ToBasicMermaidDiagram(System.Boolean)">
            <summary>
            Generates a basic Mermaid diagram representation of the graph (legacy method).
            Use ToMermaidDiagram() for enhanced functionality.
            </summary>
            <param name="includeExecutionPath">Whether to highlight execution path</param>
            <returns>Basic Mermaid diagram string</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.GraphVisualizationData.GetBasicMermaidNodeShape(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Gets the basic Mermaid node shape for a given node type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.GraphVisualizationData.EscapeBasicMermaidLabel(System.String)">
            <summary>
            Escapes special characters for basic Mermaid format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.GraphVisualizationData.CreateSimplifiedView">
            <summary>
            Creates a simplified view with just node and edge information.
            </summary>
            <returns>Simplified visualization data</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.GraphEdgeInfo">
            <summary>
            Represents information about an edge in the graph for visualization purposes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.GraphEdgeInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of GraphEdgeInfo.
            </summary>
            <param name="fromNodeId">Source node ID</param>
            <param name="toNodeId">Target node ID</param>
            <param name="label">Optional edge label</param>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.GraphEdgeInfo.FromNodeId">
            <summary>
            Gets the source node ID.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.GraphEdgeInfo.ToNodeId">
            <summary>
            Gets the target node ID.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.GraphEdgeInfo.Label">
            <summary>
            Gets the optional edge label.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.DebugSession">
            <summary>
            Implements a comprehensive debugging session for graph execution.
            Provides step-by-step execution control, breakpoint management, and state inspection.
            Integrates with the existing GraphExecutor and GraphExecutionContext infrastructure.
            </summary>
            <remarks>
            This debug session provides:
            - Step-by-step execution control (step-over, step-into, step-out)
            - Conditional breakpoints with hit counting
            - Complete state inspection and variable manipulation
            - Execution history tracking with replay capabilities
            - Graph visualization for debugging context
            - Event-driven debugging notifications
            - Thread-safe operations for concurrent debugging scenarios
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.#ctor(SemanticKernel.Graph.Integration.IGraphExecutor,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Initializes a new instance of DebugSession.
            </summary>
            <param name="graphExecutor">Graph executor to debug</param>
            <param name="executionContext">Execution context being debugged</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameters are null</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugSession.SessionId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugSession.ExecutionContext">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugSession.CurrentMode">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugSession.IsActive">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugSession.IsPaused">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugSession.PausedAtNode">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugSession.CurrentState">
            <inheritdoc />
        </member>
        <member name="E:SemanticKernel.Graph.Debug.DebugSession.DebugEvent">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.StartAsync(SemanticKernel.Graph.Debug.DebugExecutionMode)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.PauseAsync">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.ResumeAsync(SemanticKernel.Graph.Debug.DebugExecutionMode)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.StepAsync">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.AddBreakpoint(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.AddBreakpoint(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.AddBreakpoint(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.Int32,System.String)">
            <summary>
            Adds a breakpoint with an automatic expiration after a maximum number of hits.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.AddBreakpoint(System.String,System.String,System.Int32,System.String)">
            <summary>
            Adds an expression-based breakpoint that auto-expires after a maximum number of hits.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.AddDataBreakpoint(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a data breakpoint that triggers when the specified variable changes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.RemoveBreakpoint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.GetBreakpoints">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.ClearBreakpoints">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.GetCurrentVariables">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.GetVariable``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.SetVariable(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.GetExecutionHistory">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.GetAvailableNextNodes">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.GenerateVisualization(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.ExportSessionData(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.ShouldPauseAtNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Checks if execution should pause at the current node.
            Called by the debug-aware graph executor.
            </summary>
            <param name="node">Node about to be executed</param>
            <returns>True if execution should pause</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.RecordNodeExecutionStart(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Records the start of node execution for debugging history.
            </summary>
            <param name="node">Node being executed</param>
            <param name="stateBefore">State before execution</param>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.RecordNodeExecutionComplete(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Records the completion of node execution.
            </summary>
            <param name="node">Node that completed</param>
            <param name="stateAfter">State after execution</param>
            <param name="result">Execution result</param>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.RecordNodeExecutionFailure(SemanticKernel.Graph.Core.IGraphNode,System.Exception)">
            <summary>
            Records the failure of node execution.
            </summary>
            <param name="node">Node that failed</param>
            <param name="error">Error that occurred</param>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.WaitForContinuationAsync(System.Threading.CancellationToken)">
            <summary>
            Waits for debug continuation if execution is paused.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugSession.Dispose">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Debug.ExecutionReplay">
            <summary>
            Provides replay capabilities for debugging graph executions.
            Allows step-by-step analysis of completed or failed executions.
            </summary>
            <remarks>
            The execution replay system provides:
            - Complete execution history reconstruction
            - State snapshots at each execution step
            - Interactive replay with pause/resume capabilities
            - What-if analysis by modifying variables at any point
            - Performance analysis across different execution paths
            - Export/import capabilities for sharing debug sessions
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.#ctor(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Debug.DebugExecutionStep},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},SemanticKernel.Graph.Execution.GraphExecutionStatus)">
            <summary>
            Initializes a new instance of ExecutionReplay.
            </summary>
            <param name="executionHistory">Complete execution history</param>
            <param name="initialVariables">Initial variables at start of execution</param>
            <param name="executionId">Original execution ID</param>
            <param name="startTime">Original execution start time</param>
            <param name="endTime">Original execution end time</param>
            <param name="status">Original execution status</param>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.ReplayId">
            <summary>
            Gets the unique identifier for this replay session.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.OriginalExecutionId">
            <summary>
            Gets the original execution ID that this replay is based on.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.CreatedAt">
            <summary>
            Gets when this replay session was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.TotalSteps">
            <summary>
            Gets the total number of steps in the execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.CurrentStepIndex">
            <summary>
            Gets the current step index (0-based).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.CurrentStep">
            <summary>
            Gets the current execution step (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.IsReplaying">
            <summary>
            Gets whether the replay is currently in progress.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.IsAtBeginning">
            <summary>
            Gets whether the replay is at the beginning.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.IsAtEnd">
            <summary>
            Gets whether the replay is at the end.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.OriginalDuration">
            <summary>
            Gets the original execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.ExecutionReplay.OriginalStatus">
            <summary>
            Gets the original execution status.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Debug.ExecutionReplay.PositionChanged">
            <summary>
            Raised when the replay position changes.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Debug.ExecutionReplay.StateChanged">
            <summary>
            Raised when the replay starts or stops.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.Start">
            <summary>
            Starts the replay from the beginning.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.Stop">
            <summary>
            Stops the replay.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.StepForward">
            <summary>
            Moves to the next step in the replay.
            </summary>
            <returns>True if moved successfully, false if already at end</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.StepBackward">
            <summary>
            Moves to the previous step in the replay.
            </summary>
            <returns>True if moved successfully, false if already at beginning</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.JumpToStep(System.Int32)">
            <summary>
            Jumps to a specific step in the replay.
            </summary>
            <param name="stepIndex">Step index to jump to (0-based)</param>
            <returns>True if jumped successfully</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.JumpToNode(System.String)">
            <summary>
            Jumps to the first occurrence of a specific node.
            </summary>
            <param name="nodeId">Node ID to find</param>
            <returns>True if node was found and jumped to</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.Reset">
            <summary>
            Resets the replay to the beginning.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.GetCurrentState">
            <summary>
            Gets the state at the current replay position.
            </summary>
            <returns>Graph state snapshot or null if no current step</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.GetCurrentVariables">
            <summary>
            Gets the variables at the current replay position.
            </summary>
            <returns>Dictionary of variable names and values</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.CreateWhatIfState(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a what-if state by cloning the state at the current position and applying the provided variable overrides.
            </summary>
            <param name="variableOverrides">Variables to override in the cloned state</param>
            <returns>Cloned and mutated <see cref="T:SemanticKernel.Graph.State.GraphState"/></returns>
            <remarks>
            This method does not mutate the original execution history. It is safe to call repeatedly.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.GetNextNodesWhatIf(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Computes the next possible nodes from the current step using what-if variable overrides.
            </summary>
            <param name="variableOverrides">Variables to apply on top of the current state for routing decisions.</param>
            <returns>List of next nodes as determined by the current node's routing logic.</returns>
            <remarks>
            This performs a routing-only simulation based on <see cref="M:SemanticKernel.Graph.Core.IGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)"/>. It does not execute nodes.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.GetNextNodesParallelWhatIf(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}}})">
            <summary>
            Computes next nodes for multiple what-if scenarios in parallel from the current position.
            </summary>
            <param name="scenarios">Collection of scenarios expressed as (ScenarioId, VariableOverrides)</param>
            <returns>Mapping of ScenarioId to the computed next nodes.</returns>
            <remarks>
            This uses routing-only simulation. It does not execute any node logic.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.GetExecutionPathToCurrent">
            <summary>
            Gets the execution path up to the current position.
            </summary>
            <returns>List of nodes executed up to current position</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.GetStepsForNode(System.String)">
            <summary>
            Gets all steps that executed a specific node.
            </summary>
            <param name="nodeId">Node ID to search for</param>
            <returns>Collection of steps that executed the node</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.GetPerformanceAnalysis">
            <summary>
            Gets performance statistics for the execution.
            </summary>
            <returns>Performance analysis data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.ExportToJson(System.Boolean)">
            <summary>
            Exports the replay data to JSON.
            </summary>
            <param name="includeStates">Whether to include full state data</param>
            <returns>JSON representation of the replay</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.ExportToJson(System.Boolean,SemanticKernel.Graph.Integration.SensitiveDataPolicy,SemanticKernel.Graph.Extensions.ReplaySecurityOptions)">
            <summary>
            Exports the replay data to JSON, with optional sanitization and security settings.
            </summary>
            <param name="includeStates">Whether to include full state data</param>
            <param name="sanitizationPolicy">Optional sanitization policy; when null, defaults will be used</param>
            <param name="securityOptions">Optional security options for hashing/encryption</param>
            <returns>JSON representation (secure envelope when security is enabled)</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.ImportFromJson(System.String)">
            <summary>
            Creates a replay from exported JSON data.
            </summary>
            <param name="jsonData">JSON data from ExportToJson</param>
            <returns>Reconstructed ExecutionReplay</returns>
            <exception cref="T:System.ArgumentException">Thrown when JSON data is invalid</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.ExecutionReplay.ImportFromJson(System.String,SemanticKernel.Graph.Extensions.ReplaySecurityOptions)">
            <summary>
            Creates a replay from exported JSON data that may be secured (hashed/encrypted).
            If encryption is enabled in the envelope, a matching key must be supplied in <paramref name="securityOptions"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.ReplayPositionChangedEventArgs">
            <summary>
            Event arguments for replay position changes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.ReplayStateChangedEventArgs">
            <summary>
            Event arguments for replay state changes.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.ExecutionPerformanceAnalysis">
            <summary>
            Contains performance analysis data for an execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.NodePerformanceStats">
            <summary>
            Contains performance statistics for a specific node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.IDebugSession">
            <summary>
            Represents a debugging session for graph execution.
            Provides comprehensive debugging capabilities including breakpoints, stepping, and state inspection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.IDebugSession.SessionId">
            <summary>
            Gets the unique identifier for this debug session.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.IDebugSession.ExecutionContext">
            <summary>
            Gets the execution context being debugged.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.IDebugSession.CurrentMode">
            <summary>
            Gets the current debug execution mode.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.IDebugSession.IsActive">
            <summary>
            Gets whether the session is currently active.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.IDebugSession.IsPaused">
            <summary>
            Gets whether execution is currently paused.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.IDebugSession.PausedAtNode">
            <summary>
            Gets the node where execution is currently paused (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.IDebugSession.CurrentState">
            <summary>
            Gets the current graph state snapshot.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Debug.IDebugSession.DebugEvent">
            <summary>
            Raised when a debug event occurs during execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.StartAsync(SemanticKernel.Graph.Debug.DebugExecutionMode)">
            <summary>
            Starts the debug session.
            </summary>
            <param name="initialMode">Initial debug mode</param>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.PauseAsync">
            <summary>
            Pauses execution at the current node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.ResumeAsync(SemanticKernel.Graph.Debug.DebugExecutionMode)">
            <summary>
            Resumes execution with the specified mode.
            </summary>
            <param name="mode">Execution mode to resume with</param>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.StopAsync">
            <summary>
            Stops the debug session.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.StepAsync">
            <summary>
            Executes a single step based on current mode.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.AddBreakpoint(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Adds a breakpoint at the specified node.
            </summary>
            <param name="nodeId">ID of the node to break at</param>
            <param name="condition">Optional condition for the breakpoint</param>
            <param name="description">Optional description</param>
            <returns>Breakpoint identifier</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.AddBreakpoint(System.String,System.String,System.String)">
            <summary>
            Adds an expression-based breakpoint at the specified node.
            The expression is evaluated using the conditional expression evaluator and can reference
            variables via templates like {{var}} along with logical/comparison operators.
            </summary>
            <param name="nodeId">ID of the node to break at</param>
            <param name="expression">Expression to evaluate for triggering the breakpoint</param>
            <param name="description">Optional description</param>
            <returns>Breakpoint identifier</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.AddBreakpoint(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.Int32,System.String)">
            <summary>
            Adds a breakpoint that automatically expires after it is hit a maximum number of times.
            </summary>
            <param name="nodeId">ID of the node to break at</param>
            <param name="condition">Optional condition for the breakpoint</param>
            <param name="maxHitCount">Maximum number of hits before auto-removal (must be > 0)</param>
            <param name="description">Optional description</param>
            <returns>Breakpoint identifier</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.AddBreakpoint(System.String,System.String,System.Int32,System.String)">
            <summary>
            Adds an expression-based breakpoint that automatically expires after the specified number of hits.
            </summary>
            <param name="nodeId">ID of the node to break at</param>
            <param name="expression">Expression to evaluate for triggering the breakpoint</param>
            <param name="maxHitCount">Maximum number of hits before auto-removal (must be > 0)</param>
            <param name="description">Optional description</param>
            <returns>Breakpoint identifier</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.AddDataBreakpoint(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a data breakpoint that pauses when the specified variable value changes between node executions.
            </summary>
            <param name="variableName">Name of the variable to watch</param>
            <param name="description">Optional description</param>
            <param name="maxHitCount">Optional maximum number of hits before auto-removal</param>
            <returns>Breakpoint identifier</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.RemoveBreakpoint(System.String)">
            <summary>
            Removes a breakpoint.
            </summary>
            <param name="breakpointId">ID of the breakpoint to remove</param>
            <returns>True if removed successfully</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.GetBreakpoints">
            <summary>
            Gets all active breakpoints.
            </summary>
            <returns>Collection of breakpoints</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.ClearBreakpoints">
            <summary>
            Clears all breakpoints.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.GetCurrentVariables">
            <summary>
            Gets the current values of all variables in the graph state.
            </summary>
            <returns>Dictionary of variable names and values</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.GetVariable``1(System.String)">
            <summary>
            Gets the value of a specific variable.
            </summary>
            <typeparam name="T">Expected variable type</typeparam>
            <param name="variableName">Name of the variable</param>
            <returns>Variable value or default if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.SetVariable(System.String,System.Object)">
            <summary>
            Sets the value of a variable during debugging.
            </summary>
            <param name="variableName">Name of the variable</param>
            <param name="value">New value</param>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.GetExecutionHistory">
            <summary>
            Gets the execution history up to current point.
            </summary>
            <returns>List of executed nodes with their states</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.GetAvailableNextNodes">
            <summary>
            Gets available next nodes from current position.
            </summary>
            <returns>Collection of possible next nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.GenerateVisualization(System.Boolean)">
            <summary>
            Generates a visualization of the current graph structure.
            </summary>
            <param name="highlightCurrent">Whether to highlight current node</param>
            <returns>Graph visualization data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.IDebugSession.ExportSessionData(System.Boolean)">
            <summary>
            Exports the current debug session data.
            </summary>
            <param name="includeHistory">Whether to include execution history</param>
            <returns>JSON representation of debug session</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Debug.DebugEventArgs">
            <summary>
            Provides data for debug events.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Debug.DebugEventArgs.#ctor(SemanticKernel.Graph.Debug.DebugEventType,SemanticKernel.Graph.Core.IGraphNode,System.String,System.Object)">
            <summary>
            Initializes a new instance of DebugEventArgs.
            </summary>
            <param name="eventType">Type of debug event</param>
            <param name="node">Node associated with the event (if any)</param>
            <param name="message">Event message</param>
            <param name="data">Additional event data</param>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugEventArgs.EventType">
            <summary>
            Gets the type of debug event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugEventArgs.Node">
            <summary>
            Gets the node associated with this event (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugEventArgs.Message">
            <summary>
            Gets the event message.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugEventArgs.Data">
            <summary>
            Gets additional event data.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Debug.DebugEventArgs.Timestamp">
            <summary>
            Gets the timestamp when the event occurred.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Execution.DeterministicWorkQueue">
            <summary>
            Deterministic, per-execution work queue for scheduling graph node executions.
            - Generates stable, monotonic work item IDs within an execution
            - Preserves deterministic ordering when enqueuing batches (sorted by NodeId)
            - Thread-safe operations for enqueue/dequeue
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.DeterministicWorkQueue.#ctor(System.String)">
            <summary>
            Initializes a new deterministic work queue bound to a specific execution.
            </summary>
            <param name="executionId">Stable execution identifier</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="executionId"/> is null or whitespace.</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.DeterministicWorkQueue.ExecutionId">
            <summary>
            Gets the associated execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.DeterministicWorkQueue.Count">
            <summary>
            Gets the number of items currently pending in the queue.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.DeterministicWorkQueue.OrderDeterministically(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Returns the input nodes ordered deterministically without mutating the queue state.
            This is useful for stable selection when not adopting a full queued scheduler yet.
            </summary>
            <param name="nodes">Nodes to order</param>
            <returns>Deterministically ordered nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.DeterministicWorkQueue.Enqueue(SemanticKernel.Graph.Core.IGraphNode,System.Int32)">
            <summary>
            Enqueues a single node for execution, assigning a stable, monotonic sequence number.
            </summary>
            <param name="node">Node to schedule</param>
            <param name="priority">Optional priority (reserved for future use)</param>
            <returns>The scheduled work item with stable identifier</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="node"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.DeterministicWorkQueue.EnqueueRange(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode},System.Int32)">
            <summary>
            Enqueues a batch of nodes in a deterministic order (sorted by NodeId, then Name),
            assigning stable, increasing sequence numbers.
            </summary>
            <param name="nodes">Nodes to schedule</param>
            <param name="priority">Optional priority applied to all items in the batch</param>
            <returns>Scheduled work items</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="nodes"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.DeterministicWorkQueue.TryDequeue(SemanticKernel.Graph.Execution.ScheduledNodeWorkItem@)">
            <summary>
            Attempts to dequeue the next scheduled work item.
            </summary>
            <param name="item">The dequeued item, if available</param>
            <returns>True if an item was dequeued</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.DeterministicWorkQueue.TryDequeueNode(SemanticKernel.Graph.Core.IGraphNode@)">
            <summary>
            Attempts to dequeue the next scheduled node directly.
            </summary>
            <param name="node">The dequeued <see cref="T:SemanticKernel.Graph.Core.IGraphNode"/>, if available.</param>
            <returns>True if a node was dequeued</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.DeterministicWorkQueue.Clear">
            <summary>
            Clears all pending items from the queue.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.DeterministicWorkQueue.TryStealFrom(SemanticKernel.Graph.Execution.DeterministicWorkQueue,System.Int32,System.Int32)">
            <summary>
            Attempts to steal up to <paramref name="maxItemsToSteal"/> items from a victim queue belonging to the same execution.
            Items are selected from the tail of the victim's queue to minimize disruption and are appended to this queue.
            Only items with <see cref="P:SemanticKernel.Graph.Execution.ScheduledNodeWorkItem.Priority"/> greater than or equal to <paramref name="minPriority"/> are eligible.
            The relative order among stolen items is preserved to maintain determinism.
            </summary>
            <param name="victim">The queue to steal work from. Must have the same <see cref="P:SemanticKernel.Graph.Execution.DeterministicWorkQueue.ExecutionId"/>.</param>
            <param name="maxItemsToSteal">Maximum number of items to steal. Must be greater than zero.</param>
            <param name="minPriority">Minimum priority threshold of items eligible for stealing.</param>
            <returns>The list of stolen items (may be empty).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="victim"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxItemsToSteal"/> is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when attempting to steal across different executions.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Execution.ScheduledNodeWorkItem">
            <summary>
            Represents a scheduled node work item with a stable identifier and sequencing metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.ScheduledNodeWorkItem.#ctor(System.String,System.String,System.Int64,SemanticKernel.Graph.Core.IGraphNode,System.Int32,System.DateTimeOffset)">
            <summary>
            Represents a scheduled node work item with a stable identifier and sequencing metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Execution.GraphExecutionContext">
            <summary>
            Maintains the execution context for a graph run.
            Tracks execution state, metrics, and provides coordination services.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.#ctor(Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.State.GraphState,System.Threading.CancellationToken,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of GraphExecutionContext.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="graphState">Initial graph state</param>
            <param name="cancellationToken">Cancellation token for the execution</param>
            <exception cref="T:System.ArgumentNullException">Thrown when kernel or graphState are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.#ctor(SemanticKernel.Graph.Integration.IKernelWrapper,SemanticKernel.Graph.State.GraphState,System.Threading.CancellationToken,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of GraphExecutionContext.
            </summary>
            <param name="kernelWrapper">Kernel wrapper instance</param>
            <param name="graphState">Initial graph state</param>
            <param name="cancellationToken">Cancellation token for the execution</param>
            <exception cref="T:System.ArgumentNullException">Thrown when kernelWrapper or graphState are null</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.ExecutionId">
            <summary>
            Gets the unique identifier for this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.ExecutionSeed">
            <summary>
            Gets the execution seed used to drive reproducible randomness.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.Random">
            <summary>
            Gets a process-local pseudo-random generator seeded for this execution.
            Consumers should prefer this over Random.Shared to ensure reproducibility.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.Kernel">
            <summary>
            Gets the semantic kernel instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.KernelWrapper">
            <summary>
            Gets the kernel wrapper instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.GraphState">
            <summary>
            Gets or sets the current graph state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.CancellationToken">
            <summary>
            Gets the cancellation token for this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.StartTime">
            <summary>
            Gets the execution start timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.EndTime">
            <summary>
            Gets the execution end timestamp (if completed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.Duration">
            <summary>
            Gets the total execution duration (if completed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.Status">
            <summary>
            Gets the current execution status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.ExecutionOptions">
            <summary>
            Gets the immutable per-execution configuration snapshot.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.IsPaused">
            <summary>
            Indicates whether the execution is currently paused.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.PauseReason">
            <summary>
            Optional human-readable reason for the current pause.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.CurrentNode">
            <summary>
            Gets the currently executing node (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.ExecutionPath">
            <summary>
            Gets the execution path taken so far (read-only).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.WorkQueue">
            <summary>
            Gets the deterministic work queue associated with this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.NodesExecuted">
            <summary>
            Gets the number of nodes executed so far.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.Error">
            <summary>
            Gets the error information (if the execution failed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.Result">
            <summary>
            Gets the final execution result (if completed successfully).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.IsCancelled">
            <summary>
            Indicates whether the execution has been cancelled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.IsCompleted">
            <summary>
            Indicates whether the execution has completed (successfully or with error).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionContext.IsRunning">
            <summary>
            Indicates whether the execution is currently running.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.MarkAsStarted(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Marks the execution as started.
            </summary>
            <param name="startingNode">The node where execution begins</param>
            <exception cref="T:System.ArgumentNullException">Thrown when startingNode is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when execution has already started</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.RecordNodeStarted(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Records that a node has started executing.
            </summary>
            <param name="node">Node that started executing</param>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.EnqueueNextNodes(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Enqueues next node candidates into the deterministic queue in a stable order.
            </summary>
            <param name="candidates">Next node candidates</param>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.RecordNodeCompleted(SemanticKernel.Graph.Core.IGraphNode,Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Records that a node has completed successfully.
            </summary>
            <param name="node">Node that completed</param>
            <param name="result">Execution result</param>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.RecordNodeFailed(SemanticKernel.Graph.Core.IGraphNode,System.Exception)">
            <summary>
            Records that a node has failed.
            </summary>
            <param name="node">Node that failed</param>
            <param name="exception">Exception that occurred</param>
            <exception cref="T:System.ArgumentNullException">Thrown when node or exception are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.MarkAsCompleted(Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Marks the entire execution as completed successfully.
            </summary>
            <param name="result">Final execution result</param>
            <exception cref="T:System.ArgumentNullException">Thrown when result is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when execution is not running</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.MarkAsFailed(System.Exception)">
            <summary>
            Marks the execution as failed.
            </summary>
            <param name="error">Error that caused the failure</param>
            <exception cref="T:System.ArgumentNullException">Thrown when error is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when execution is not running</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.MarkAsCancelled">
            <summary>
            Marks the execution as cancelled.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when execution cannot be cancelled</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.SetProperty(System.String,System.Object)">
            <summary>
            Sets a custom property for this execution context.
            </summary>
            <param name="key">Property key</param>
            <param name="value">Property value</param>
            <exception cref="T:System.ArgumentException">Thrown when key is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.GetProperty``1(System.String)">
            <summary>
            Gets a custom property from this execution context.
            </summary>
            <typeparam name="T">Expected property type</typeparam>
            <param name="key">Property key</param>
            <returns>Property value or default if not found</returns>
            <exception cref="T:System.ArgumentException">Thrown when key is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.RemoveProperty(System.String)">
            <summary>
            Removes a custom property from this execution context.
            </summary>
            <param name="key">Property key to remove</param>
            <returns>True if the property was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when key is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.HasProperty(System.String)">
            <summary>
            Checks if a custom property exists in this execution context.
            </summary>
            <param name="key">Property key</param>
            <returns>True if the property exists</returns>
            <exception cref="T:System.ArgumentException">Thrown when key is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.CreateSummary(System.Boolean)">
            <summary>
            Creates a summary of the execution context.
            </summary>
            <param name="includeExecutionPath">Whether to include the execution path details</param>
            <returns>Execution summary</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.ThrowIfCancellationRequested">
            <summary>
            Throws if the execution has been cancelled.
            </summary>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation was requested</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.Pause(System.String)">
            <summary>
            Requests a cooperative pause of the execution. The engine pauses at the next safe boundary.
            </summary>
            <param name="reason">Optional reason for diagnostics.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.Resume">
            <summary>
            Resumes execution after a pause.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.WaitIfPausedAsync(System.Threading.CancellationToken)">
            <summary>
            Awaits until the execution is resumed if it is currently paused.
            Safe to call frequently; returns immediately when not paused.
            </summary>
            <param name="cancellationToken">Cancellation token to abort waiting.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.WaitIfPaused(System.Threading.CancellationToken)">
            <summary>
            Blocks until resumed if currently paused. Returns immediately when not paused.
            </summary>
            <param name="cancellationToken">Cancellation token to abort waiting.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionContext.ToString">
            <summary>
            Returns a string representation of this execution context.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Execution.GraphExecutionStatus">
            <summary>
            Represents the possible execution statuses for a graph.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Execution.GraphExecutionStatus.NotStarted">
            <summary>
            Execution has not started yet.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Execution.GraphExecutionStatus.Running">
            <summary>
            Execution is currently running.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Execution.GraphExecutionStatus.Completed">
            <summary>
            Execution completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Execution.GraphExecutionStatus.Failed">
            <summary>
            Execution failed with an error.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Execution.GraphExecutionStatus.Cancelled">
            <summary>
            Execution was cancelled.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Execution.GraphExecutionStatus.Paused">
            <summary>
            Execution is paused awaiting external continuation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Execution.GraphExecutionOptions">
            <summary>
            Immutable snapshot of graph configuration captured at the start of a single execution.
            Guarantees stability even if host-level options are mutated during runtime.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionOptions.EnableLogging">
            <summary>
            Whether logging is enabled for this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionOptions.EnableMetrics">
            <summary>
            Whether metrics collection is enabled for this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionOptions.MaxExecutionSteps">
            <summary>
            Maximum number of execution steps before termination for this execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionOptions.ValidateGraphIntegrity">
            <summary>
            Whether to validate graph integrity before execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionOptions.ExecutionTimeout">
            <summary>
            Overall execution timeout. When exceeded, execution is cancelled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.GraphExecutionOptions.EnablePlanCompilation">
            <summary>
            Whether to compile and cache a structural execution plan by graph signature before running.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionOptions.From(SemanticKernel.Graph.Extensions.GraphOptions)">
            <summary>
            Creates a snapshot from the mutable <see cref="T:SemanticKernel.Graph.Extensions.GraphOptions"/>.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.GraphExecutionOptions.CreateDefault">
            <summary>
            Creates a conservative default snapshot when no global options are available.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Execution.IGraphExecutionMiddleware">
            <summary>
            Middleware that participates in graph execution around each node.
            Implementations can observe and modify execution state, enforce policies,
            or emit telemetry. Middlewares are ordered using <see cref="P:SemanticKernel.Graph.Execution.IGraphExecutionMiddleware.Order"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Execution.IGraphExecutionMiddleware.Order">
            <summary>
            Determines execution order. Lower values run earlier in the "before" phase
            and later in the "after"/"failure" phases (reverse order for symmetry).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.IGraphExecutionMiddleware.OnBeforeNodeAsync(SemanticKernel.Graph.Execution.GraphExecutionContext,SemanticKernel.Graph.Core.IGraphNode,System.Threading.CancellationToken)">
            <summary>
            Called before a node executes.
            </summary>
            <param name="context">Current execution context.</param>
            <param name="node">Node to be executed.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.IGraphExecutionMiddleware.OnAfterNodeAsync(SemanticKernel.Graph.Execution.GraphExecutionContext,SemanticKernel.Graph.Core.IGraphNode,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after a node has executed successfully.
            </summary>
            <param name="context">Current execution context.</param>
            <param name="node">Executed node.</param>
            <param name="result">Execution result.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Execution.IGraphExecutionMiddleware.OnNodeFailedAsync(SemanticKernel.Graph.Execution.GraphExecutionContext,SemanticKernel.Graph.Core.IGraphNode,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called if node execution fails with an exception.
            </summary>
            <param name="context">Current execution context.</param>
            <param name="node">Node that failed.</param>
            <param name="exception">Exception raised by the node.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions">
            <summary>
            Extension methods to integrate advanced patterns with the graph system.
            Provides fluent helpers to configure and use academic patterns, advanced optimizations,
            machine learning, and enterprise integration in a cohesive way.
            </summary>
            <remarks>
            Capabilities include:
            - Fluent configuration of academic resilience patterns (circuit breaker, bulkhead, cache‑aside)
            - Seamless integration of advanced optimization engines
            - Enabling machine learning for automatic optimization
            - Enterprise integration patterns for distributed environments
            - Orchestrating all advanced patterns together
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.WithAcademicPatterns(SemanticKernel.Graph.Core.GraphExecutor,System.Action{SemanticKernel.Graph.Extensions.AcademicPatternsConfiguration})">
            <summary>
            Adds academic resilience patterns to the graph executor.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="configureOptions">Optional configuration for academic patterns.</param>
            <returns>The executor with academic patterns configured.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.ExecuteWithCircuitBreakerAsync``1(SemanticKernel.Graph.Core.GraphExecutor,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an operation guarded by a configured circuit breaker.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="executor">The graph executor.</param>
            <param name="operation">The operation to execute.</param>
            <param name="fallback">Optional fallback to run when the circuit is open.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.ExecuteWithBulkheadAsync``1(SemanticKernel.Graph.Core.GraphExecutor,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes an operation isolated by a configured bulkhead.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="executor">The graph executor.</param>
            <param name="operation">The operation to execute. Receives a cancellation token.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.GetOrSetCacheAsync(SemanticKernel.Graph.Core.GraphExecutor,System.String,System.Func{System.Threading.Tasks.Task{System.Object}},System.Nullable{System.TimeSpan})">
            <summary>
            Gets a value from cache or loads and stores it using the provided loader.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="key">The cache key.</param>
            <param name="loader">The loader function for cache miss.</param>
            <param name="ttl">Optional per‑item TTL.</param>
            <returns>The cached or loaded value.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.WithAdvancedOptimizations(SemanticKernel.Graph.Core.GraphExecutor,System.Action{SemanticKernel.Graph.Core.AdvancedOptimizationOptions})">
            <summary>
            Adds the advanced optimization engine to the graph executor.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="configureOptions">Optional optimization configuration.</param>
            <returns>The executor with optimizations configured.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.OptimizeAsync(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Analyzes the supplied metrics and returns optimization recommendations.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="metrics">The performance metrics to analyze.</param>
            <returns>An <see cref="T:SemanticKernel.Graph.Core.OptimizationResult"/>.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.GetNodeOptimizationRecommendationsAsync(SemanticKernel.Graph.Core.GraphExecutor,System.String,SemanticKernel.Graph.Core.NodeExecutionMetrics)">
            <summary>
            Gets optimization recommendations for a specific node.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="nodeId">The node identifier.</param>
            <param name="nodeMetrics">The node execution metrics.</param>
            <returns>A <see cref="T:SemanticKernel.Graph.Core.NodeOptimizationRecommendations"/> instance.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.WithMachineLearningOptimization(SemanticKernel.Graph.Core.GraphExecutor,System.Action{SemanticKernel.Graph.Core.MLOptimizerOptions})">
            <summary>
            Adds machine‑learning‑based optimization to the graph executor.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="configureOptions">Optional ML configuration.</param>
            <returns>The executor with ML optimization configured.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.PredictPerformanceAsync(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.GraphConfiguration)">
            <summary>
            Predicts graph performance using machine learning models.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="graphConfiguration">The graph configuration to evaluate.</param>
            <returns>A performance prediction.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.DetectAnomaliesAsync(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.GraphExecutionMetrics)">
            <summary>
            Detects anomalies in execution metrics using ML models.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="executionMetrics">The execution metrics.</param>
            <returns>An anomaly detection result.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.TrainModelsAsync(SemanticKernel.Graph.Core.GraphExecutor,System.Collections.Generic.List{SemanticKernel.Graph.Core.GraphPerformanceHistory})">
            <summary>
            Trains ML models using performance history.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="performanceHistory">Historical performance data.</param>
            <returns>A training result.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.WithEnterpriseIntegration(SemanticKernel.Graph.Core.GraphExecutor,System.Action{SemanticKernel.Graph.Core.EnterpriseIntegrationOptions})">
            <summary>
            Adds enterprise integration patterns to the graph executor.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="configureOptions">Optional integration configuration.</param>
            <returns>The executor with enterprise integration configured.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.ProcessEnterpriseMessageAsync(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.EnterpriseMessage,SemanticKernel.Graph.Core.ProcessingContext)">
            <summary>
            Processes a message using configured enterprise integration patterns.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="message">The message to process.</param>
            <param name="context">Processing context.</param>
            <returns>A processing result.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.ConfigureIntegrationRouteAsync(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.IntegrationRoute)">
            <summary>
            Configures an enterprise integration route.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="route">The route configuration.</param>
            <returns>The configured route identifier.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.WithAllAdvancedPatterns(SemanticKernel.Graph.Core.GraphExecutor,System.Action{SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration})">
            <summary>
            Configures all advanced patterns at once using a single, comprehensive configuration object.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="configure">Optional configuration delegate.</param>
            <returns>The executor configured with all advanced patterns.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.RunComprehensiveDiagnosticsAsync(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.GraphPerformanceMetrics)">
            <summary>
            Runs a comprehensive diagnostics pass using all configured advanced patterns.
            </summary>
            <param name="executor">The graph executor.</param>
            <param name="metrics">The performance metrics to analyze.</param>
            <returns>A comprehensive diagnostics report.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.AdvancedPatternsExtensions.AddAdvancedGraphPatterns(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration})">
            <summary>
            Registers advanced pattern services in a DI container.
            </summary>
            <param name="services">The service collection.</param>
            <param name="configure">Optional configuration delegate.</param>
            <returns>The configured service collection.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.AcademicPatternsConfiguration">
            <summary>
            Configuration for academic resilience patterns.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsConfiguration.EnableCircuitBreaker">
            <summary>Enables Circuit Breaker.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsConfiguration.EnableBulkhead">
            <summary>Enables Bulkhead.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsConfiguration.EnableCacheAside">
            <summary>Enables Cache-Aside.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsConfiguration.CircuitBreakerOptions">
            <summary>Circuit Breaker settings.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsConfiguration.BulkheadOptions">
            <summary>Bulkhead settings.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsConfiguration.CacheAsideOptions">
            <summary>Cache-Aside settings.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration">
            <summary>
            Comprehensive configuration for all advanced patterns.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration.EnableAcademicPatterns">
            <summary>Enables academic patterns.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration.EnableAdvancedOptimizations">
            <summary>Enables advanced optimizations.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration.EnableMachineLearning">
            <summary>Enables Machine Learning.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration.EnableEnterpriseIntegration">
            <summary>Enables enterprise integration.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration.Academic">
            <summary>Academic patterns configuration.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration.OptimizationOptions">
            <summary>Advanced optimizations configuration.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration.MLOptions">
            <summary>Machine Learning configuration.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveAdvancedConfiguration.IntegrationOptions">
            <summary>Enterprise integration configuration.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport">
            <summary>
            Comprehensive diagnostics report.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport.Success">
            <summary>Indicates whether diagnostics succeeded.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport.Timestamp">
            <summary>Diagnostics timestamp.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport.GraphExecutorId">
            <summary>Graph executor identifier.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport.OptimizationAnalysis">
            <summary>Optimization analysis.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport.AnomalyDetection">
            <summary>Anomaly detection.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport.IntegrationStatistics">
            <summary>Integration statistics.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport.AcademicPatternsStatus">
            <summary>Academic patterns status.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ComprehensiveDiagnosticReport.ErrorMessage">
            <summary>Error message if present.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.AcademicPatternsStatus">
            <summary>
            Status of configured academic patterns.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsStatus.CircuitBreakerConfigured">
            <summary>Circuit Breaker configured.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsStatus.BulkheadConfigured">
            <summary>Bulkhead configured.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.AcademicPatternsStatus.CacheAsideConfigured">
            <summary>Cache-Aside configured.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.OptionsExtensions">
            <summary>
            Extension methods to simplify copying configuration objects.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.OptionsExtensions.CopyTo(SemanticKernel.Graph.Core.AdvancedOptimizationOptions,SemanticKernel.Graph.Core.AdvancedOptimizationOptions)">
            <summary>
            Copies optimization settings.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.OptionsExtensions.CopyTo(SemanticKernel.Graph.Core.MLOptimizerOptions,SemanticKernel.Graph.Core.MLOptimizerOptions)">
            <summary>
            Copies machine learning settings.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.OptionsExtensions.CopyTo(SemanticKernel.Graph.Core.EnterpriseIntegrationOptions,SemanticKernel.Graph.Core.EnterpriseIntegrationOptions)">
            <summary>
            Copies enterprise integration settings.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.CheckpointingExtensions">
            <summary>
            Extension methods for integrating checkpointing functionality with Semantic Kernel Graph.
            Provides convenient methods for configuring and using checkpoint-enabled graph execution.
            </summary>
            <remarks>
            These extensions wire services and provide fluent helpers to create/restore checkpoints and inspect
            statistics. They assume a memory provider is available and honor <see cref="T:System.Threading.CancellationToken"/>.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.AddGraphCheckpointing(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{SemanticKernel.Graph.Core.CheckpointOptions})">
            <summary>
            Adds checkpointing services to the service collection.
            </summary>
            <param name="services">Service collection</param>
            <param name="configureOptions">Optional configuration for checkpoint options</param>
            <returns>Service collection for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.CreateCheckpointingGraphExecutor(Microsoft.SemanticKernel.IKernelBuilder,System.String,SemanticKernel.Graph.Core.CheckpointingOptions,System.String)">
            <summary>
            Creates a CheckpointingGraphExecutor with the specified configuration.
            </summary>
            <param name="builder">Kernel builder</param>
            <param name="graphName">Name of the graph</param>
            <param name="checkpointingOptions">Checkpointing configuration options</param>
            <param name="description">Optional graph description</param>
            <returns>Configured CheckpointingGraphExecutor</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.WithCheckpointing(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.ICheckpointManager,SemanticKernel.Graph.Core.CheckpointingOptions)">
            <summary>
            Enables checkpointing for an existing graph executor.
            </summary>
            <param name="executor">Graph executor to enhance with checkpointing</param>
            <param name="checkpointManager">Checkpoint manager instance</param>
            <param name="options">Checkpointing options</param>
            <returns>New CheckpointingGraphExecutor with the same graph structure</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.WithCriticalNodes(SemanticKernel.Graph.Core.CheckpointingOptions,System.String[])">
            <summary>
            Configures critical nodes for enhanced checkpointing.
            </summary>
            <param name="options">Checkpointing options to configure</param>
            <param name="criticalNodeIds">Node IDs that should always trigger checkpoints</param>
            <returns>Configured options for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.WithDistributedBackup(SemanticKernel.Graph.Core.CheckpointingOptions,System.String[],System.Action{SemanticKernel.Graph.Core.CheckpointBackupOptions})">
            <summary>
            Configures distributed backup for checkpoints.
            </summary>
            <param name="options">Checkpointing options to configure</param>
            <param name="backupLocations">Backup storage locations</param>
            <param name="configureBackup">Optional backup configuration</param>
            <returns>Configured options for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.WithRetentionPolicy(SemanticKernel.Graph.Core.CheckpointingOptions,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Configures retention policy for automatic cleanup.
            </summary>
            <param name="options">Checkpointing options to configure</param>
            <param name="maxAge">Maximum age of checkpoints to keep</param>
            <param name="maxCheckpointsPerExecution">Maximum number of checkpoints per execution</param>
            <param name="maxTotalStorageBytes">Maximum total storage size for all checkpoints</param>
            <returns>Configured options for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.WithIntervals(SemanticKernel.Graph.Core.CheckpointingOptions,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Configures checkpoint intervals.
            </summary>
            <param name="options">Checkpointing options to configure</param>
            <param name="nodeInterval">Number of nodes to execute between checkpoints</param>
            <param name="timeInterval">Optional time interval between checkpoints</param>
            <returns>Configured options for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.CreateCheckpointAsync(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.ICheckpointManager,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a checkpoint of the current graph state.
            </summary>
            <param name="graphState">Graph state to checkpoint</param>
            <param name="checkpointManager">Checkpoint manager</param>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Current node identifier</param>
            <param name="description">Optional checkpoint description</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Created checkpoint</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.RestoreLatestCheckpointAsync(SemanticKernel.Graph.Core.ICheckpointManager,System.String,System.Threading.CancellationToken)">
            <summary>
            Restores graph state from the latest checkpoint of an execution.
            </summary>
            <param name="checkpointManager">Checkpoint manager</param>
            <param name="executionId">Execution identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Restored graph state, or null if no checkpoint found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingExtensions.GetCheckpointStatisticsAsync(SemanticKernel.Graph.Core.ICheckpointManager,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets checkpoint statistics for an execution.
            </summary>
            <param name="checkpointManager">Checkpoint manager</param>
            <param name="executionId">Execution identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Checkpoint statistics</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.ICheckpointingGraphExecutorFactory">
            <summary>
            Factory interface for creating CheckpointingGraphExecutor instances.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.ICheckpointingGraphExecutorFactory.CreateExecutor(System.String,SemanticKernel.Graph.Core.CheckpointingOptions,System.String)">
            <summary>
            Creates a new CheckpointingGraphExecutor.
            </summary>
            <param name="name">Graph name</param>
            <param name="options">Checkpointing options</param>
            <param name="description">Optional graph description</param>
            <returns>Configured CheckpointingGraphExecutor</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.CheckpointingGraphExecutorFactory">
            <summary>
            Default implementation of ICheckpointingGraphExecutorFactory.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingGraphExecutorFactory.#ctor(SemanticKernel.Graph.Core.ICheckpointManager,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.CheckpointingGraphExecutor})">
            <summary>
            Initializes a new instance of CheckpointingGraphExecutorFactory.
            </summary>
            <param name="checkpointManager">Checkpoint manager instance</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.CheckpointingGraphExecutorFactory.CreateExecutor(System.String,SemanticKernel.Graph.Core.CheckpointingOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.CheckpointStatistics">
            <summary>
            Statistics about checkpoints for a specific execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.ExecutionId">
            <summary>
            Gets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.TotalCheckpoints">
            <summary>
            Gets the total number of checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.TotalSizeBytes">
            <summary>
            Gets the total size of all checkpoints in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.AverageSizeBytes">
            <summary>
            Gets the average size of checkpoints in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.CompressedCheckpoints">
            <summary>
            Gets the number of compressed checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.BackedUpCheckpoints">
            <summary>
            Gets the number of backed up checkpoints.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.TimeSpan">
            <summary>
            Gets the time span from first to last checkpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.OldestCheckpoint">
            <summary>
            Gets the creation time of the oldest checkpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.NewestCheckpoint">
            <summary>
            Gets the creation time of the newest checkpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.CompressionRatio">
            <summary>
            Gets the compression ratio (compressed size / uncompressed size).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.BackupRatio">
            <summary>
            Gets the backup ratio (backed up count / total count).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CheckpointStatistics.AverageInterval">
            <summary>
            Gets the average time between checkpoints.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions">
            <summary>
            Extension methods for configuring and using dynamic routing capabilities.
            </summary>
            <remarks>
            Enables pluggable routing via <see cref="T:SemanticKernel.Graph.Core.DynamicRoutingEngine"/> with optional template integration.
            Helpers also expose metrics and manage caches for diagnosis and performance tuning.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.EnableDynamicRouting(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Integration.IGraphTemplateEngine,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.DynamicRoutingEngine})">
            <summary>
            Enables dynamic routing on the graph executor with default options.
            </summary>
            <param name="executor">Graph executor to configure</param>
            <param name="templateEngine">Optional template engine for routing decisions</param>
            <param name="logger">Optional logger</param>
            <returns>The configured graph executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.EnableDynamicRouting(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.DynamicRoutingOptions,SemanticKernel.Graph.Integration.IGraphTemplateEngine,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.DynamicRoutingEngine})">
            <summary>
            Enables dynamic routing on the graph executor with custom options.
            </summary>
            <param name="executor">Graph executor to configure</param>
            <param name="options">Dynamic routing options</param>
            <param name="templateEngine">Optional template engine for routing decisions</param>
            <param name="logger">Optional logger</param>
            <returns>The configured graph executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.DisableDynamicRouting(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Disables dynamic routing on the graph executor.
            </summary>
            <param name="executor">Graph executor to configure</param>
            <returns>The configured graph executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.GetRoutingMetrics(SemanticKernel.Graph.Core.GraphExecutor,System.String)">
            <summary>
            Gets routing metrics from the graph executor.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="nodeId">Optional node ID to get metrics for specific node</param>
            <returns>Dictionary of routing metrics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.ClearRoutingCache(SemanticKernel.Graph.Core.GraphExecutor,System.Boolean)">
            <summary>
            Clears routing cache and optionally metrics from the graph executor.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="clearMetrics">Whether to also clear metrics</param>
            <returns>The graph executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.CreateTemplateBasedEdge(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,System.String)">
            <summary>
            Creates a template-based conditional edge that uses the template engine for routing decisions.
            </summary>
            <param name="sourceNode">Source node</param>
            <param name="targetNode">Target node</param>
            <param name="conditionTemplate">Template that evaluates to boolean decision</param>
            <param name="templateEngine">Template engine to use</param>
            <param name="edgeName">Optional edge name</param>
            <returns>New template-based conditional edge</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.ConnectWithTemplate(SemanticKernel.Graph.Core.GraphExecutor,System.String,System.String,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,System.String)">
            <summary>
            Adds a template-based routing condition to a graph executor.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="sourceNodeId">Source node ID</param>
            <param name="targetNodeId">Target node ID</param>
            <param name="conditionTemplate">Template that evaluates routing condition</param>
            <param name="templateEngine">Template engine to use</param>
            <param name="edgeName">Optional edge name</param>
            <returns>The graph executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.CreateMetricsSummary(SemanticKernel.Graph.Core.RoutingMetrics)">
            <summary>
            Creates routing metrics summary for display or logging.
            </summary>
            <param name="metrics">Routing metrics to summarize</param>
            <returns>Formatted metrics summary</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.CreateRoutingReport(SemanticKernel.Graph.Core.GraphExecutor,System.Boolean)">
            <summary>
            Creates a comprehensive routing report for all nodes in the executor.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="includeNodeDetails">Whether to include detailed per-node metrics</param>
            <returns>Formatted routing report</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DynamicRoutingExtensions.Connect(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode,System.String)">
            <summary>
            Creates an unconditional connection between two nodes using node objects directly.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="sourceNode">Source node</param>
            <param name="targetNode">Target node</param>
            <param name="edgeName">Optional edge name</param>
            <returns>The graph executor for method chaining</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions">
            <summary>
            Extensions for integrating debugging capabilities with graph execution.
            Provides seamless debug mode integration with existing GraphExecutor infrastructure.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.ExecuteWithDebugAsync(SemanticKernel.Graph.Core.GraphExecutor,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Debug.DebugExecutionMode,System.Threading.CancellationToken)">
            <summary>
            Executes the graph with debugging capabilities enabled.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="debugMode">Initial debug mode</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Execution result and debug session</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.CreateDebugSession(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Creates a debug session for an existing execution context.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="context">Existing execution context</param>
            <returns>Debug session for the context</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.CreateReplay(SemanticKernel.Graph.Debug.IDebugSession)">
            <summary>
            Creates an execution replay from a completed debug session.
            </summary>
            <param name="debugSession">Completed debug session</param>
            <returns>Execution replay for analysis</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.SetDebugSession(Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Debug.IDebugSession)">
            <summary>
            Sets the debug session in kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="debugSession">Debug session to set</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.GetDebugSession(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the debug session from kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>Debug session or null if not set</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.SetDebugMode(Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Debug.DebugExecutionMode)">
            <summary>
            Sets the debug mode in kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="mode">Debug mode to set</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.GetDebugMode(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the debug mode from kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>Debug mode or Normal if not set</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.IsDebugEnabled(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Checks if debug mode is enabled in kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>True if debug mode is enabled</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.ClearDebugInfo(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Removes debug information from kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.HasDebugSession(SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Checks if the execution context has debug capabilities.
            </summary>
            <param name="context">Execution context</param>
            <returns>True if debug session is available</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.GetDebugSession(SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Gets the debug session from execution context.
            </summary>
            <param name="context">Execution context</param>
            <returns>Debug session or null if not available</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.CreateStateSnapshot(SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Creates a state snapshot for debugging purposes.
            </summary>
            <param name="context">Execution context</param>
            <returns>Immutable state snapshot</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.GenerateMermaidDiagram(SemanticKernel.Graph.Debug.IDebugSession,System.Boolean)">
            <summary>
            Generates a Mermaid diagram for debug visualization.
            </summary>
            <param name="debugSession">Debug session</param>
            <param name="highlightCurrent">Whether to highlight current node</param>
            <returns>Mermaid diagram string</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.CreateDebugReport(SemanticKernel.Graph.Debug.IDebugSession,System.Boolean,System.Boolean)">
            <summary>
            Creates a debug report with comprehensive execution information.
            </summary>
            <param name="debugSession">Debug session</param>
            <param name="includeVariables">Whether to include variable values</param>
            <param name="includeHistory">Whether to include execution history</param>
            <returns>Formatted debug report</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphDebuggerExtensions.ExecuteWithDebugHooksAsync(SemanticKernel.Graph.Core.GraphExecutor,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Debug.IDebugSession,System.Threading.CancellationToken)">
            <summary>
            Executes the graph with debug hooks for step-by-step control.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.DebugSessionBuilder">
            <summary>
            Builder extensions for easier debug session creation and configuration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DebugSessionBuilder.ForExecution(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Creates a new debug session builder.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="context">Execution context</param>
            <returns>Debug session builder</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.DebugSessionConfiguration">
            <summary>
            Configuration builder for debug sessions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DebugSessionConfiguration.WithInitialMode(SemanticKernel.Graph.Debug.DebugExecutionMode)">
            <summary>
            Sets the initial debug mode.
            </summary>
            <param name="mode">Initial debug mode</param>
            <returns>Configuration builder</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DebugSessionConfiguration.WithBreakpoint(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Adds a breakpoint at the specified node.
            </summary>
            <param name="nodeId">Node ID to break at</param>
            <param name="condition">Optional breakpoint condition</param>
            <param name="description">Optional description</param>
            <returns>Configuration builder</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DebugSessionConfiguration.WithBreakpoint(System.String,System.String,System.String)">
            <summary>
            Adds an expression-based breakpoint at the specified node.
            </summary>
            <param name="nodeId">Node ID to break at</param>
            <param name="expression">Expression to evaluate for triggering the breakpoint</param>
            <param name="description">Optional description</param>
            <returns>Configuration builder</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.DebugSessionConfiguration.BuildAsync">
            <summary>
            Builds and starts the debug session.
            </summary>
            <returns>Configured debug session</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphOptions">
            <summary>
            Configuration options for graph functionality.
            </summary>
            <remarks>
            Applies to core engine behaviors: logging, metrics, validation and global execution bounds. These options
            are typically set via <see cref="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphSupport(Microsoft.SemanticKernel.IKernelBuilder)"/> during host startup.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphOptions.EnableLogging">
            <summary>
            Gets or sets whether logging is enabled for graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphOptions.EnableMetrics">
            <summary>
            Gets or sets whether metrics collection is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphOptions.MaxExecutionSteps">
            <summary>
            Gets or sets the maximum number of execution steps before termination.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphOptions.ValidateGraphIntegrity">
            <summary>
            Gets or sets whether to validate graph integrity before execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphOptions.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphOptions.EnablePlanCompilation">
            <summary>
            Enables compilation and caching of structural execution plans by graph signature.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphOptions.Logging">
            <summary>
            Gets or sets the logging configuration for different categories and nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphOptions.Interop">
            <summary>
            Gets or sets interoperability-related options (import/export, bridges, federation).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphMemoryOptions">
            <summary>
            Configuration options for graph memory integration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphMemoryOptions.EnableVectorSearch">
            <summary>
            Gets or sets whether vector search is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphMemoryOptions.EnableSemanticSearch">
            <summary>
            Gets or sets whether semantic search is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphMemoryOptions.DefaultCollectionName">
            <summary>
            Gets or sets the default collection name for graph memory.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphMemoryOptions.SimilarityThreshold">
            <summary>
            Gets or sets the vector search similarity threshold.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphLLMOptions">
            <summary>
            Configuration options for LLM providers.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLLMOptions.DefaultModel">
            <summary>
            Gets or sets the default model to use.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLLMOptions.EnableAutoModelSelection">
            <summary>
            Gets or sets whether to enable automatic model selection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLLMOptions.Temperature">
            <summary>
            Gets or sets the temperature for text generation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLLMOptions.MaxTokens">
            <summary>
            Gets or sets the maximum tokens for responses.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphTemplateOptions">
            <summary>
            Configuration options for template engines.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphTemplateOptions.EnableHandlebars">
            <summary>
            Gets or sets whether Handlebars templates are enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphTemplateOptions.EnableCustomHelpers">
            <summary>
            Gets or sets whether custom template helpers are enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphTemplateOptions.TemplateCacheSize">
            <summary>
            Gets or sets the template cache size.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.CompleteGraphOptions">
            <summary>
            Complete configuration options for all graph features.
            </summary>
            <remarks>
            Convenience aggregate used by <see cref="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddCompleteGraphSupport(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.CompleteGraphOptions})"/>. Hosts can
            enable/disable major subsystems in one place and let the extension methods translate into granular
            registrations.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.EnableLogging">
            <summary>
            Gets or sets whether logging is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.EnableMemory">
            <summary>
            Gets or sets whether memory integration is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.EnableTemplates">
            <summary>
            Gets or sets whether template support is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.EnableVectorSearch">
            <summary>
            Gets or sets whether vector search is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.EnableSemanticSearch">
            <summary>
            Gets or sets whether semantic search is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.EnableCustomHelpers">
            <summary>
            Gets or sets whether custom template helpers are enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.EnableMetrics">
            <summary>
            Gets or sets whether metrics collection is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.MaxExecutionSteps">
            <summary>
            Gets or sets the maximum execution steps.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.CompleteGraphOptions.Interop">
            <summary>
            Gets or sets interop (import/export) options.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphLoggingOptions">
            <summary>
            Advanced logging configuration options for graph execution.
            Provides granular control over logging behavior, correlation, and structured data.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.MinimumLevel">
            <summary>
            Gets or sets the minimum log level for graph execution events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.EnableStructuredLogging">
            <summary>
            Gets or sets whether structured logging is enabled with enhanced context.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.EnableCorrelationIds">
            <summary>
            Gets or sets whether correlation IDs should be automatically generated and propagated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.IncludeTimings">
            <summary>
            Gets or sets whether to include execution timing in all log entries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.IncludeNodeMetadata">
            <summary>
            Gets or sets whether to include node metadata in log entries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.IncludeStateSnapshots">
            <summary>
            Gets or sets whether to include graph state snapshots in debug logs.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.MaxStateDataSize">
            <summary>
            Gets or sets the maximum size of state data to include in logs (in characters).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.CategoryConfigs">
            <summary>
            Gets or sets category-specific logging configurations.
            Categories include: "Graph", "Node", "Routing", "Error", "Performance", "State", "Validation".
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.NodeConfigs">
            <summary>
            Gets or sets node-specific logging configurations.
            Key is the node ID or node type name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.LogSensitiveData">
            <summary>
            Gets or sets whether to log sensitive data (parameters, state values).
            When false, only parameter names and counts are logged, not values.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.Sanitization">
            <summary>
            Gets or sets the sanitization policy for sensitive data. When enabled, known sensitive keys
            (e.g., password, secret, token, authorization) are always redacted even if <see cref="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.LogSensitiveData"/> is true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.CorrelationIdPrefix">
            <summary>
            Gets or sets custom correlation ID prefix for this graph instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphLoggingOptions.TimestampFormat">
            <summary>
            Gets or sets the format for timestamps in log entries.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.LogCategoryConfig">
            <summary>
            Configuration for logging a specific category of events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.LogCategoryConfig.Enabled">
            <summary>
            Gets or sets whether logging is enabled for this category.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.LogCategoryConfig.Level">
            <summary>
            Gets or sets the minimum log level for this category.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.LogCategoryConfig.CustomProperties">
            <summary>
            Gets or sets custom properties to include in logs for this category.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.NodeLoggingConfig">
            <summary>
            Configuration for logging a specific node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.NodeLoggingConfig.LogInputs">
            <summary>
            Gets or sets whether to log the input parameters for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.NodeLoggingConfig.LogOutputs">
            <summary>
            Gets or sets whether to log the output results for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.NodeLoggingConfig.LogTiming">
            <summary>
            Gets or sets whether to log execution timing for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.NodeLoggingConfig.LogStateChanges">
            <summary>
            Gets or sets whether to log state changes caused by this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.NodeLoggingConfig.MaxDataSize">
            <summary>
            Gets or sets the maximum size of input/output data to log (in characters).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphInteropOptions">
            <summary>
            Interoperability options for cross-ecosystem integrations (LangGraph/LangChain import, BPMN export, Python bridge, federation).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphInteropOptions.EnableImporters">
            <summary>
            Enables importers that convert external graph definitions (e.g., LangGraph/LangChain JSON) into <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> instances.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphInteropOptions.EnableExporters">
            <summary>
            Enables exporters for industry formats (e.g., BPMN XML).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphInteropOptions.EnablePythonBridge">
            <summary>
            Enables Python execution bridge nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphInteropOptions.EnableFederation">
            <summary>
            Enables federation with external graph engines via HTTP.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphInteropOptions.PythonExecutablePath">
            <summary>
            Optional path to Python executable for the Python bridge. If null or empty, "python" will be used from PATH.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphInteropOptions.FederationBaseAddress">
            <summary>
            Optional default base address for federated graph calls (e.g., an upstream LangGraph server).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphInteropOptions.ReplaySecurity">
            <summary>
            Options for replay/export security such as hashing and encryption.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.ReplaySecurityOptions">
            <summary>
            Configures hashing and encryption for exported replay/debug artifacts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ReplaySecurityOptions.EnableIntegrityHash">
            <summary>
            When true, the exported replay JSON will include a checksum to detect tampering.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ReplaySecurityOptions.HashAlgorithm">
            <summary>
            Hash algorithm for integrity computation. Supported: "SHA256", "SHA512".
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ReplaySecurityOptions.EnableEncryption">
            <summary>
            When true, the exported replay JSON will be symmetrically encrypted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ReplaySecurityOptions.EncryptionKeyBase64">
            <summary>
            32-byte key for AES-256. If null/empty and encryption is enabled, export will throw.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ReplaySecurityOptions.EncryptionNonceBase64">
            <summary>
            12-byte nonce for AES-GCM. If null, a random nonce is generated per export and stored alongside the payload.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.ReplaySecurityOptions.RequireIntegrityMatchOnImport">
            <summary>
            When true, ImportFromJson will throw if integrity verification fails. When false, it will proceed without strict enforcement.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions">
            <summary>
            Extension methods for working with graph performance metrics.
            Provides convenient access to metrics data and performance summaries.
            </summary>
            <remarks>
            Wraps <see cref="T:SemanticKernel.Graph.Core.GraphPerformanceMetrics"/> for quick enable/disable and common queries. All calls are
            safe when metrics are disabled and return neutral values.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.EnableMetrics(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.GraphMetricsOptions)">
            <summary>
            Enables performance metrics collection on the graph executor.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="options">Metrics options (uses default if null)</param>
            <returns>The same executor for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.DisableMetrics(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Disables performance metrics collection on the graph executor.
            </summary>
            <param name="executor">Graph executor</param>
            <returns>The same executor for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.EnableDevelopmentMetrics(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Enables metrics with development-optimized settings.
            </summary>
            <param name="executor">Graph executor</param>
            <returns>The same executor for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.EnableProductionMetrics(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Enables metrics with production-optimized settings.
            </summary>
            <param name="executor">Graph executor</param>
            <returns>The same executor for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.GetPerformanceSummary(SemanticKernel.Graph.Core.GraphExecutor,System.Nullable{System.TimeSpan})">
            <summary>
            Gets a performance summary for the specified time window.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="timeWindow">Time window to analyze (default: last 1 hour)</param>
            <returns>Performance summary, or null if metrics are disabled</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when timeWindow is negative or zero</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.GetNodeMetrics(SemanticKernel.Graph.Core.GraphExecutor,System.String)">
            <summary>
            Gets performance metrics for a specific node.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="nodeId">Node identifier</param>
            <returns>Node metrics, or null if metrics are disabled or node not found</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.GetAllNodeMetrics(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Gets all node performance summaries.
            </summary>
            <param name="executor">Graph executor</param>
            <returns>Dictionary of node metrics, or empty if metrics are disabled</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.GetPathMetrics(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Gets execution path statistics.
            </summary>
            <param name="executor">Graph executor</param>
            <returns>Dictionary of path metrics, or empty if metrics are disabled</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.GetThroughput(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Gets the current overall throughput (executions per second).
            </summary>
            <param name="executor">Graph executor</param>
            <returns>Throughput value, or 0 if metrics are disabled</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.GetAverageLatency(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Gets the current average latency across all nodes.
            </summary>
            <param name="executor">Graph executor</param>
            <returns>Average latency, or TimeSpan.Zero if metrics are disabled</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when executor is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.IsHealthy(SemanticKernel.Graph.Core.GraphPerformanceSummary,System.Double,System.Double,System.Double)">
            <summary>
            Checks if the performance summary indicates healthy system performance.
            </summary>
            <param name="summary">Performance summary</param>
            <param name="maxLatencyMs">Maximum acceptable latency in milliseconds (default: 5000)</param>
            <param name="minSuccessRate">Minimum acceptable success rate percentage (default: 95)</param>
            <param name="maxCpuUsage">Maximum acceptable CPU usage percentage (default: 80)</param>
            <returns>True if performance is within acceptable thresholds</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when summary is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.GetPerformanceAlerts(SemanticKernel.Graph.Core.GraphPerformanceSummary,System.Double,System.Double,System.Double)">
            <summary>
            Gets performance alerts based on thresholds.
            </summary>
            <param name="summary">Performance summary</param>
            <param name="maxLatencyMs">Maximum acceptable latency in milliseconds</param>
            <param name="minSuccessRate">Minimum acceptable success rate percentage</param>
            <param name="maxCpuUsage">Maximum acceptable CPU usage percentage</param>
            <returns>List of performance alerts</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when summary is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.IsPerformingWell(SemanticKernel.Graph.Core.NodeExecutionMetrics,System.Double,System.Double)">
            <summary>
            Checks if node performance is within acceptable thresholds.
            </summary>
            <param name="nodeMetrics">Node execution metrics</param>
            <param name="maxLatencyMs">Maximum acceptable latency in milliseconds</param>
            <param name="minSuccessRate">Minimum acceptable success rate percentage</param>
            <returns>True if node performance is acceptable</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when nodeMetrics is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphPerformanceExtensions.GetPerformanceClassification(SemanticKernel.Graph.Core.NodeExecutionMetrics)">
            <summary>
            Gets the node's performance classification.
            </summary>
            <param name="nodeMetrics">Node execution metrics</param>
            <returns>Performance classification string</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when nodeMetrics is null</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions">
            <summary>
            Extensions that simplify using the Human-in-the-Loop system with Semantic Kernel Graph.
            Provides fluent helpers to add human approval nodes, confidence gates,
            default timeouts, batching, and argument/state utilities.
            </summary>
            <remarks>
            These helpers compose <see cref="T:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode"/> e <see cref="T:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode"/> com
            configurações pragmáticas. Métodos não lançam exceções além de validações e usam metadados do executor
            para defaults (timeouts, batch manager).
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.AddHumanApproval(SemanticKernel.Graph.Core.GraphExecutor,System.String,System.String,System.String,SemanticKernel.Graph.Core.IHumanInteractionChannel)">
            <summary>
            Adds a human approval node to the graph.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="nodeId">Node identifier</param>
            <param name="title">Approval title</param>
            <param name="message">Message presented to the user</param>
            <param name="channel">Interaction channel</param>
            <returns>Executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.AddConditionalHumanApproval(SemanticKernel.Graph.Core.GraphExecutor,System.String,System.String,System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},SemanticKernel.Graph.Core.IHumanInteractionChannel)">
            <summary>
            Adds a conditional human approval node to the graph.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="nodeId">Node identifier</param>
            <param name="title">Approval title</param>
            <param name="message">Message presented to the user</param>
            <param name="condition">Condition that enables the approval step</param>
            <param name="channel">Interaction channel</param>
            <returns>Executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.AddConfidenceGate(SemanticKernel.Graph.Core.GraphExecutor,System.String,System.Double,SemanticKernel.Graph.Core.IHumanInteractionChannel)">
            <summary>
            Adds a confidence gate node to the graph.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="nodeId">Node identifier</param>
            <param name="confidenceThreshold">Confidence threshold</param>
            <param name="channel">Optional interaction channel</param>
            <returns>Executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.WithBatchApproval(SemanticKernel.Graph.Core.GraphExecutor,SemanticKernel.Graph.Core.HumanApprovalBatchManager)">
            <summary>
            Configures the executor to use a batch system for approvals.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="batchManager">Batch manager instance</param>
            <returns>Executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.WithHumanApprovalTimeout(SemanticKernel.Graph.Core.GraphExecutor,System.TimeSpan,SemanticKernel.Graph.Core.TimeoutAction)">
            <summary>
            Sets a default timeout for human approvals.
            </summary>
            <param name="executor">Graph executor</param>
            <param name="timeout">Default timeout</param>
            <param name="defaultAction">Default action when timeout occurs</param>
            <returns>Executor for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.AddHumanInTheLoop(Microsoft.SemanticKernel.IKernelBuilder,SemanticKernel.Graph.Core.IHumanInteractionChannel,SemanticKernel.Graph.Core.BatchApprovalOptions)">
            <summary>
            Adds Human-in-the-Loop support to the kernel builder.
            </summary>
            <param name="builder">Kernel builder</param>
            <param name="defaultChannel">Default interaction channel</param>
            <param name="batchOptions">Options for batch approval processing</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.AddConsoleHumanInteraction(Microsoft.SemanticKernel.IKernelBuilder,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a console-based human interaction channel.
            </summary>
            <param name="builder">Kernel builder</param>
            <param name="configuration">Optional console configuration</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.AddWebApiHumanInteraction(Microsoft.SemanticKernel.IKernelBuilder)">
            <summary>
            Adds a Web API-backed human interaction channel using the registered IHumanInteractionStore.
            </summary>
            <param name="builder">Kernel builder</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.WithHumanApproval(Microsoft.SemanticKernel.KernelArguments,System.String,System.String,SemanticKernel.Graph.Core.InteractionPriority)">
            <summary>
            Defines a human approval request in the kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="title">Approval title</param>
            <param name="message">Message presented to the user</param>
            <param name="priority">Request priority</param>
            <returns>Arguments for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.WithConfidence(Microsoft.SemanticKernel.KernelArguments,System.Double,System.String,System.Nullable{System.Double})">
            <summary>
            Sets a confidence context in the kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="confidenceLevel">Confidence level</param>
            <param name="source">Confidence source</param>
            <param name="threshold">Optional threshold</param>
            <returns>Arguments for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.AddApprovalOption(Microsoft.SemanticKernel.KernelArguments,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Adds an approval option to the kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="optionId">Option identifier</param>
            <param name="displayText">Display text</param>
            <param name="value">Option value</param>
            <param name="isDefault">Whether this is the default option</param>
            <returns>Arguments for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.GetLastHumanApprovalResult(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the result of the last human approval.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>Approval result or null if none</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.WasLastApprovalApproved(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Checks whether the last approval was positive.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>True if approved; otherwise, false</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.RecordHumanInteraction(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.Core.HumanInterruptionResponse)">
            <summary>
            Records a human interaction into the graph state.
            </summary>
            <param name="graphState">Graph state</param>
            <param name="response">Interaction response</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.GetHumanInteractionStatistics(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets human interaction statistics from the graph state.
            </summary>
            <param name="graphState">Graph state</param>
            <returns>Interaction statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.CreateApproval(SemanticKernel.Graph.Core.IHumanInteractionChannel)">
            <summary>
            Creates a fluent builder for configuring a human approval.
            </summary>
            <param name="channel">Communication channel</param>
            <returns>Approval builder</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanInTheLoopExtensions.CreateConfidenceGate(System.Double)">
            <summary>
            Creates a fluent builder for configuring a confidence gate.
            </summary>
            <param name="threshold">Confidence threshold</param>
            <returns>Confidence gate builder</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.HumanInteractionHistoryEntry">
            <summary>
            Human interaction history entry.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionHistoryEntry.RequestId">
            <summary>
            Request identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionHistoryEntry.Status">
            <summary>
            Response status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionHistoryEntry.UserId">
            <summary>
            Identifier of the responding user.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionHistoryEntry.RespondedAt">
            <summary>
            Response timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionHistoryEntry.ResponseChannel">
            <summary>
            Channel used for the response.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionHistoryEntry.WasAutomated">
            <summary>
            Indicates whether the response was automated.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.HumanInteractionStatistics">
            <summary>
            Human interaction statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionStatistics.TotalInteractions">
            <summary>
            Total number of interactions performed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionStatistics.RecentApprovedCount">
            <summary>
            Recent approvals (limited history).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionStatistics.RecentRejectedCount">
            <summary>
            Recent rejections.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionStatistics.RecentAutomatedCount">
            <summary>
            Recent automated responses.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionStatistics.ApprovalRate">
            <summary>
            Approval rate (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionStatistics.AutomationRate">
            <summary>
            Automation rate (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionStatistics.LastInteractionAt">
            <summary>
            Timestamp of the last interaction.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.HumanInteractionStatistics.MostActiveUserId">
            <summary>
            Most active user identifier.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.HumanApprovalBuilder">
            <summary>
            Fluent builder for configuring human approvals.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanApprovalBuilder.WithId(System.String)">
            <summary>
            Sets the node identifier.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanApprovalBuilder.WithTitle(System.String)">
            <summary>
            Sets the approval title.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanApprovalBuilder.WithMessage(System.String)">
            <summary>
            Sets the approval message.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanApprovalBuilder.WithPriority(SemanticKernel.Graph.Core.InteractionPriority)">
            <summary>
            Sets the approval priority.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanApprovalBuilder.WithTimeout(System.TimeSpan,SemanticKernel.Graph.Core.TimeoutAction)">
            <summary>
            Sets the timeout configuration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanApprovalBuilder.AddOption(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Adds an approval option.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanApprovalBuilder.When(System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean})">
            <summary>
            Sets the activation condition.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.HumanApprovalBuilder.Build">
            <summary>
            Builds the human approval node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.ConfidenceGateBuilder">
            <summary>
            Fluent builder for configuring confidence gates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.ConfidenceGateBuilder.WithId(System.String)">
            <summary>
            Sets the node identifier.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.ConfidenceGateBuilder.WithChannel(SemanticKernel.Graph.Core.IHumanInteractionChannel)">
            <summary>
            Sets the interaction channel.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.ConfidenceGateBuilder.WithMode(SemanticKernel.Graph.Nodes.ConfidenceGateMode)">
            <summary>
            Sets the operation mode.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.ConfidenceGateBuilder.WithStrategy(SemanticKernel.Graph.Nodes.ConfidenceAggregationStrategy)">
            <summary>
            Sets the aggregation strategy.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.ConfidenceGateBuilder.AddSource(SemanticKernel.Graph.Nodes.ConfidenceSource)">
            <summary>
            Adds a confidence source.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.ConfidenceGateBuilder.Build">
            <summary>
            Builds the confidence gate node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions">
            <summary>
            Extensions for KernelArguments that add graph-specific functionality.
            Enables execution tracking and advanced state manipulation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.ToGraphState(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Converts KernelArguments to GraphState.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>GraphState encapsulating the arguments</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetOrCreateGraphState(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the GraphState from KernelArguments, creating one if necessary.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>Associated GraphState</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.HasGraphState(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Checks if the KernelArguments contain a GraphState.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>True if contains GraphState</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.SetGraphState(Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Sets the GraphState in KernelArguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="graphState">GraphState to set</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments or graphState is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.StartExecutionStep(Microsoft.SemanticKernel.KernelArguments,System.String,System.String)">
            <summary>
            Starts tracking a new execution step.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="nodeId">Node identifier</param>
            <param name="functionName">Function name</param>
            <returns>ExecutionStep created for tracking</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when nodeId or functionName are null/empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.CompleteExecutionStep(Microsoft.SemanticKernel.KernelArguments,System.Object)">
            <summary>
            Completes the current execution step successfully.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="result">Execution result</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when there's no step in execution</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.FailExecutionStep(Microsoft.SemanticKernel.KernelArguments,System.String,System.Exception)">
            <summary>
            Fails the current execution step.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="errorMessage">Error message</param>
            <param name="exception">Exception that caused the failure</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when errorMessage is null/empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when there's no step in execution</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetCurrentExecutionStep(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the current execution step.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>Current ExecutionStep or null if none</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.SetCurrentExecutionStep(Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.State.ExecutionStep)">
            <summary>
            Sets the current execution step.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="step">Execution step to set</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments or step are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.ClearCurrentExecutionStep(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Removes the current execution step.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.SetCurrentNode(Microsoft.SemanticKernel.KernelArguments,System.String)">
            <summary>
            Sets the identifier of the currently executing node.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="nodeId">Current node identifier</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null/empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetCurrentNode(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the identifier of the currently executing node.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>Current node identifier or null if not set</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.ClearCurrentNode(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Removes the current node identifier.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.SetExecutionContext(Microsoft.SemanticKernel.KernelArguments,System.Object)">
            <summary>
            Sets the graph execution context.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="context">Context to set</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments or context are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetExecutionContext``1(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the graph execution context.
            </summary>
            <typeparam name="T">Expected context type</typeparam>
            <param name="arguments">Kernel arguments</param>
            <returns>Typed context or default if not found</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.ClearExecutionContext(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Removes the execution context.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.SetExecutionId(Microsoft.SemanticKernel.KernelArguments,System.String)">
            <summary>
            Sets an explicit execution identifier to be used by the execution context and all decorators.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetExplicitExecutionId(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets an explicit execution identifier if one was previously set on the arguments.
            Returns null when not set.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.EnsureStableExecutionId(Microsoft.SemanticKernel.KernelArguments,System.Nullable{System.Int32})">
            <summary>
            Ensures an execution identifier is present on the arguments. If not present, creates a deterministic
            identifier based on the provided or existing seed. Returns the ensured identifier.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.Clone(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Creates a deep copy of the KernelArguments while maintaining execution tracking.
            </summary>
            <param name="arguments">Original arguments</param>
            <returns>New instance with the same data</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.SetExecutionPriority(Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Core.ExecutionPriority)">
            <summary>
            Sets execution priority used by resource governance.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetExecutionPriority(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets execution priority used by resource governance; returns null if not set.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.SetEstimatedNodeCostWeight(Microsoft.SemanticKernel.KernelArguments,System.Double)">
            <summary>
            Sets an estimated node cost weight (>=1.0). Higher costs consume more permits.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetEstimatedNodeCostWeight(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the estimated node cost weight or null if not set.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetExecutionId(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the execution ID from kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <returns>Execution ID or empty string if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetExecutionRandom(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets a reproducible random number generator for the current execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.SetExecutionSeed(Microsoft.SemanticKernel.KernelArguments,System.Int32)">
            <summary>
            Optionally set an explicit execution seed before creating the execution context.
            Typically used when orchestrating execution externally.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.GetExecutionSeed(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the execution seed if explicitly set in arguments; otherwise returns null.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.ClearGraphData(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Clears all graph-related data from the KernelArguments.
            </summary>
            <param name="arguments">Arguments to clean</param>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelArgumentsExtensions.IsInternalGraphKey(System.String)">
            <summary>
            Checks if a key is internal to the graph system.
            </summary>
            <param name="key">Key to check</param>
            <returns>True if it's an internal key</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.KernelBuilderExtensions">
            <summary>
            Extensions for KernelBuilder that enable zero-configuration graph setup.
            Provides fluent API for configuring graph functionality with existing Semantic Kernel instances.
            </summary>
            <remarks>
            These helpers register default implementations for core services (<see cref="T:SemanticKernel.Graph.Integration.IGraphExecutorFactory"/>,
            registries, template engines, importers/exporters) while allowing hosts to override with their own.
            All methods validate inputs and avoid throwing from optional features discovery (e.g., telemetry adapters).
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphSupport(Microsoft.SemanticKernel.IKernelBuilder)">
            <summary>
            Adds graph functionality to the kernel with default configuration.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphSupport(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.GraphOptions})">
            <summary>
            Adds graph functionality to the kernel with custom configuration.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configure">Configuration action for graph options</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphFromPlugins(Microsoft.SemanticKernel.IKernelBuilder,System.String)">
            <summary>
            Creates a graph executor from the kernel's existing plugins.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="graphName">Name for the created graph</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphMemory(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.GraphMemoryOptions})">
            <summary>
            Adds semantic memory integration to graph nodes.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configureMemory">Memory configuration action</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphLLMProviders(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.GraphLLMOptions})">
            <summary>
            Adds support for multiple LLM providers in graph execution.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configureLLM">LLM configuration action</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphTemplates(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.GraphTemplateOptions})">
            <summary>
            Adds Handlebars template support for graph prompts.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configureTemplates">Template configuration action</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphSupportWithLogging(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.GraphLoggingOptions})">
            <summary>
            Adds graph support with advanced logging configuration.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configureLogging">Logging configuration action</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.CreateGraphFromTemplate(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Creates a graph instance from a registered workflow template.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="templateId">Template identifier</param>
            <param name="parameters">Parameter bag</param>
            <param name="version">Specific version or null to use latest</param>
            <returns>Materialized <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/></returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphSupportForDebugging(Microsoft.SemanticKernel.IKernelBuilder)">
            <summary>
            Adds graph support configured for debugging with enhanced logging.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphSupportForProduction(Microsoft.SemanticKernel.IKernelBuilder)">
            <summary>
            Adds graph support configured for production with optimized logging.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddGraphSupportForPerformance(Microsoft.SemanticKernel.IKernelBuilder)">
            <summary>
            Adds graph support configured for high performance with minimal logging.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddCompleteGraphSupport(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.CompleteGraphOptions})">
            <summary>
            Adds complete graph support with all integrations enabled.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configure">Complete configuration action</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddSimpleSequentialGraph(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String[])">
            <summary>
            Creates a simple graph from a list of function names in execution order.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="graphName">Name for the graph</param>
            <param name="functionNames">List of function names in execution order</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.CreateGraphWithTemplates(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,SemanticKernel.Graph.Extensions.GraphTemplateOptions)">
            <summary>
            Creates a new graph executor with Handlebars template engine configured.
            </summary>
            <param name="kernelBuilder">Kernel builder instance</param>
            <param name="graphName">Name for the graph</param>
            <param name="graphDescription">Optional description for the graph</param>
            <param name="templateOptions">Optional template engine options</param>
            <returns>New graph executor with template engine</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.CreateGraphWithDynamicRouting(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,SemanticKernel.Graph.Core.DynamicRoutingOptions,SemanticKernel.Graph.Extensions.GraphTemplateOptions)">
            <summary>
            Creates a new graph executor with dynamic routing enabled.
            </summary>
            <param name="kernelBuilder">Kernel builder instance</param>
            <param name="graphName">Name for the graph</param>
            <param name="graphDescription">Optional description for the graph</param>
            <param name="routingOptions">Optional dynamic routing options</param>
            <param name="templateOptions">Optional template engine options for routing</param>
            <returns>New graph executor with dynamic routing</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.CreateAdvancedGraph(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.String,SemanticKernel.Graph.Core.DynamicRoutingOptions,SemanticKernel.Graph.Extensions.GraphTemplateOptions)">
            <summary>
            Creates a new graph executor with full advanced features enabled.
            </summary>
            <param name="kernelBuilder">Kernel builder instance</param>
            <param name="graphName">Name for the graph</param>
            <param name="graphDescription">Optional description for the graph</param>
            <param name="routingOptions">Optional dynamic routing options</param>
            <param name="templateOptions">Optional template engine options</param>
            <returns>New graph executor with all advanced features</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddCheckpointSupport(Microsoft.SemanticKernel.IKernelBuilder)">
            <summary>
            Adds checkpoint support to the kernel with default configuration.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddCheckpointSupport(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Core.CheckpointOptions})">
            <summary>
            Adds checkpoint support to the kernel with custom configuration.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configure">Configuration action for checkpoint options</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddCheckpointCleanup(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Core.CheckpointCleanupOptions})">
            <summary>
            Adds automatic checkpoint cleanup service to the kernel.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configure">Optional configuration action for cleanup options</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.CreateCheckpointingGraph(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.Action{SemanticKernel.Graph.Core.CheckpointingOptions})">
            <summary>
            Creates a checkpointing-enabled graph executor with fluent configuration.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="graphName">Name of the graph</param>
            <param name="configure">Optional configuration action for checkpointing options</param>
            <returns>Configured CheckpointingGraphExecutor</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.KernelBuilderExtensions.AddAdvancedGraphSupport(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.GraphOptions},System.Action{SemanticKernel.Graph.Core.CheckpointOptions},System.Action{SemanticKernel.Graph.Core.CheckpointCleanupOptions})">
            <summary>
            Configures comprehensive graph support with checkpointing, cleanup, and monitoring.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configureGraph">Optional graph configuration</param>
            <param name="configureCheckpoints">Optional checkpoint configuration</param>
            <param name="configureCleanup">Optional cleanup configuration</param>
            <returns>Kernel builder for method chaining</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.LoggingExtensions">
            <summary>
            Extension methods for enhanced graph logging functionality.
            Provides convenient methods for structured logging with correlation and context.
            </summary>
            <remarks>
            These helpers wrap <see cref="T:SemanticKernel.Graph.Integration.IGraphLogger"/> with category-specific shortcuts and object builders for
            richer logs. They avoid throwing and accept null property bags. Sensitive data logging is governed by
            <see cref="T:SemanticKernel.Graph.Extensions.GraphLoggingOptions"/>.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.LogGraphInfo(SemanticKernel.Graph.Integration.IGraphLogger,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs a graph-level information message with correlation.
            </summary>
            <param name="logger">Graph logger instance</param>
            <param name="executionId">Execution identifier</param>
            <param name="message">Log message</param>
            <param name="properties">Additional properties</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.LogGraphDebug(SemanticKernel.Graph.Integration.IGraphLogger,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs a graph-level debug message with correlation.
            </summary>
            <param name="logger">Graph logger instance</param>
            <param name="executionId">Execution identifier</param>
            <param name="message">Log message</param>
            <param name="properties">Additional properties</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.LogNodeInfo(SemanticKernel.Graph.Integration.IGraphLogger,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs a node-level information message with correlation.
            </summary>
            <param name="logger">Graph logger instance</param>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier</param>
            <param name="message">Log message</param>
            <param name="properties">Additional properties</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.LogPerformance(SemanticKernel.Graph.Integration.IGraphLogger,System.String,System.String,System.Double,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Logs a performance metric with categorization.
            </summary>
            <param name="logger">Graph logger instance</param>
            <param name="executionId">Execution identifier</param>
            <param name="metricName">Metric name</param>
            <param name="value">Metric value</param>
            <param name="unit">Unit of measurement</param>
            <param name="tags">Additional tags</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.LogValidation(SemanticKernel.Graph.Integration.IGraphLogger,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs a validation event with appropriate level based on result.
            </summary>
            <param name="logger">Graph logger instance</param>
            <param name="executionId">Execution identifier</param>
            <param name="validationType">Type of validation</param>
            <param name="isValid">Whether validation passed</param>
            <param name="message">Validation message</param>
            <param name="details">Additional validation details</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.CreateLogContext(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a structured log context for enhanced logging.
            </summary>
            <param name="graphId">Graph identifier</param>
            <param name="nodeId">Node identifier</param>
            <param name="parentCorrelationId">Parent correlation identifier</param>
            <param name="additionalProperties">Additional properties</param>
            <returns>Log context instance</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.CreateNodeExecutionInfo(System.String,System.String,SemanticKernel.Graph.Integration.ExecutionPhase,System.TimeSpan,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Creates node execution info for comprehensive logging.
            </summary>
            <param name="nodeName">Node name</param>
            <param name="nodeType">Node type</param>
            <param name="phase">Execution phase</param>
            <param name="executionTime">Execution time</param>
            <param name="inputParameters">Input parameters</param>
            <param name="outputResult">Output result</param>
            <param name="exception">Exception if any</param>
            <param name="metadata">Additional metadata</param>
            <param name="metrics">Performance metrics</param>
            <returns>Node execution info</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.CreateStateChangeInfo(System.String,SemanticKernel.Graph.Integration.StateChangeType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,SemanticKernel.Graph.Integration.StateChangeValue})">
            <summary>
            Creates state change info for logging state modifications.
            </summary>
            <param name="nodeId">Node that caused the change</param>
            <param name="changeType">Type of change</param>
            <param name="changedKeys">Keys that were changed</param>
            <param name="changes">Before/after values</param>
            <returns>State change info</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.CreateRoutingDecisionInfo(System.String,System.String,System.String,System.Boolean,System.TimeSpan,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates routing decision info for logging routing choices.
            </summary>
            <param name="fromNodeId">Source node</param>
            <param name="toNodeId">Target node</param>
            <param name="routingStrategy">Strategy used</param>
            <param name="conditionResult">Condition result</param>
            <param name="decisionTime">Time taken for decision</param>
            <param name="condition">Condition expression</param>
            <param name="alternativeNodes">Alternative nodes considered</param>
            <param name="context">Additional context</param>
            <returns>Routing decision info</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.ConfigureNode(SemanticKernel.Graph.Extensions.GraphLoggingOptions,System.String,SemanticKernel.Graph.Extensions.NodeLoggingConfig)">
            <summary>
            Adds node-specific logging configuration.
            </summary>
            <param name="options">Graph logging options</param>
            <param name="nodeId">Node identifier</param>
            <param name="config">Node logging configuration</param>
            <returns>Graph logging options for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.ConfigureCategory(SemanticKernel.Graph.Extensions.GraphLoggingOptions,System.String,SemanticKernel.Graph.Extensions.LogCategoryConfig)">
            <summary>
            Adds category-specific logging configuration.
            </summary>
            <param name="options">Graph logging options</param>
            <param name="category">Category name</param>
            <param name="config">Category logging configuration</param>
            <returns>Graph logging options for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.ConfigureForPerformance(SemanticKernel.Graph.Extensions.GraphLoggingOptions)">
            <summary>
            Configures logging for performance-sensitive scenarios.
            </summary>
            <param name="options">Graph logging options</param>
            <returns>Graph logging options configured for performance</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.ConfigureForDebugging(SemanticKernel.Graph.Extensions.GraphLoggingOptions)">
            <summary>
            Configures logging for debugging scenarios.
            </summary>
            <param name="options">Graph logging options</param>
            <returns>Graph logging options configured for debugging</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.LoggingExtensions.ConfigureForProduction(SemanticKernel.Graph.Extensions.GraphLoggingOptions)">
            <summary>
            Configures logging for production scenarios.
            </summary>
            <param name="options">Graph logging options</param>
            <returns>Graph logging options configured for production</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.ModuleActivationExtensions">
            <summary>
            Extensions to conditionally activate optional graph modules via DI based on flags and environment.
            </summary>
            <remarks>
            Supports enabling Streaming, Checkpointing (+Recovery), HITL and Multi‑Agent subsystems using
            feature flags that can be provided in code or via environment variables.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.ModuleActivationExtensions.AddGraphModules(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Extensions.GraphModuleActivationOptions})">
            <summary>
            Adds optional graph modules to the kernel builder based on provided flags and environment variables.
            </summary>
            <param name="builder">Kernel builder</param>
            <param name="configure">Optional configuration for module activation flags</param>
            <returns>Kernel builder for chaining</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.GraphModuleActivationOptions">
            <summary>
            Activation flags for optional graph modules. Supports environment overrides.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphModuleActivationOptions.EnableStreaming">
            <summary>
            Enables streaming components (event stream connection pool, reconnection manager).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphModuleActivationOptions.EnableCheckpointing">
            <summary>
            Enables checkpointing services and factories.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphModuleActivationOptions.EnableRecovery">
            <summary>
            Enables recovery integration. Effective only when checkpointing is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphModuleActivationOptions.EnableHumanInTheLoop">
            <summary>
            Enables Human-in-the-Loop (registers in-memory store and a Web API backed channel by default).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.GraphModuleActivationOptions.EnableMultiAgent">
            <summary>
            Enables multi-agent infrastructure (connection pool and options).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.GraphModuleActivationOptions.ApplyEnvironmentOverrides">
            <summary>
            Applies environment variable overrides for all flags.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.MultiAgentExtensions">
            <summary>
            Extension methods for enabling multi-agent functionality with Semantic Kernel.
            Provides fluent API for configuring and using multi-agent coordination.
            </summary>
            <remarks>
            Adds thin wrappers over <see cref="T:SemanticKernel.Graph.Core.MultiAgentCoordinator"/> for creation, agent registration, workflows,
            health checks e shared state. Métodos são assíncronos onde apropriado e respeitam cancelamento.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.CreateMultiAgentCoordinator(Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Core.MultiAgentOptions)">
            <summary>
            Creates a multi-agent coordinator from the kernel.
            </summary>
            <param name="kernel">Kernel instance</param>
            <param name="options">Multi-agent configuration options</param>
            <returns>Configured multi-agent coordinator</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.RegisterAsAgentAsync(SemanticKernel.Graph.Integration.IGraphExecutor,SemanticKernel.Graph.Core.MultiAgentCoordinator,System.String,SemanticKernel.Graph.Core.AgentRole,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Registers a graph executor as an agent with the coordinator.
            </summary>
            <param name="executor">Graph executor instance</param>
            <param name="coordinator">Multi-agent coordinator</param>
            <param name="agentId">Unique agent identifier</param>
            <param name="role">Agent role specification</param>
            <param name="initialState">Initial state for the agent</param>
            <returns>Task returning the registered agent instance</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.CreateRole(SemanticKernel.Graph.Integration.IGraphExecutor,System.String,System.String,System.String[])">
            <summary>
            Creates an agent role with the specified name and capabilities.
            </summary>
            <param name="executor">Graph executor instance</param>
            <param name="name">Role name</param>
            <param name="description">Role description</param>
            <param name="capabilities">Role capabilities</param>
            <returns>Configured agent role</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.RegisterAgentConnection(SemanticKernel.Graph.Core.MultiAgentCoordinator,SemanticKernel.Graph.Core.IAgentConnection)">
            <summary>
            Registers an <see cref="T:SemanticKernel.Graph.Core.IAgentConnection"/> in the coordinator's pool for reuse.
            </summary>
            <param name="coordinator">Coordinator instance</param>
            <param name="connection">Agent connection instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.RentAgentConnectionAsync(SemanticKernel.Graph.Core.MultiAgentCoordinator,System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to rent a healthy agent connection for a specific agent ID.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.CreateWorkflow(SemanticKernel.Graph.Core.MultiAgentCoordinator,System.String,System.String)">
            <summary>
            Creates a multi-agent workflow builder.
            </summary>
            <param name="coordinator">Multi-agent coordinator</param>
            <param name="workflowId">Workflow identifier</param>
            <param name="name">Workflow name</param>
            <returns>Workflow builder</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.ExecuteSimpleWorkflowAsync(SemanticKernel.Graph.Core.MultiAgentCoordinator,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Collections.Generic.IEnumerable{System.String},SemanticKernel.Graph.Core.AggregationStrategy,System.Threading.CancellationToken)">
            <summary>
            Executes a simple multi-agent workflow with automatic task distribution.
            </summary>
            <param name="coordinator">Multi-agent coordinator</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments</param>
            <param name="agentIds">Agent IDs to use</param>
            <param name="strategy">Aggregation strategy</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Multi-agent execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.GetHealthStatus(SemanticKernel.Graph.Core.AgentInstance,SemanticKernel.Graph.Core.MultiAgentCoordinator)">
            <summary>
            Gets the health status of an agent.
            </summary>
            <param name="agent">Agent instance</param>
            <param name="coordinator">Multi-agent coordinator</param>
            <returns>Agent health status if available</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.PerformHealthCheckAsync(SemanticKernel.Graph.Core.AgentInstance,SemanticKernel.Graph.Core.MultiAgentCoordinator)">
            <summary>
            Performs a health check on an agent.
            </summary>
            <param name="agent">Agent instance</param>
            <param name="coordinator">Multi-agent coordinator</param>
            <returns>Health check result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.GetSharedStateAsync(SemanticKernel.Graph.Core.MultiAgentCoordinator,System.String)">
            <summary>
            Gets the shared state for a workflow.
            </summary>
            <param name="coordinator">Multi-agent coordinator</param>
            <param name="workflowId">Workflow identifier</param>
            <returns>Shared state</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentExtensions.UpdateSharedStateAsync(SemanticKernel.Graph.Core.MultiAgentCoordinator,System.String,System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Updates the shared state for a workflow.
            </summary>
            <param name="coordinator">Multi-agent coordinator</param>
            <param name="workflowId">Workflow identifier</param>
            <param name="agentId">Agent identifier</param>
            <param name="updatedState">Updated state</param>
            <returns>Task representing the update operation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.MultiAgentWorkflowBuilder">
            <summary>
            Fluent builder for multi-agent workflows.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentWorkflowBuilder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of MultiAgentWorkflowBuilder.
            </summary>
            <param name="workflowId">Workflow identifier</param>
            <param name="name">Workflow name</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentWorkflowBuilder.WithDescription(System.String)">
            <summary>
            Sets the workflow description.
            </summary>
            <param name="description">Workflow description</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentWorkflowBuilder.AddTask(System.String,System.String,System.Action{SemanticKernel.Graph.Extensions.WorkflowTaskBuilder})">
            <summary>
            Adds a task to the workflow.
            </summary>
            <param name="taskId">Task identifier</param>
            <param name="name">Task name</param>
            <param name="configure">Task configuration action</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentWorkflowBuilder.RequireAgents(System.String[])">
            <summary>
            Adds required agents to the workflow.
            </summary>
            <param name="agentIds">Agent identifiers</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentWorkflowBuilder.WithAggregationStrategy(SemanticKernel.Graph.Core.AggregationStrategy)">
            <summary>
            Sets the aggregation strategy for the workflow.
            </summary>
            <param name="strategy">Aggregation strategy</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentWorkflowBuilder.WithMetadata(System.String,System.Object)">
            <summary>
            Adds metadata to the workflow.
            </summary>
            <param name="key">Metadata key</param>
            <param name="value">Metadata value</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.MultiAgentWorkflowBuilder.Build">
            <summary>
            Builds the workflow.
            </summary>
            <returns>Configured multi-agent workflow</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.WorkflowTaskBuilder">
            <summary>
            Fluent builder for workflow tasks.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.WorkflowTaskBuilder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of WorkflowTaskBuilder.
            </summary>
            <param name="taskId">Task identifier</param>
            <param name="name">Task name</param>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.WorkflowTaskBuilder.WithDescription(System.String)">
            <summary>
            Sets the task description.
            </summary>
            <param name="description">Task description</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.WorkflowTaskBuilder.WithPriority(System.Int32)">
            <summary>
            Sets the task priority.
            </summary>
            <param name="priority">Task priority</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.WorkflowTaskBuilder.RequireCapabilities(System.String[])">
            <summary>
            Adds required capabilities for the task.
            </summary>
            <param name="capabilities">Required capabilities</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.WorkflowTaskBuilder.WithParameter(System.String,System.Object)">
            <summary>
            Adds a parameter to the task.
            </summary>
            <param name="key">Parameter key</param>
            <param name="value">Parameter value</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.WorkflowTaskBuilder.WithEstimatedDuration(System.TimeSpan)">
            <summary>
            Sets the estimated duration for the task.
            </summary>
            <param name="duration">Estimated duration</param>
            <returns>Builder for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.WorkflowTaskBuilder.Build">
            <summary>
            Builds the workflow task.
            </summary>
            <returns>Configured workflow task</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.IMultiAgentCoordinator">
            <summary>
            Interface for multi-agent coordinator to enable dependency injection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.IMultiAgentCoordinator.ActiveAgentCount">
            <summary>
            Gets the number of currently active agents.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Extensions.IMultiAgentCoordinator.TotalAgentCount">
            <summary>
            Gets the total number of registered agents.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.IMultiAgentCoordinator.RegisterAgentAsync(System.String,SemanticKernel.Graph.Integration.IGraphExecutor,SemanticKernel.Graph.Core.AgentRole,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Registers a new agent instance with the coordinator.
            </summary>
            <param name="agentId">Unique identifier for the agent</param>
            <param name="executor">Graph executor instance</param>
            <param name="role">Agent role specification</param>
            <param name="initialState">Initial state for the agent</param>
            <returns>Task representing the registration operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.IMultiAgentCoordinator.ExecuteWorkflowAsync(SemanticKernel.Graph.Core.MultiAgentWorkflow,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes a coordinated multi-agent workflow.
            </summary>
            <param name="workflow">Workflow definition</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Aggregated workflow result</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.RecoveryExtensions">
            <summary>
            Extension methods to simplify integration with the graph recovery system.
            Provides convenient methods for setting up recovery services and notification handlers.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.ConfigureRecovery(SemanticKernel.Graph.Core.CheckpointingGraphExecutor,SemanticKernel.Graph.Core.RecoveryOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Core.GraphRecoveryService})">
            <summary>
            Configures automatic recovery for a checkpointing graph executor.
            </summary>
            <param name="executor">Checkpointing graph executor to configure</param>
            <param name="recoveryOptions">Recovery configuration options</param>
            <param name="logger">Optional logger for recovery service</param>
            <returns>The configured recovery service</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.WithLoggingNotifications(SemanticKernel.Graph.Core.GraphRecoveryService,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler})">
            <summary>
            Adds a logging notification handler to the recovery service.
            </summary>
            <param name="recoveryService">Recovery service to configure</param>
            <param name="logger">Logger for notifications</param>
            <returns>The recovery service for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.WithNotificationHandler(SemanticKernel.Graph.Core.GraphRecoveryService,SemanticKernel.Graph.Core.IRecoveryNotificationHandler)">
            <summary>
            Adds a custom notification handler to the recovery service.
            </summary>
            <param name="recoveryService">Recovery service to configure</param>
            <param name="handler">Custom notification handler</param>
            <returns>The recovery service for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.ConfigureForScenario(SemanticKernel.Graph.Core.RecoveryOptions,SemanticKernel.Graph.Extensions.RecoveryScenario)">
            <summary>
            Configures recovery options for common scenarios.
            </summary>
            <param name="options">Recovery options to configure</param>
            <param name="scenario">Recovery scenario to configure for</param>
            <returns>The configured recovery options</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.CreateRecoveryContext(System.String,SemanticKernel.Graph.Core.GraphCheckpoint,SemanticKernel.Graph.Core.ExecutionFailureContext,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a recovery context for manual recovery operations.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="sourceCheckpoint">Source checkpoint for recovery</param>
            <param name="originalFailure">Original failure context</param>
            <param name="expectedNodeId">Expected node to resume from</param>
            <param name="expectedValues">Expected state values</param>
            <returns>Recovery context for validation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.CreateFailureContext(System.String,System.String,System.Exception,System.Nullable{SemanticKernel.Graph.Core.FailureType},System.Nullable{SemanticKernel.Graph.Core.FailureSeverity},System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a failure context for testing or manual recovery scenarios.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="failedNodeId">Node that failed</param>
            <param name="exception">Exception that occurred</param>
            <param name="failureType">Type of failure</param>
            <param name="severity">Severity of failure</param>
            <param name="isRecoverable">Whether the failure is recoverable</param>
            <param name="metadata">Additional metadata</param>
            <returns>Failure context for recovery</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.IsRecoverySuccessful(SemanticKernel.Graph.Core.RecoveryResult)">
            <summary>
            Validates if a recovery result indicates successful recovery.
            </summary>
            <param name="result">Recovery result to validate</param>
            <returns>True if recovery was successful and execution can continue</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.GetSummary(SemanticKernel.Graph.Core.RecoveryResult)">
            <summary>
            Gets a human-readable summary of a recovery result.
            </summary>
            <param name="result">Recovery result to summarize</param>
            <returns>Summary string describing the recovery result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.GetSummary(SemanticKernel.Graph.Core.CheckpointHealthResult)">
            <summary>
            Gets a human-readable summary of checkpoint health.
            </summary>
            <param name="health">Checkpoint health result to summarize</param>
            <returns>Summary string describing the checkpoint health</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.ClassifyException(System.Exception)">
            <summary>
            Classifies an exception to determine failure type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.RecoveryExtensions.DetermineSeverity(System.Exception)">
            <summary>
            Determines failure severity based on exception type.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.RecoveryScenario">
            <summary>
            Predefined recovery scenarios with appropriate configuration.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Extensions.RecoveryScenario.Development">
            <summary>
            Development scenario - balanced recovery with moderate attempts.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Extensions.RecoveryScenario.Production">
            <summary>
            Production scenario - reliable recovery with good error handling.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Extensions.RecoveryScenario.HighAvailability">
            <summary>
            High availability scenario - aggressive recovery with maximum attempts.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Extensions.RecoveryScenario.Conservative">
            <summary>
            Conservative scenario - minimal recovery attempts, high confidence required.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.StateExtensions">
            <summary>
            Extension methods for state management and cloning operations.
            </summary>
            <remarks>
            All methods are non-mutating and return new instances to preserve functional semantics where possible.
            Deep clones use <see cref="!:KernelArguments.Clone"/> to avoid sharing references across states.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StateExtensions.Clone(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates a deep copy of the GraphState.
            </summary>
            <param name="state">State to clone</param>
            <returns>New GraphState with copied values</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StateExtensions.MergeFrom(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Merges another GraphState into this one, with the other state taking priority for conflicts.
            </summary>
            <param name="state">Base state to merge into</param>
            <param name="other">Other state to merge from</param>
            <returns>New GraphState with merged values</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StateExtensions.GetValueAsString(Microsoft.SemanticKernel.FunctionResult)">
            <summary>
            Gets the string representation of a FunctionResult value.
            </summary>
            <param name="result">Function result</param>
            <returns>String value or empty string if null</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.StreamingExtensions">
            <summary>
            Extension methods for streaming graph execution functionality.
            Provides fluent API for configuring and consuming streaming execution.
            </summary>
            <remarks>
            Streaming APIs expose strongly-typed events via <see cref="T:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream"/>, helpers to
            convert to web-friendly DTOs/SSE, and builders for execution options. Methods are designed to be
            allocation-aware and cancellation-friendly for long-running streams.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.AsStreamingExecutor(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Converts a regular GraphExecutor to a StreamingGraphExecutor.
            </summary>
            <param name="executor">Source executor</param>
            <returns>Streaming-enabled executor</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.Configure(SemanticKernel.Graph.Streaming.StreamingExecutionOptions)">
            <summary>
            Configures streaming execution options with fluent API.
            </summary>
            <param name="options">Options to configure</param>
            <returns>Fluent configuration builder</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.CreateStreamingOptions">
            <summary>
            Creates streaming execution options with default values.
            </summary>
            <returns>New streaming options with defaults</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.AddGraphStreamingPool(Microsoft.SemanticKernel.IKernelBuilder,System.Action{SemanticKernel.Graph.Streaming.StreamingPoolOptions})">
            <summary>
            Registers a streaming connection pool and its dependencies in DI.
            </summary>
            <param name="builder">Kernel builder instance</param>
            <param name="configure">Optional configuration for pool options</param>
            <returns>Kernel builder</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.AddGraphStreamingConnection(Microsoft.SemanticKernel.IKernelBuilder,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{SemanticKernel.Graph.Streaming.IGraphExecutionEventStream}},System.Func{SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,System.Threading.Tasks.Task{System.Boolean}},SemanticKernel.Graph.Streaming.ReconnectionOptions,System.Nullable{System.Int32})">
            <summary>
            Registers a connection into the streaming pool with optional priority.
            </summary>
            <param name="builder">Kernel builder</param>
            <param name="connectionId">Connection id</param>
            <param name="factory">Factory to create the stream</param>
            <param name="healthChecker">Health checker</param>
            <param name="reconnectOptions">Reconnection options</param>
            <param name="priority">Priority (weight) for scheduling; higher means more frequent selection</param>
            <returns>Kernel builder</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.FilterEventTypes(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,SemanticKernel.Graph.Streaming.GraphExecutionEventType[])">
            <summary>
            Filters an event stream to only include specific event types.
            </summary>
            <param name="stream">Source event stream</param>
            <param name="eventTypes">Event types to include</param>
            <returns>Filtered event stream</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.FilterNodeEvents(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream)">
            <summary>
            Filters an event stream to only include node-related events.
            </summary>
            <param name="stream">Source event stream</param>
            <returns>Filtered event stream</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.FilterExecutionEvents(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream)">
            <summary>
            Filters an event stream to only include execution lifecycle events.
            </summary>
            <param name="stream">Source event stream</param>
            <returns>Filtered event stream</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.WithBuffering(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,System.Int32)">
            <summary>
            Buffers events from the stream with the specified buffer size.
            </summary>
            <param name="stream">Source event stream</param>
            <param name="bufferSize">Number of events to buffer</param>
            <returns>Buffered event stream</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.ToApiResponses(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,System.Threading.CancellationToken)">
            <summary>
            Converts stream events to a more consumable format for web APIs.
            </summary>
            <param name="stream">Source event stream</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Stream of API-friendly event responses</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.WithHeartbeat(System.Collections.Generic.IAsyncEnumerable{SemanticKernel.Graph.Streaming.StreamingEventResponse},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds heartbeat events to a stream for connection monitoring.
            </summary>
            <param name="stream">Source event stream</param>
            <param name="interval">Heartbeat interval</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Stream with heartbeat events</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.ToServerSentEvents(System.Collections.Generic.IAsyncEnumerable{SemanticKernel.Graph.Streaming.StreamingEventResponse},System.Threading.CancellationToken)">
            <summary>
            Converts a stream to Server-Sent Events format.
            </summary>
            <param name="stream">Source stream</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Stream of SSE-formatted strings</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.HandleEventsAsync(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,System.Func{SemanticKernel.Graph.Streaming.GraphExecutionEvent,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Handles stream events with a provided handler function.
            </summary>
            <param name="stream">Source event stream</param>
            <param name="handler">Event handler function</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the handling operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.HandleEventsAsync(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,System.Action{SemanticKernel.Graph.Streaming.GraphExecutionEvent},System.Threading.CancellationToken)">
            <summary>
            Handles stream events with a provided synchronous handler function.
            </summary>
            <param name="stream">Source event stream</param>
            <param name="handler">Event handler function</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the handling operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.ToListAsync(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,System.Threading.CancellationToken)">
            <summary>
            Collects all events from the stream into a list.
            </summary>
            <param name="stream">Source event stream</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of all events</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingExtensions.WaitForEventAsync(SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,SemanticKernel.Graph.Streaming.GraphExecutionEventType,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Waits for the first event of a specific type from the stream.
            </summary>
            <param name="stream">Source event stream</param>
            <param name="eventType">Event type to wait for</param>
            <param name="timeout">Optional timeout</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The first event of the specified type, or null if timeout</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder">
            <summary>
            Fluent builder for streaming execution options.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithBufferSize(System.Int32)">
            <summary>
            Sets the buffer size for event streams.
            </summary>
            <param name="bufferSize">Buffer size in number of events</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithMaxBufferSize(System.Int32)">
            <summary>
            Sets the maximum buffer size before backpressure.
            </summary>
            <param name="maxBufferSize">Maximum buffer size</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithAutoReconnect(System.Boolean)">
            <summary>
            Enables or disables automatic reconnection.
            </summary>
            <param name="enable">Whether to enable auto-reconnect</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithMaxReconnectAttempts(System.Int32)">
            <summary>
            Sets the maximum number of reconnection attempts.
            </summary>
            <param name="maxAttempts">Maximum reconnection attempts</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithInitialReconnectDelay(System.TimeSpan)">
            <summary>
            Sets the initial reconnection delay.
            </summary>
            <param name="delay">Initial delay before reconnection</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithMaxReconnectDelay(System.TimeSpan)">
            <summary>
            Sets the maximum reconnection delay.
            </summary>
            <param name="maxDelay">Maximum delay for exponential backoff</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithEventTypes(SemanticKernel.Graph.Streaming.GraphExecutionEventType[])">
            <summary>
            Configures which event types to emit.
            </summary>
            <param name="eventTypes">Event types to emit</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithStateSnapshots(System.Boolean)">
            <summary>
            Enables or disables state snapshots in events.
            </summary>
            <param name="include">Whether to include state snapshots</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithHeartbeat(System.TimeSpan)">
            <summary>
            Enables heartbeat events.
            </summary>
            <param name="interval">Heartbeat interval</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.WithEventHandler(SemanticKernel.Graph.Streaming.IGraphExecutionEventHandler)">
            <summary>
            Adds an event handler to the options.
            </summary>
            <param name="handler">Event handler to add</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Extensions.StreamingOptionsBuilder.Build">
            <summary>
            Gets the configured streaming options.
            </summary>
            <returns>Configured streaming options</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter">
            <summary>
            Advanced converter that turns Semantic Kernel plugins and functions into graph nodes.
            Supports caching, hot‑reloading, template‑based conversion, intelligent connections,
            and enrichment with plugin registry metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.#ctor(SemanticKernel.Graph.Integration.IPluginRegistry,SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter})">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter"/>.
            </summary>
            <param name="pluginRegistry">Plugin registry used for metadata and lifecycle operations.</param>
            <param name="options">Converter configuration options.</param>
            <param name="logger">Optional logger instance.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.ConvertFunctionToNode(Microsoft.SemanticKernel.KernelFunction)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.ConvertFunctionToNode(Microsoft.SemanticKernel.KernelFunction,System.String,System.Action{SemanticKernel.Graph.Nodes.FunctionGraphNode})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.ConvertFunctionToNodeAsync(Microsoft.SemanticKernel.KernelFunction,System.String,System.Action{SemanticKernel.Graph.Nodes.FunctionGraphNode})">
            <summary>
            Converts a single function to a graph node asynchronously.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.ConvertPluginToNodes(Microsoft.SemanticKernel.KernelPlugin)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.ConvertPluginToNodes(Microsoft.SemanticKernel.KernelPlugin,System.Action{SemanticKernel.Graph.Nodes.FunctionGraphNode,Microsoft.SemanticKernel.KernelFunction})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.ConvertPluginToNodesAsync(Microsoft.SemanticKernel.KernelPlugin,System.Action{SemanticKernel.Graph.Nodes.FunctionGraphNode,Microsoft.SemanticKernel.KernelFunction})">
            <summary>
            Converts all functions of a plugin to graph nodes asynchronously.
            May perform parallel conversion depending on options.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.ConvertPluginToConnectedNodes(Microsoft.SemanticKernel.KernelPlugin,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.AnalyzePluginConnections(Microsoft.SemanticKernel.KernelPlugin)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.ConvertPluginWithTemplateAsync(Microsoft.SemanticKernel.KernelPlugin,System.String)">
            <summary>
            Converts a plugin using a registered conversion template.
            </summary>
            <param name="plugin">The plugin to convert.</param>
            <param name="templateName">The template name to apply.</param>
            <returns>The nodes created using the template.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.RegisterConversionTemplate(System.String,SemanticKernel.Graph.Integration.PluginConversionTemplate)">
            <summary>
            Registers a conversion template for reuse.
            </summary>
            <param name="templateName">Template name.</param>
            <param name="template">Conversion template instance.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AdvancedPluginToNodeConverter.HotReloadPluginAsync(Microsoft.SemanticKernel.KernelPlugin)">
            <summary>
            Hot‑reloads a plugin and updates existing nodes by clearing related cache entries
            and re‑converting all functions.
            </summary>
            <param name="plugin">The updated plugin.</param>
            <returns>The updated nodes.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions">
            <summary>
            Configuration options for the advanced plugin converter.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.EnableCaching">
            <summary>Enables caching of converted nodes by id.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.MaxCacheSize">
            <summary>Maximum number of cached nodes.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.EnableCacheCleanup">
            <summary>Enables periodic cache cleanup.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.CacheCleanupInterval">
            <summary>Interval between cache cleanup runs.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.EnableParallelConversion">
            <summary>Enables parallel conversion when plugin size exceeds the threshold.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.ParallelConversionThreshold">
            <summary>Function count threshold to switch to parallel conversion.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.MaxParallelTasks">
            <summary>Maximum degree of parallelism for conversion tasks.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.ContinueOnConversionError">
            <summary>Whether to keep converting remaining functions when one fails.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.DefaultConnectionStrategy">
            <summary>Default node connection strategy when connecting plugin functions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.AdvancedPluginConverterOptions.EnablePluginOptimizations">
            <summary>Enables optional plugin‑level optimizations on the produced nodes.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.NodeConnectionStrategy">
            <summary>
            Strategies for connecting nodes generated from a plugin.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ConnectionCompatibilityResult">
            <summary>
            Result of a connection compatibility analysis between two functions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginConversionTemplate">
            <summary>
            Base class for plugin conversion templates.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SearchFunctionTemplate">
            <summary>
            Template for search‑type functions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GeneratorFunctionTemplate">
            <summary>
            Template for generator‑type functions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TransformerFunctionTemplate">
            <summary>
            Template for transformer‑type functions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ApplicationInsightsTelemetryAdapter">
            <summary>
            Reflection-based adapter that binds an Application Insights TelemetryClient (provided at runtime)
            to the <see cref="T:SemanticKernel.Graph.Integration.IGraphTelemetry"/> abstraction without introducing a compile-time dependency.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ApplicationInsightsTelemetryAdapter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the adapter.
            </summary>
            <param name="telemetryClient">An instance of Microsoft.ApplicationInsights.TelemetryClient</param>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.AzureAdBearerTokenValidator">
            <summary>
            Lightweight Azure AD JWT validator focusing on claim checks.
            Signature/issuer/audience validation should be handled by the hosting framework (e.g., ASP.NET middleware).
            This class verifies required scopes/app roles in already validated tokens and performs basic time validity checks
            based on <c>nbf</c> (not-before) and <c>exp</c> (expiration) claims when present.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.AzureKeyVaultSecretResolver">
            <summary>
            Reflection-based resolver that can pull secrets from Azure Key Vault if the hosting app
            provides Azure SDK clients at runtime. Avoids compile-time dependency on Azure.* packages.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.AzureKeyVaultSecretResolver.#ctor(System.Object)">
            <summary>
            Initializes a new instance using an Azure.Security.KeyVault.Secrets.SecretClient instance.
            </summary>
            <param name="secretClient">An Azure Key Vault SecretClient instance (from Azure SDK)</param>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.BpmnGraphExporter">
            <summary>
            Minimal BPMN 2.0 XML exporter for graphs. Produces a simplified process with tasks and sequence flows.
            Focuses on portability over full BPMN coverage.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine">
            <summary>
            Specialized template engine for Chain-of-Thought reasoning patterns.
            Provides domain-optimized templates and advanced template features for structured reasoning.
            </summary>
            <remarks>
            The ChainOfThoughtTemplateEngine extends standard templating with:
            1. **Domain Templates**: Pre-built templates for different reasoning types
            2. **Step Progression**: Templates that adapt based on reasoning step number
            3. **Context Awareness**: Templates that incorporate previous reasoning steps
            4. **Quality Optimization**: Templates optimized for reasoning quality
            5. **Localization Support**: Multi-language template support
            
            Key features:
            - Reasoning-specific templates: Optimized for different Chain-of-Thought patterns
            - Progressive templates: Different templates for different reasoning stages
            - Context integration: Seamless integration of previous reasoning steps
            - Quality scoring: Built-in template quality assessment
            - Template validation: Comprehensive template validation and testing
            - Performance optimization: Compiled templates with intelligent caching
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.#ctor(SemanticKernel.Graph.Integration.ChainOfThoughtTemplateOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine})">
            <summary>
            Initializes a new instance of ChainOfThoughtTemplateEngine.
            </summary>
            <param name="options">Template engine configuration options</param>
            <param name="logger">Optional logger for template operations</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.RenderAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.RenderWithStateAsync(System.String,SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.RenderWithArgumentsAsync(System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.CompileTemplate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.RenderCompiledAsync(SemanticKernel.Graph.Integration.ICompiledTemplate,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.ValidateTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.ExtractVariableNames(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.RegisterHelper(System.String,System.Func{System.Object[],System.String})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.RegisterAsyncHelper(System.String,System.Func{System.Object[],System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.GetReasoningTemplate(SemanticKernel.Graph.Nodes.ChainOfThoughtType,System.Int32,System.String)">
            <summary>
            Gets a pre-built template for a specific reasoning type and step.
            </summary>
            <param name="reasoningType">Type of reasoning</param>
            <param name="stepNumber">Step number in the reasoning chain</param>
            <param name="language">Optional language code (default: "en")</param>
            <returns>Template string optimized for the specified reasoning type and step</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.RenderReasoningTemplateAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtType,System.Int32,SemanticKernel.Graph.Nodes.ChainOfThoughtContext,System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ChainOfThoughtStep},System.Threading.CancellationToken)">
            <summary>
            Renders a reasoning template with Chain-of-Thought specific context.
            </summary>
            <param name="reasoningType">Type of reasoning</param>
            <param name="stepNumber">Current step number</param>
            <param name="context">Reasoning context</param>
            <param name="previousSteps">Previous reasoning steps</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered template</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.GetTemplateSuggestions(System.String,System.Double,SemanticKernel.Graph.Nodes.ChainOfThoughtType)">
            <summary>
            Gets template suggestions based on reasoning quality analysis.
            </summary>
            <param name="currentTemplate">Current template being used</param>
            <param name="qualityScore">Current reasoning quality score</param>
            <param name="reasoningType">Type of reasoning</param>
            <returns>List of template improvement suggestions</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.InitializeDomainLibraries">
            <summary>
            Initializes domain-specific template libraries.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.GetOrCompileTemplate(System.String)">
            <summary>
            Gets or compiles a template from cache.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.RenderTemplateAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Renders a template with the provided context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.ConvertToContextDictionary(System.Object)">
            <summary>
            Converts context object to dictionary format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.ValidateChainOfThoughtRequirements(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Validates Chain-of-Thought specific template requirements.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.BuildReasoningContext(SemanticKernel.Graph.Nodes.ChainOfThoughtContext,System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ChainOfThoughtStep},System.Int32)">
            <summary>
            Builds reasoning context for template rendering.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.FormatContextValue(System.Object)">
            <summary>
            Formats a context value for template substitution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.HandleRemainingVariables(System.String)">
            <summary>
            Handles remaining unsubstituted variables in template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateEngine.GetFallbackTemplate(SemanticKernel.Graph.Nodes.ChainOfThoughtType,System.Int32)">
            <summary>
            Gets a fallback template when domain library is not available.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateOptions">
            <summary>
            Configuration options for Chain-of-Thought template engine.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateOptions.DefaultLanguage">
            <summary>Default language for templates.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateOptions.MaxCacheSize">
            <summary>Maximum template cache size.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateOptions.EnableQualityScoring">
            <summary>Whether to enable template quality scoring.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ChainOfThoughtTemplateOptions.ValidationLevel">
            <summary>Template validation strictness level.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.CompiledChainOfThoughtTemplate">
            <summary>
            Compiled Chain-of-Thought template with additional metadata.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.CompiledChainOfThoughtTemplate.QualityScore">
            <summary>Quality score of the template (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.CompiledChainOfThoughtTemplate.UsageCount">
            <summary>Usage count for this template.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateLibrary">
            <summary>
            Template library for a specific reasoning domain.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateSuggestion">
            <summary>
            Template improvement suggestion.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateSuggestion.Type">
            <summary>Type of suggestion.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateSuggestion.Description">
            <summary>Description of the suggestion.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateSuggestion.Priority">
            <summary>Priority level of the suggestion.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateSuggestion.SuggestedTemplate">
            <summary>Suggested template improvement, if available.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SuggestionType">
            <summary>
            Types of template suggestions.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SuggestionType.Clarity">
            <summary>Suggestion for improving clarity.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SuggestionType.Context">
            <summary>Suggestion for better context integration.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SuggestionType.Progression">
            <summary>Suggestion for better step progression.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SuggestionType.Quality">
            <summary>Suggestion for quality improvement.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SuggestionPriority">
            <summary>
            Priority levels for template suggestions.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SuggestionPriority.Low">
            <summary>Low priority suggestion.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SuggestionPriority.Medium">
            <summary>Medium priority suggestion.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SuggestionPriority.High">
            <summary>High priority suggestion.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SuggestionPriority.Critical">
            <summary>Critical priority suggestion.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateValidationLevel">
            <summary>
            Template validation strictness levels.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.TemplateValidationLevel.Basic">
            <summary>Basic validation only.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.TemplateValidationLevel.Standard">
            <summary>Standard validation with warnings.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.TemplateValidationLevel.Strict">
            <summary>Strict validation with comprehensive checks.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions">
            <summary>
            Extension methods for enhanced checkpoint integration with GraphMemoryService.
            Provides specialized functionality for storing and retrieving checkpoint-related data.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions.StoreCheckpointAsync(SemanticKernel.Graph.Integration.IGraphMemoryService,SemanticKernel.Graph.Core.GraphCheckpoint,System.Threading.CancellationToken)">
            <summary>
            Stores a checkpoint in the graph memory service with enhanced metadata.
            </summary>
            <param name="memoryService">Graph memory service</param>
            <param name="checkpoint">Checkpoint to store</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions.GetCheckpointsForExecutionAsync(SemanticKernel.Graph.Integration.IGraphMemoryService,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves checkpoints for a specific execution from memory.
            </summary>
            <param name="memoryService">Graph memory service</param>
            <param name="executionId">Execution identifier</param>
            <param name="limit">Maximum number of checkpoints to retrieve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of checkpoints for the execution</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions.FindSimilarCheckpointsAsync(SemanticKernel.Graph.Integration.IGraphMemoryService,SemanticKernel.Graph.State.GraphState,System.Int32,System.Double,System.Threading.CancellationToken)">
            <summary>
            Finds checkpoints similar to a given graph state.
            </summary>
            <param name="memoryService">Graph memory service</param>
            <param name="currentState">Current graph state to match against</param>
            <param name="limit">Maximum number of results</param>
            <param name="minSimilarity">Minimum similarity threshold</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of similar checkpoints</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions.StoreCheckpointValidationAsync(SemanticKernel.Graph.Integration.IGraphMemoryService,System.String,SemanticKernel.Graph.Core.CheckpointValidationResult,System.Threading.CancellationToken)">
            <summary>
            Stores checkpoint validation results in memory for audit purposes.
            </summary>
            <param name="memoryService">Graph memory service</param>
            <param name="checkpointId">Checkpoint identifier</param>
            <param name="validationResult">Validation result to store</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions.GetCheckpointValidationHistoryAsync(SemanticKernel.Graph.Integration.IGraphMemoryService,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the validation history for a specific checkpoint.
            </summary>
            <param name="memoryService">Graph memory service</param>
            <param name="checkpointId">Checkpoint identifier</param>
            <param name="limit">Maximum number of validation results to retrieve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of validation results</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions.StoreCheckpointBackupInfoAsync(SemanticKernel.Graph.Integration.IGraphMemoryService,System.String,SemanticKernel.Graph.Core.CheckpointBackupResult,System.Threading.CancellationToken)">
            <summary>
            Stores checkpoint backup information in memory.
            </summary>
            <param name="memoryService">Graph memory service</param>
            <param name="executionId">Execution identifier</param>
            <param name="backupResult">Backup operation result</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions.CleanupCheckpointMemoryAsync(SemanticKernel.Graph.Integration.IGraphMemoryService,SemanticKernel.Graph.Core.CheckpointRetentionPolicy,System.Threading.CancellationToken)">
            <summary>
            Performs cleanup of checkpoint-related memory entries based on retention policy.
            </summary>
            <param name="memoryService">Graph memory service</param>
            <param name="retentionPolicy">Retention policy to apply</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entries removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.CheckpointMemoryExtensions.CreateCheckpointFromMemory(SemanticKernel.Graph.Integration.GraphExecutionMemory)">
            <summary>
            Creates a GraphCheckpoint from a GraphExecutionMemory.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.CheckpointValidationHistory">
            <summary>
            Represents the validation history for a specific checkpoint.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.CheckpointValidationHistory.CheckpointId">
            <summary>
            Gets the checkpoint identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.CheckpointValidationHistory.ValidatedAt">
            <summary>
            Gets the timestamp when the validation was performed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.CheckpointValidationHistory.IsValid">
            <summary>
            Gets whether the checkpoint was valid at the time of validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.CheckpointValidationHistory.ErrorMessage">
            <summary>
            Gets the error message if the checkpoint was invalid.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.CheckpointValidationHistory.ValidationDetails">
            <summary>
            Gets additional validation details.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ExecuteGraphRequest">
            <summary>
            Request payload for executing a graph remotely.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ExecuteGraphRequest.GraphName">
            <summary>
            Gets or sets the name of the graph to execute.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ExecuteGraphRequest.StartNodeId">
            <summary>
            Gets or sets an optional start node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ExecuteGraphRequest.Variables">
            <summary>
            Gets or sets initial variables passed as <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ExecuteGraphRequest.TimeoutSeconds">
            <summary>
            Gets or sets an optional execution timeout in seconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ExecuteGraphRequest.IdempotencyKey">
            <summary>
            Optional idempotency key to deduplicate execution creation.
            When provided, repeated requests with the same key and identical payload
            will return the original response instead of creating a new execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HealthCheckResponse">
            <summary>
            Response model for a service health check.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ReadinessCheckResponse">
            <summary>
            Response model for a service readiness check.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HitlApiModels">
            <summary>
            Models for Human-in-the-Loop Web API channel operations.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ExecuteGraphResponse">
            <summary>
            Response payload for graph execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.EnqueueExecutionRequest">
            <summary>
            Request payload for enqueuing a graph execution with priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.EnqueueExecutionRequest.GraphName">
            <summary>
            Graph to execute.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.EnqueueExecutionRequest.StartNodeId">
            <summary>
            Optional start node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.EnqueueExecutionRequest.Variables">
            <summary>
            Initial variables.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.EnqueueExecutionRequest.TimeoutSeconds">
            <summary>
            Optional overall timeout in seconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.EnqueueExecutionRequest.Priority">
            <summary>
            Priority for queue ordering. Defaults to Normal.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.EnqueueExecutionResponse">
            <summary>
            Response payload for an enqueued execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ExecutionPageRequest">
            <summary>
            Pagination request for listing executions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ExecutionSummaryLite">
            <summary>
            Lightweight execution summary for inspection.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ExecutionPageResponse">
            <summary>
            Page of execution summaries.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ImportVisualGraphRequest">
            <summary>
            Request model for importing a graph from a visual editor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ImportVisualGraphRequest.Definition">
            <summary>
            Gets or sets the definition to import.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ImportVisualGraphResponse">
            <summary>
            Response model for an imported visual graph.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphRestApiOptions">
            <summary>
            Options for REST API behavior such as authentication and throttling.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.ApiKey">
            <summary>
            Optional API key for simple header-based authentication ("x-api-key").
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.MaxConcurrentExecutions">
            <summary>
            Gets or sets the maximum concurrent executions allowed per process.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.DefaultTimeout">
            <summary>
            Gets or sets the default execution timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.EnableRequestLogging">
            <summary>
            Enables lightweight request logging.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.RequireAuthentication">
            <summary>
            When true, requests must present valid authentication according to the enabled mechanisms.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.EnableBearerTokenAuth">
            <summary>
            Enables bearer token authentication (e.g., Azure AD). Requires a validator to be registered in DI.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.RequiredScopes">
            <summary>
            Optional list of required OAuth scopes for bearer token auth.
            If empty, no scope validation is enforced by this layer.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.RequiredAppRoles">
            <summary>
            Optional list of required application roles for bearer token auth.
            If empty, no app role validation is enforced by this layer.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.EnableSecurityContextEnrichment">
            <summary>
            When true, the API will enrich telemetry with security context (e.g., AAD ids, correlation id).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.CorrelationIdHeaderName">
            <summary>
            Optional header name to read correlation id from when using framework adapters.
            Defaults to "X-Correlation-Id".
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.EnableIdempotency">
            <summary>
            Enables idempotency for execution creation requests.
            When true, the API will cache responses for the configured <see cref="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.IdempotencyWindow"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.IdempotencyKeyHeaderName">
            <summary>
            Optional header name to read the idempotency key from when adapters are used.
            Defaults to "Idempotency-Key". If the request model already provides <c>IdempotencyKey</c>,
            that value takes precedence over the header.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.IdempotencyWindow">
            <summary>
            Time window to keep idempotency records before they expire.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.MaxIdempotencyEntries">
            <summary>
            Maximum number of idempotency entries to keep in memory.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.EnableRateLimiting">
            <summary>
            Enables API-level rate limiting. When true, requests will be gated according to the limits below.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.RateLimitWindow">
            <summary>
            Size of the sliding window used for rate limiting.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.GlobalRequestsPerWindow">
            <summary>
            Optional global cap of requests per window across all callers. Set to 0 or negative to disable.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.PerApiKeyRequestsPerWindow">
            <summary>
            Optional per-API-key cap of requests per window. Key is read from the request parameter or header.
            Set to 0 or negative to disable.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.PerTenantRequestsPerWindow">
            <summary>
            Optional per-tenant cap of requests per window (using <c>ApiRequestSecurityContext.TenantId</c> when provided).
            Set to 0 or negative to disable.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.EnableExecutionQueue">
            <summary>
            Enables in-process execution queue with priority scheduling.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.QueueMaxLength">
            <summary>
            Maximum number of pending items allowed in the queue.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphRestApiOptions.QueuePollInterval">
            <summary>
            Polling interval for the background queue processor.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphExecutorFactory">
            <summary>
            Default implementation of IGraphExecutorFactory that creates GraphExecutor instances
            with integrated Semantic Kernel services.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphExecutorFactory.#ctor(SemanticKernel.Graph.Extensions.GraphOptions,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.GraphExecutorFactory})">
            <summary>
            Initializes a new instance of GraphExecutorFactory.
            </summary>
            <param name="options">Graph configuration options</param>
            <param name="serviceProvider">Service provider for dependency injection</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphExecutorFactory.CreateExecutor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphExecutorFactory.CreateExecutor(System.String,Microsoft.Extensions.Logging.ILogger,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphExecutorFactory.CreateFromPlugins(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphExecutorFactory.ApplyGlobalOptions(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Applies global configuration options to a GraphExecutor.
            </summary>
            <param name="executor">GraphExecutor to configure</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphExecutorFactory.RegisterAsync(SemanticKernel.Graph.Core.GraphExecutor)">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Integration.LangGraphJsonImporter">
            <summary>
            Minimal importer that understands a subset of LangGraph/LangChain-like JSON to build a <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/>.
            This is intentionally pragmatic: supports nodes, edges, and function nodes mapped to SK plugins/functions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.VisualGraphImporter">
            <summary>
            Importer of <see cref="T:SemanticKernel.Graph.Integration.VisualGraphDefinition"/> produced by a visual editor.
            Keeps parity with the JSON importer while using a strong type for safety.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.VisualGraphImporter.ImportAsync(SemanticKernel.Graph.Integration.VisualGraphDefinition,System.Threading.CancellationToken)">
            <summary>
            Imports a <see cref="T:SemanticKernel.Graph.Integration.VisualGraphDefinition"/> into a configured <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphLLMProvider">
            <summary>
            Basic implementation of IGraphLLMProvider that wraps and manages LLM services
            for graph execution. Provides model selection and cost estimation capabilities.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphLLMProvider.#ctor(SemanticKernel.Graph.Extensions.GraphLLMOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.GraphLLMProvider})">
            <summary>
            Initializes a new instance of GraphLLMProvider.
            </summary>
            <param name="options">LLM provider options</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphLLMProvider.AvailableModels">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphLLMProvider.DefaultModel">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphLLMProvider.IsAvailable">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphLLMProvider.CreateKernel(System.String,SemanticKernel.Graph.Integration.LLMOptions)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphLLMProvider.GetOptimalModel(SemanticKernel.Graph.Integration.LLMTaskType,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphLLMProvider.EstimateCost(System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphLLMProvider.InitializeModelCatalog">
            <summary>
            Initializes the model catalog with available models and their properties.
            </summary>
            <returns>Dictionary of model information keyed by model name</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphLLMProvider.LLMModelInfo">
            <summary>
            Information about an LLM model.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphMemoryService">
            <summary>
            Default implementation of IGraphMemoryService that integrates with Semantic Kernel's memory system.
            Provides in-memory storage with optional persistence layer integration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.#ctor(SemanticKernel.Graph.Extensions.GraphMemoryOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.GraphMemoryService})">
            <summary>
            Initializes a new instance of GraphMemoryService.
            </summary>
            <param name="options">Memory configuration options</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.StoreExecutionContextAsync(System.String,SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.FindSimilarExecutionsAsync(SemanticKernel.Graph.State.GraphState,System.Int32,System.Double,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.SearchRelevantMemoryAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.StoreNodeExecutionAsync(System.String,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.GetNodeHistoryAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.ClearMemoryAsync(SemanticKernel.Graph.Integration.MemoryFilter,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.CalculateStateSimilarity(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Calculates similarity between two graph states based on parameter names and values.
            </summary>
            <param name="state1">First state</param>
            <param name="state2">Second state</param>
            <returns>Similarity score between 0.0 and 1.0</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.CalculateTextSimilarity(System.String,System.String)">
            <summary>
            Calculates text similarity using simple string matching.
            </summary>
            <param name="text1">First text</param>
            <param name="text2">Second text</param>
            <returns>Similarity score between 0.0 and 1.0</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphMemoryService.SerializeArguments(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Serializes kernel arguments to a string representation.
            </summary>
            <param name="arguments">Arguments to serialize</param>
            <returns>String representation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphRegistry">
            <summary>
            Default in-memory implementation of <see cref="T:SemanticKernel.Graph.Integration.IGraphRegistry"/>.
            Thread-safe and suitable for single-process hosting scenarios.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphRestApi">
            <summary>
            Framework-agnostic service layer for exposing graph execution and inspection over REST-like APIs.
            This can be adapted to ASP.NET Minimal APIs, Controllers, or any HTTP framework.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.ListGraphsAsync">
            <summary>
            Lists registered graphs.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.ExecuteAsync(SemanticKernel.Graph.Integration.ExecuteGraphRequest,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a graph request and returns a structured response.
            Callers must ensure any HTTP-specific auth or rate limiting before invoking this.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.ExecuteWithSecurityAsync(SemanticKernel.Graph.Integration.ExecuteGraphRequest,SemanticKernel.Graph.Integration.ApiRequestSecurityContext,System.Threading.CancellationToken)">
            <summary>
            Executes a graph request using a structured security context (API key and/or bearer token).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.EnqueueAsync(SemanticKernel.Graph.Integration.EnqueueExecutionRequest,System.String,System.Threading.CancellationToken)">
            <summary>
            Enqueues an execution for background processing honoring priority and queue capacity.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.EnqueueWithSecurityAsync(SemanticKernel.Graph.Integration.EnqueueExecutionRequest,SemanticKernel.Graph.Integration.ApiRequestSecurityContext,System.Threading.CancellationToken)">
            <summary>
            Enqueues an execution with security context (headers/tenant).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.ListActiveExecutions(SemanticKernel.Graph.Integration.ExecutionPageRequest)">
            <summary>
            Lists active executions with pagination for inspection.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.GetHealthAsync">
            <summary>
            Returns process-level health information suitable for liveness probes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.GetReadinessAsync">
            <summary>
            Returns readiness information suitable for startup/readiness probes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.Authenticate(System.String)">
            <summary>
            Simple API-key header authentication. Integrators can extend/replace this in the hosting layer.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.TryGetCorrelationIdFromHttpContext(System.String)">
            <summary>
            Attempts to get the correlation id from the current HTTP context using reflection only,
            to avoid a hard dependency on ASP.NET Core packages in this library.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.ImportVisualGraphAsync(SemanticKernel.Graph.Integration.ImportVisualGraphRequest,System.Threading.CancellationToken)">
            <summary>
            Imports a graph definition produced by a visual editor and registers it for remote execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.ExportPrometheusMetricsAsync(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Exports Prometheus-formatted metrics for a named graph if metrics are enabled.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.ExportDashboardTextAsync(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Generates a text dashboard for quick status visualization for a named graph.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.HitlCreateRequestAsync(SemanticKernel.Graph.Integration.HitlApiModels.CreateRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new pending HITL request in the backing store for a web UI to pick up.
            Returns the created request id.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.HitlListPendingAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Lists pending HITL requests optionally filtered by execution or node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.HitlSubmitResponseAsync(SemanticKernel.Graph.Integration.HitlApiModels.SubmitResponse,System.Threading.CancellationToken)">
            <summary>
            Submits a human response to a pending request.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.HitlCancelRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a pending request.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.HitlGetStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the current status of a request.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.GraphRestApi.HitlListAuditAsync(SemanticKernel.Graph.Integration.HitlApiModels.AuditQuery,System.Threading.CancellationToken)">
            <summary>
            Lists HITL audit entries stored in the memory service.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine">
            <summary>
            Basic implementation of IGraphTemplateEngine that provides Handlebars-like templating
            functionality for graph execution. Uses simple variable substitution and basic helpers.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.#ctor(SemanticKernel.Graph.Extensions.GraphTemplateOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine})">
            <summary>
            Initializes a new instance of HandlebarsGraphTemplateEngine.
            </summary>
            <param name="options">Template engine options</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.RenderAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.RenderWithStateAsync(System.String,SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.RenderWithArgumentsAsync(System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.CompileTemplate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.RenderCompiledAsync(SemanticKernel.Graph.Integration.ICompiledTemplate,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.ValidateTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.ExtractVariableNames(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.RegisterHelper(System.String,System.Func{System.Object[],System.String})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.RegisterAsyncHelper(System.String,System.Func{System.Object[],System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.RenderTemplateInternalAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Internal template rendering implementation.
            </summary>
            <param name="template">Template to render</param>
            <param name="context">Context dictionary</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered template</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.ProcessAsyncHelpersAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Processes async helper functions in the template.
            </summary>
            <param name="template">Template string</param>
            <param name="context">Context dictionary</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.ProcessConditionals(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Processes conditional statements in the template.
            </summary>
            <param name="template">Template string</param>
            <param name="context">Context dictionary</param>
            <returns>Template with conditionals processed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.EvaluateCondition(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluates a simple condition against the context.
            </summary>
            <param name="condition">Condition string</param>
            <param name="context">Context dictionary</param>
            <returns>True if condition is met</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.ProcessSyncHelpers(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Processes sync helper functions in the template.
            </summary>
            <param name="template">Template string</param>
            <param name="context">Context dictionary</param>
            <returns>Template with helpers processed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.ParseHelperArguments(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Parses helper function arguments.
            </summary>
            <param name="argsString">Arguments string</param>
            <param name="context">Context dictionary</param>
            <returns>Parsed arguments array</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.ConvertToContextDictionary(System.Object)">
            <summary>
            Converts an object to a context dictionary.
            </summary>
            <param name="context">Object to convert</param>
            <returns>Context dictionary</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.ConvertObjectToDictionary(System.Object)">
            <summary>
            Converts an arbitrary object to a dictionary using reflection or JSON serialization.
            </summary>
            <param name="obj">Object to convert</param>
            <returns>Dictionary representation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.IsHelper(System.String)">
            <summary>
            Checks if a variable name represents a helper function.
            </summary>
            <param name="variableName">Variable name to check</param>
            <returns>True if it's a helper function</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.RegisterBuiltInHelpers">
            <summary>
            Registers built-in helper functions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HandlebarsGraphTemplateEngine.CompiledTemplate">
            <summary>
            Implementation of ICompiledTemplate.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HitlAuditService">
            <summary>
            Subscribes to <see cref="T:SemanticKernel.Graph.Core.IHumanInteractionStore"/> events and records HITL audit entries
            into <see cref="T:SemanticKernel.Graph.Integration.IGraphMemoryService"/> for later inspection and export via API.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HitlAuditService.GetRecentEntries(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns recent audit entries from the in-memory buffer with optional filtering.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HitlAuditService.AuditRecord">
            <summary>
            Lightweight audit record stored in-memory for quick access.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HitlRealtimeAdapter">
            <summary>
            Framework-agnostic real-time adapter for Human-in-the-Loop (HITL).
            Bridges store events to an async stream that can be exposed via WebSocket, Server-Sent Events, or SignalR.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.HitlRealtimeAdapter.GetEventStream(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Subscribes to the HITL event stream.
            The returned async enumerable completes when the provided cancellation token is cancelled.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HitlRealtimeEventType">
            <summary>
            Event type for HITL real-time stream.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.HitlRealtimeEvent">
            <summary>
            HITL real-time event payload.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphExecutor">
            <summary>
            Public contract for executing graphs built on top of Semantic Kernel.
            </summary>
            <remarks>
            This interface abstracts the execution engine to enable mocking and dependency inversion
            in consumers (applications, tests, and examples). Implementations are expected to:
            <para>
            • Validate inputs and honor the provided <see cref="T:Microsoft.SemanticKernel.Kernel"/> configuration and policies.
            </para>
            <para>
            • Treat <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> as the authoritative execution state and propagate
            updates consistently across nodes.
            </para>
            <para>
            • Support cooperative cancellation via <see cref="T:System.Threading.CancellationToken"/>.
            </para>
            <para>
            • Emit rich logging/telemetry as configured elsewhere in the system.
            </para>
            Thread-safety: Unless otherwise stated by concrete implementations, instances are generally
            safe to reuse across executions if no mutable per-run state is kept on the instance itself.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphExecutor.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the graph from its configured start node until completion or cancellation.
            </summary>
            <param name="kernel">[x] The <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance used to resolve functions, prompts, memory, and other services.</param>
            <param name="arguments">[x] The execution state and inputs as <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>; updated values may be written during the run.</param>
            <param name="cancellationToken">[x] A token that may be used to request cooperative cancellation.</param>
            <returns>[x] A <see cref="T:Microsoft.SemanticKernel.FunctionResult"/> representing the terminal result of the graph execution.</returns>
            <exception cref="T:System.ArgumentNullException">[x] Thrown if <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">[x] Thrown if the operation is canceled via <paramref name="cancellationToken"/>.</exception>
            <example>
            For example, to execute a previously constructed graph executor:
            <code language="csharp"><![CDATA[
            Kernel kernel = BuildKernel();
            KernelArguments args = new() { ["input"] = "Hello" };
            IGraphExecutor executor = GetExecutor();
            FunctionResult result = await executor.ExecuteAsync(kernel, args, CancellationToken.None);
            ]]></code>
            </example>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IGraphExecutor.Name">
            <summary>
            Gets a human-readable logical name for this executor instance.
            </summary>
            <remarks>
            Useful for logging, diagnostics, or multi-executor scenarios.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphExecutor.ExecuteNodeAsync(SemanticKernel.Graph.Core.IGraphNode,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes a single graph node in isolation using the provided <see cref="T:Microsoft.SemanticKernel.Kernel"/> and <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
            <param name="node">[x] The <see cref="T:SemanticKernel.Graph.Core.IGraphNode"/> to execute.</param>
            <param name="kernel">[x] The <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance providing execution services.</param>
            <param name="arguments">[x] The execution state as <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.</param>
            <param name="cancellationToken">[x] A token to request cooperative cancellation.</param>
            <returns>[x] A <see cref="T:Microsoft.SemanticKernel.FunctionResult"/> representing the node's execution outcome.</returns>
            <exception cref="T:System.ArgumentNullException">[x] Thrown if <paramref name="node"/>, <paramref name="kernel"/>, or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">[x] Thrown if the operation is canceled via <paramref name="cancellationToken"/>.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphExecutor.ExecuteGraphAsync(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.Core.IGraphNode},Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes a graph composed of the provided nodes using the given <see cref="T:Microsoft.SemanticKernel.Kernel"/> and <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
            <param name="nodes">[x] The ordered sequence of <see cref="T:SemanticKernel.Graph.Core.IGraphNode"/> instances to execute.</param>
            <param name="kernel">[x] The <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance providing execution services.</param>
            <param name="arguments">[x] The execution state as <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>; may be updated during execution.</param>
            <param name="cancellationToken">[x] A token to request cooperative cancellation.</param>
            <returns>[x] A <see cref="T:Microsoft.SemanticKernel.FunctionResult"/> representing the final outcome after all nodes complete.</returns>
            <exception cref="T:System.ArgumentNullException">[x] Thrown if <paramref name="nodes"/>, <paramref name="kernel"/>, or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">[x] Thrown if the operation is canceled via <paramref name="cancellationToken"/>.</exception>
            <remarks>
            Implementations may support conditional routing, branching, or early termination depending
            on node types and runtime conditions.
            </remarks>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphExecutorFactory">
            <summary>
            Factory contract for creating configured <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> instances.
            </summary>
            <remarks>
            Implementations typically wire cross-cutting concerns such as logging, telemetry,
            memory providers, template engines, routing strategies, and default policies.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphExecutorFactory.CreateExecutor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> identified by the given name.
            </summary>
            <param name="name">[x] Logical name of the graph. Used for diagnostics and registry keys.</param>
            <param name="description">[x] Optional human-readable description of the graph purpose.</param>
            <returns>[x] A configured <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> ready for node composition.</returns>
            <exception cref="T:System.ArgumentException">[x] Thrown if <paramref name="name"/> is null, empty, or whitespace.</exception>
            <example>
            <code language="csharp"><![CDATA[
            IGraphExecutorFactory factory = GetFactory();
            GraphExecutor executor = factory.CreateExecutor("document-pipeline", "Processes documents");
            ]]></code>
            </example>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphExecutorFactory.CreateExecutor(System.String,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Creates a <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> with an explicit <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.
            </summary>
            <param name="name">[x] Logical name of the graph.</param>
            <param name="logger">[x] Logger used for graph-level diagnostics.</param>
            <param name="description">[x] Optional human-readable description.</param>
            <returns>[x] A <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> configured with logging.</returns>
            <exception cref="T:System.ArgumentException">[x] Thrown if <paramref name="name"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">[x] Thrown if <paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphExecutorFactory.CreateFromPlugins(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> from existing registered plugins, materializing
            nodes based on plugin names.
            </summary>
            <param name="name">[x] Logical name of the graph.</param>
            <param name="pluginNames">[x] One or more plugin names to include as nodes in the graph.</param>
            <param name="description">[x] Optional human-readable description.</param>
            <returns>[x] A <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> pre-populated with plugin-based nodes.</returns>
            <exception cref="T:System.ArgumentException">[x] Thrown if <paramref name="name"/> is invalid or if <paramref name="pluginNames"/> is empty.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">[x] Thrown if one or more plugins cannot be found.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphExecutorFactory.RegisterAsync(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Registers the provided executor in the global <see cref="T:SemanticKernel.Graph.Integration.IGraphRegistry"/>, enabling
            discovery and remote execution.
            </summary>
            <param name="executor">[x] The executor instance to register.</param>
            <returns>[x] True if registration succeeded; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">[x] Thrown if <paramref name="executor"/> is null.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphExporter">
            <summary>
            Contract for exporting graphs to external formats.
            </summary>
            <remarks>
            Implementations may target formats such as DOT/GraphViz, Mermaid, BPMN, or custom JSON. Exports should
            be pure (no side effects) and honor <see cref="T:System.Threading.CancellationToken"/>.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphExporter.ExportAsync(SemanticKernel.Graph.Core.GraphExecutor,System.Threading.CancellationToken)">
            <summary>
            Exports the given <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> to a textual representation in the specified format.
            </summary>
            <param name="graph">Graph to export.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Serialized text payload.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="graph"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphImporter">
            <summary>
            Contract for importing external graph formats into <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> instances.
            </summary>
            <remarks>
            Implementations may support formats such as JSON (custom schema), LangGraph, LangChain, or BPMN-derived
            definitions. Import operations should be deterministic and honor <see cref="T:System.Threading.CancellationToken"/>.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphImporter.ImportAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to import the provided payload into a <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/>.
            </summary>
            <param name="payload">Text payload (e.g., JSON) representing a graph.</param>
            <param name="graphName">Optional desired graph name.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Imported <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="payload"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.FormatException">Thrown if the payload format is invalid or unsupported.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
            <example>
            <code language="csharp"><![CDATA[
            IGraphImporter importer = GetImporter();
            string json = File.ReadAllText("graph.json");
            GraphExecutor graph = await importer.ImportAsync(json, "my-graph", ct);
            ]]></code>
            </example>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphLLMProvider">
            <summary>
            Interface for providing LLM services to graph execution.
            Abstracts different LLM providers and configurations.
            </summary>
            <remarks>
            Implementations encapsulate provider-specific configuration, credentials, and model catalogs.
            Instances should be safe to reuse across graph executions. Cost estimates are heuristic and
            may not reflect provider billing precisely.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IGraphLLMProvider.AvailableModels">
            <summary>
            Gets the available models from this provider.
            </summary>
            <remarks>
            The list may be cached and periodically refreshed depending on the implementation.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IGraphLLMProvider.DefaultModel">
            <summary>
            Gets the default model name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IGraphLLMProvider.IsAvailable">
            <summary>
            Gets whether this provider is available and configured.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLLMProvider.CreateKernel(System.String,SemanticKernel.Graph.Integration.LLMOptions)">
            <summary>
            Creates a kernel configured with this LLM provider.
            </summary>
            <param name="modelName">Model to use (null for default).</param>
            <param name="options">Optional LLM options.</param>
            <returns>Configured kernel instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modelName"/> is specified but not supported.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the provider is not available or misconfigured.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLLMProvider.GetOptimalModel(SemanticKernel.Graph.Integration.LLMTaskType,System.Int32)">
            <summary>
            Gets the optimal model for a specific task type.
            </summary>
            <param name="taskType">Type of task.</param>
            <param name="contextLength">Approximate context length needed.</param>
            <returns>Recommended model name.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLLMProvider.EstimateCost(System.String,System.Int32,System.Int32)">
            <summary>
            Estimates the cost for a specific model and token count.
            </summary>
            <param name="modelName">Model name.</param>
            <param name="inputTokens">Number of input tokens.</param>
            <param name="outputTokens">Number of output tokens.</param>
            <returns>Estimated cost in USD.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modelName"/> is unknown.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.LLMOptions">
            <summary>
            Options for LLM configuration.
            </summary>
            <remarks>
            These options are advisory. Implementations may clamp values to provider-specific ranges.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LLMOptions.Temperature">
            <summary>
            Gets or sets the temperature for text generation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LLMOptions.MaxTokens">
            <summary>
            Gets or sets the maximum tokens for responses.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LLMOptions.TopP">
            <summary>
            Gets or sets the top-p value for nucleus sampling.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LLMOptions.FrequencyPenalty">
            <summary>
            Gets or sets the frequency penalty.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LLMOptions.PresencePenalty">
            <summary>
            Gets or sets the presence penalty.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LLMOptions.AdditionalParameters">
            <summary>
            Gets or sets additional model-specific parameters.
            </summary>
            <remarks>
            Used to pass provider-specific configuration (e.g., logit_bias, response_format).
            </remarks>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.LLMTaskType">
            <summary>
            Types of LLM tasks for model selection optimization.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.LLMTaskType.TextGeneration">
            <summary>
            General text generation and completion.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.LLMTaskType.QuestionAnswering">
            <summary>
            Question answering and information retrieval.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.LLMTaskType.CodeGeneration">
            <summary>
            Code generation and programming assistance.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.LLMTaskType.TextAnalysis">
            <summary>
            Text analysis and classification.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.LLMTaskType.CreativeWriting">
            <summary>
            Creative writing and storytelling.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.LLMTaskType.Reasoning">
            <summary>
            Reasoning and problem solving.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.LLMTaskType.Translation">
            <summary>
            Translation and language tasks.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.LLMTaskType.Summarization">
            <summary>
            Summarization tasks.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphLogger">
            <summary>
            Interface for integrated graph logging that works with Semantic Kernel's logging system.
            Provides structured logging for graph execution with contextual information.
            </summary>
            <remarks>
            Implementations should avoid throwing exceptions from logging methods and should be resilient to
            malformed input. Sensitive data should be redacted according to host configuration. Correlation IDs
            should be propagated where available.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogGraphExecutionStarted(System.String,System.String,System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Logs the start of graph execution.
            </summary>
            <param name="graphId">Graph identifier</param>
            <param name="graphName">Graph name</param>
            <param name="executionId">Execution identifier</param>
            <param name="initialState">Initial graph state</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogGraphExecutionCompleted(System.String,System.String,SemanticKernel.Graph.State.GraphState,System.TimeSpan,System.Int32)">
            <summary>
            Logs the completion of graph execution.
            </summary>
            <param name="graphId">Graph identifier</param>
            <param name="executionId">Execution identifier</param>
            <param name="finalState">Final graph state</param>
            <param name="executionTime">Total execution time</param>
            <param name="nodeCount">Number of nodes executed</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogGraphExecutionFailed(System.String,System.String,System.Exception,SemanticKernel.Graph.State.GraphState,System.String)">
            <summary>
            Logs graph execution failure.
            </summary>
            <param name="graphId">Graph identifier</param>
            <param name="executionId">Execution identifier</param>
            <param name="exception">Exception that caused the failure</param>
            <param name="currentState">Current graph state at time of failure</param>
            <param name="failedNodeId">ID of the node that failed (if applicable)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogDebug(System.String,System.Object[])">
            <summary>
            Logs debug information.
            </summary>
            <param name="message">Log message</param>
            <param name="args">Message parameters</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogInformation(System.String,System.Object[])">
            <summary>
            Logs informational message.
            </summary>
            <param name="message">Log message</param>
            <param name="args">Message parameters</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogWarning(System.String,System.Object[])">
            <summary>
            Logs warning message.
            </summary>
            <param name="message">Log message</param>
            <param name="args">Message parameters</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Logs error with exception.
            </summary>
            <param name="exception">Exception</param>
            <param name="message">Log message</param>
            <param name="args">Message parameters</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogNodeExecutionStarted(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Logs the start of node execution.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="nodeName">Node name</param>
            <param name="executionId">Execution identifier</param>
            <param name="nodeMetadata">Node metadata</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogNodeExecutionCompleted(System.String,System.String,System.TimeSpan,System.Nullable{System.Int32})">
            <summary>
            Logs successful node execution completion.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="executionId">Execution identifier</param>
            <param name="executionTime">Node execution time</param>
            <param name="outputSize">Size of the output (if applicable)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogNodeExecutionFailed(System.String,System.String,System.Exception,System.TimeSpan)">
            <summary>
            Logs node execution failure.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="executionId">Execution identifier</param>
            <param name="exception">Exception that caused the failure</param>
            <param name="executionTime">Time spent before failure</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogStateChange(System.String,System.String,SemanticKernel.Graph.Integration.StateChangeType,System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Logs state changes during execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node that caused the state change</param>
            <param name="changeType">Type of state change</param>
            <param name="changedKeys">Keys that were modified</param>
            <param name="changeCount">Number of changes</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogGraphValidation(System.String,SemanticKernel.Graph.State.ValidationResult,SemanticKernel.Graph.Integration.GraphValidationType)">
            <summary>
            Logs graph validation events.
            </summary>
            <param name="graphId">Graph identifier</param>
            <param name="validationResult">Validation result</param>
            <param name="validationType">Type of validation performed</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogNodeNavigation(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Logs navigation between nodes.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="fromNodeId">Source node ID</param>
            <param name="toNodeId">Target node ID</param>
            <param name="conditionResult">Result of the condition evaluation</param>
            <param name="conditionName">Name of the condition (if any)</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogPerformanceMetric(System.String,System.String,System.Double,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Logs performance metrics for analysis.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="metricName">Name of the metric</param>
            <param name="metricValue">Value of the metric</param>
            <param name="unit">Unit of measurement</param>
            <param name="tags">Additional tags for categorization</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.BeginExecutionScope(System.String,System.String)">
            <summary>
            Creates a scoped logger for a specific execution context.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="graphId">Graph identifier</param>
            <returns>Scoped logger instance</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogStructuredError(System.String,System.String,System.Exception,SemanticKernel.Graph.Core.ErrorHandlingContext,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Logs structured error information with complete context for analysis.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier where error occurred</param>
            <param name="exception">Exception that occurred</param>
            <param name="errorContext">Complete error handling context</param>
            <param name="additionalContext">Additional contextual information</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogErrorRecovery(System.String,System.String,SemanticKernel.Graph.Core.ErrorRecoveryAction,System.Boolean,System.TimeSpan,System.String)">
            <summary>
            Logs error recovery operations and their outcomes.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier</param>
            <param name="recoveryAction">Recovery action that was attempted</param>
            <param name="recoverySuccess">Whether the recovery was successful</param>
            <param name="recoveryDuration">Time taken for recovery operation</param>
            <param name="recoveryDetails">Additional details about the recovery</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogCategorized(System.String,Microsoft.Extensions.Logging.LogLevel,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Logs a message with the specified category and context.
            Enables structured logging with category-specific configuration.
            </summary>
            <param name="category">Logging category (Graph, Node, Routing, etc.)</param>
            <param name="level">Log level</param>
            <param name="executionId">Execution identifier for correlation</param>
            <param name="message">Log message</param>
            <param name="properties">Additional structured properties</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogWithCorrelation(System.String,Microsoft.Extensions.Logging.LogLevel,System.String,System.String,SemanticKernel.Graph.Integration.LogContext)">
            <summary>
            Logs a message with enhanced correlation context.
            Includes automatic correlation ID propagation and contextual metadata.
            </summary>
            <param name="correlationId">Correlation identifier</param>
            <param name="level">Log level</param>
            <param name="category">Logging category</param>
            <param name="message">Log message</param>
            <param name="context">Contextual metadata</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogNodeExecution(System.String,System.String,SemanticKernel.Graph.Integration.NodeExecutionInfo)">
            <summary>
            Logs detailed node execution information with configurable verbosity.
            Respects node-specific logging configuration.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="executionId">Execution identifier</param>
            <param name="nodeInfo">Detailed node execution information</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogStateChange(System.String,SemanticKernel.Graph.Integration.StateChangeInfo)">
            <summary>
            Logs graph state changes with correlation and context.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="stateChange">State change information</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.LogRoutingDecision(System.String,SemanticKernel.Graph.Integration.RoutingDecisionInfo)">
            <summary>
            Logs routing decisions with enhanced context.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="routingInfo">Routing decision information</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.IsEnabled(System.String,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Checks if logging is enabled for the specified category and level.
            </summary>
            <param name="category">Logging category</param>
            <param name="level">Log level</param>
            <returns>True if logging is enabled for this category and level</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphLogger.GetNodeConfig(System.String,System.String)">
            <summary>
            Gets the effective logging configuration for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="nodeType">Node type name</param>
            <returns>Effective logging configuration for the node</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.StateChangeType">
            <summary>
            Types of state changes that can occur during graph execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.StateChangeType.ParametersAdded">
            <summary>
            Parameters were added to the state.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.StateChangeType.ParametersModified">
            <summary>
            Parameters were modified in the state.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.StateChangeType.ParametersRemoved">
            <summary>
            Parameters were removed from the state.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.StateChangeType.MetadataUpdated">
            <summary>
            Metadata was updated in the state.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.StateChangeType.ExecutionHistoryUpdated">
            <summary>
            Execution history was updated.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphValidationType">
            <summary>
            Types of graph validation that can be performed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.GraphValidationType.PreExecution">
            <summary>
            Validation performed before execution starts.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.GraphValidationType.Runtime">
            <summary>
            Validation performed during execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.GraphValidationType.PostExecution">
            <summary>
            Validation performed after execution completes.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.GraphValidationType.StructuralIntegrity">
            <summary>
            Validation of graph structure integrity.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.GraphValidationType.NodeConfiguration">
            <summary>
            Validation of node configuration.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.LogContext">
            <summary>
            Contextual information for enhanced logging with correlation support.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LogContext.GraphId">
            <summary>
            Gets or sets the graph identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LogContext.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LogContext.ParentCorrelationId">
            <summary>
            Gets or sets the parent correlation identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LogContext.Properties">
            <summary>
            Gets or sets additional metadata properties.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.LogContext.Timestamp">
            <summary>
            Gets or sets the timestamp when the context was created.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.NodeExecutionInfo">
            <summary>
            Detailed information about node execution for comprehensive logging.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.NodeName">
            <summary>
            Gets or sets the node name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.NodeType">
            <summary>
            Gets or sets the node type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.Phase">
            <summary>
            Gets or sets the execution phase (Starting, Executing, Completed, Failed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.ExecutionTime">
            <summary>
            Gets or sets the execution time for this phase.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.InputParameters">
            <summary>
            Gets or sets the input parameters (respects sensitive data settings).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.OutputResult">
            <summary>
            Gets or sets the output result (respects sensitive data settings).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.Exception">
            <summary>
            Gets or sets any exception that occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.Metadata">
            <summary>
            Gets or sets node-specific metadata.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionInfo.Metrics">
            <summary>
            Gets or sets performance metrics for this execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.StateChangeInfo">
            <summary>
            Information about state changes during graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeInfo.NodeId">
            <summary>
            Gets or sets the node that caused the state change.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeInfo.ChangeType">
            <summary>
            Gets or sets the type of state change.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeInfo.ChangedKeys">
            <summary>
            Gets or sets the keys that were changed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeInfo.ChangeCount">
            <summary>
            Gets or sets the number of changes made.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeInfo.Changes">
            <summary>
            Gets or sets the before/after values (respects sensitive data settings).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeInfo.Timestamp">
            <summary>
            Gets or sets the timestamp of the change.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.RoutingDecisionInfo">
            <summary>
            Information about routing decisions made during graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RoutingDecisionInfo.FromNodeId">
            <summary>
            Gets or sets the source node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RoutingDecisionInfo.ToNodeId">
            <summary>
            Gets or sets the target node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RoutingDecisionInfo.RoutingStrategy">
            <summary>
            Gets or sets the routing strategy used.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RoutingDecisionInfo.Condition">
            <summary>
            Gets or sets the condition or criteria used for routing.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RoutingDecisionInfo.ConditionResult">
            <summary>
            Gets or sets whether the routing condition was met.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RoutingDecisionInfo.AlternativeNodes">
            <summary>
            Gets or sets alternative nodes that were considered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RoutingDecisionInfo.DecisionTime">
            <summary>
            Gets or sets the time taken to make the routing decision.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RoutingDecisionInfo.Context">
            <summary>
            Gets or sets additional routing context.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.StateChangeValue">
            <summary>
            Represents a state value change with before and after values.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeValue.Before">
            <summary>
            Gets or sets the value before the change.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeValue.After">
            <summary>
            Gets or sets the value after the change.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.StateChangeValue.ValueType">
            <summary>
            Gets or sets the type of the changed value.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ExecutionPhase">
            <summary>
            Phases of node execution for detailed logging.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.ExecutionPhase.Starting">
            <summary>
            Node execution is starting.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.ExecutionPhase.Executing">
            <summary>
            Node is currently executing.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.ExecutionPhase.Completed">
            <summary>
            Node execution completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.ExecutionPhase.Failed">
            <summary>
            Node execution failed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.ExecutionPhase.Skipped">
            <summary>
            Node execution was skipped.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphMemoryProvider">
            <summary>
            Interface for providing memory services to graph execution.
            Bridges between graph system and Semantic Kernel's memory capabilities.
            </summary>
            <remarks>
            Designed as a minimal wrapper for storing and querying text entries. Implementations may provide
            semantic/vector search, metadata filtering, and TTL policies. Methods honor <see cref="T:System.Threading.CancellationToken"/>.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IGraphMemoryProvider.IsAvailable">
            <summary>
            Gets whether memory services are available.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryProvider.SaveInformationAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Stores a piece of information in memory.
            </summary>
            <param name="collectionName">Collection to store in</param>
            <param name="text">Text content to store</param>
            <param name="id">Unique identifier for the memory</param>
            <param name="description">Optional description</param>
            <param name="additionalMetadata">Additional metadata</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="collectionName"/>, <paramref name="text"/>, or <paramref name="id"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryProvider.SearchAsync(System.String,System.String,System.Int32,System.Double,System.Threading.CancellationToken)">
            <summary>
            Searches for relevant information in memory.
            </summary>
            <param name="collectionName">Collection to search in</param>
            <param name="query">Search query</param>
            <param name="limit">Maximum number of results</param>
            <param name="minRelevanceScore">Minimum relevance score</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of relevant memory results</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="collectionName"/> or <paramref name="query"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="limit"/> is less than 1 or <paramref name="minRelevanceScore"/> is outside [0,1].</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryProvider.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a specific memory item by ID.
            </summary>
            <param name="collectionName">Collection to search in</param>
            <param name="id">Memory item ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Memory item if found, null otherwise</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="collectionName"/> or <paramref name="id"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryProvider.RemoveAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a memory item.
            </summary>
            <param name="collectionName">Collection containing the item</param>
            <param name="id">Memory item ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="collectionName"/> or <paramref name="id"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.MemorySearchResult">
            <summary>
            Represents a memory search result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemorySearchResult.Id">
            <summary>
            Gets the unique identifier for this memory item.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemorySearchResult.Text">
            <summary>
            Gets the text content of the memory item.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemorySearchResult.Description">
            <summary>
            Gets the description of the memory item.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemorySearchResult.RelevanceScore">
            <summary>
            Gets the relevance score (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemorySearchResult.AdditionalMetadata">
            <summary>
            Gets additional metadata associated with the memory item.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemorySearchResult.Timestamp">
            <summary>
            Gets the timestamp when this memory was created.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphMemoryService">
            <summary>
            Interface for integrating graph execution with Semantic Kernel's memory system.
            Provides semantic and vector search capabilities for graph nodes.
            </summary>
            <remarks>
            This abstraction enables storing and retrieving execution context, results, and relevant knowledge
            to improve decision-making in subsequent runs. Implementations may back onto vector databases or SK memory.
            All async methods honor <see cref="T:System.Threading.CancellationToken"/>.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryService.StoreExecutionContextAsync(System.String,SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Stores graph execution context in memory for future retrieval.
            </summary>
            <param name="executionId">Unique execution identifier</param>
            <param name="graphState">Graph state to store</param>
            <param name="metadata">Additional metadata about the execution</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="executionId"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="graphState"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryService.FindSimilarExecutionsAsync(SemanticKernel.Graph.State.GraphState,System.Int32,System.Double,System.Threading.CancellationToken)">
            <summary>
            Retrieves similar execution contexts based on semantic similarity.
            </summary>
            <param name="currentState">Current graph state to match against</param>
            <param name="limit">Maximum number of results to return</param>
            <param name="minSimilarity">Minimum similarity threshold (0.0 to 1.0)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of similar execution contexts</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="currentState"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="limit"/> is less than 1 or <paramref name="minSimilarity"/> is outside [0,1].</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryService.SearchRelevantMemoryAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches for relevant information in memory based on node context.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="query">Search query or context</param>
            <param name="limit">Maximum number of results</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of relevant memory entries</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="nodeId"/> or <paramref name="query"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="limit"/> is less than 1.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryService.StoreNodeExecutionAsync(System.String,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.String,System.Threading.CancellationToken)">
            <summary>
            Stores node execution results for future reference.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="input">Node input parameters</param>
            <param name="output">Node execution result</param>
            <param name="executionContext">Execution context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the async operation</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="nodeId"/> or <paramref name="executionContext"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="input"/> or <paramref name="output"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryService.GetNodeHistoryAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets execution history for a specific node.
            </summary>
            <param name="nodeId">Node identifier</param>
            <param name="limit">Maximum number of results</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of node execution histories</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="nodeId"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="limit"/> is less than 1.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphMemoryService.ClearMemoryAsync(SemanticKernel.Graph.Integration.MemoryFilter,System.Threading.CancellationToken)">
            <summary>
            Clears memory for a specific collection or execution.
            </summary>
            <param name="filter">Filter criteria for what to clear</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entries removed</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter"/> is null when <see cref="P:SemanticKernel.Graph.Integration.MemoryFilter.ClearAll"/> is false.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphExecutionMemory">
            <summary>
            Represents a stored graph execution in memory.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphExecutionMemory.ExecutionId">
            <summary>
            Gets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphExecutionMemory.GraphState">
            <summary>
            Gets the graph state at the time of storage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphExecutionMemory.Timestamp">
            <summary>
            Gets the timestamp when this execution was stored.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphExecutionMemory.SimilarityScore">
            <summary>
            Gets the similarity score to the query (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphExecutionMemory.Metadata">
            <summary>
            Gets additional metadata about the execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.GraphMemoryEntry">
            <summary>
            Represents a memory entry related to graph execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphMemoryEntry.Id">
            <summary>
            Gets the unique identifier for this memory entry.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphMemoryEntry.Content">
            <summary>
            Gets the content of the memory entry.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphMemoryEntry.RelevanceScore">
            <summary>
            Gets the relevance score (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphMemoryEntry.NodeId">
            <summary>
            Gets the node ID this entry is associated with.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphMemoryEntry.CreatedAt">
            <summary>
            Gets the timestamp when this entry was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.GraphMemoryEntry.Metadata">
            <summary>
            Gets additional metadata for this entry.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.NodeExecutionHistory">
            <summary>
            Represents the execution history for a specific node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionHistory.ExecutionId">
            <summary>
            Gets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionHistory.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionHistory.Input">
            <summary>
            Gets the input arguments that were used.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionHistory.Output">
            <summary>
            Gets the execution result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionHistory.ExecutedAt">
            <summary>
            Gets the execution timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionHistory.ExecutionDuration">
            <summary>
            Gets the execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionHistory.WasSuccessful">
            <summary>
            Gets whether the execution was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.NodeExecutionHistory.ErrorMessage">
            <summary>
            Gets any error information if the execution failed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.MemoryFilter">
            <summary>
            Filter criteria for clearing memory entries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemoryFilter.ExecutionId">
            <summary>
            Gets or sets the execution ID to filter by.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemoryFilter.NodeId">
            <summary>
            Gets or sets the node ID to filter by.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemoryFilter.MaxAge">
            <summary>
            Gets or sets the maximum age of entries to keep.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemoryFilter.CollectionName">
            <summary>
            Gets or sets the collection name to filter by.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.MemoryFilter.ClearAll">
            <summary>
            Gets or sets whether to clear all entries.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphRegistry">
            <summary>
            Registry for managing named <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> instances to enable remote execution.
            </summary>
            <remarks>
            Provides discovery and lifecycle operations leveraged by production-ready APIs and tooling.
            Implementations should ensure thread-safety for concurrent access and updates.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphRegistry.RegisterAsync(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Registers a graph for remote execution and discovery.
            </summary>
            <param name="executor">[x] Graph executor to register. The <see cref="P:SemanticKernel.Graph.Core.GraphExecutor.Name"/> must be unique.</param>
            <returns>[x] True if registration succeeded; false if a graph with the same name already exists.</returns>
            <exception cref="T:System.ArgumentNullException">[x] Thrown if <paramref name="executor"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphRegistry.UnregisterAsync(System.String)">
            <summary>
            Unregisters a graph by its name.
            </summary>
            <param name="graphName">[x] The logical name of the graph to remove.</param>
            <returns>[x] True if the graph was present and removed.</returns>
            <exception cref="T:System.ArgumentException">[x] Thrown if <paramref name="graphName"/> is null, empty, or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphRegistry.GetAsync(System.String)">
            <summary>
            Gets a registered graph by name.
            </summary>
            <param name="graphName">[x] The graph name.</param>
            <returns>[x] The <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> or null if not found.</returns>
            <exception cref="T:System.ArgumentException">[x] Thrown if <paramref name="graphName"/> is null, empty, or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphRegistry.ListAsync">
            <summary>
            Lists registered graphs with brief information.
            </summary>
            <returns>[x] A snapshot of registered graphs at call time.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.RegisteredGraphInfo">
            <summary>
            Brief information about a registered graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RegisteredGraphInfo.Name">
            <summary>
            Gets or sets the graph name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RegisteredGraphInfo.GraphId">
            <summary>
            Gets or sets the graph identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RegisteredGraphInfo.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RegisteredGraphInfo.RegisteredAt">
            <summary>
            Gets or sets when it was registered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RegisteredGraphInfo.NodeCount">
            <summary>
            Gets or sets the number of nodes at registration time.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphTelemetry">
            <summary>
            Abstraction for application telemetry (e.g., Application Insights) without hard dependencies.
            Hosting apps can bind this to a concrete telemetry provider.
            </summary>
            <remarks>
            Implementations should be non-throwing, lightweight, and respect sampling and dimensionality constraints
            (low-cardinality property names/values). Methods should be safe to call from hot paths. Null properties are allowed.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTelemetry.TrackRequest(System.String,System.DateTimeOffset,System.TimeSpan,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tracks an incoming request operation (e.g., API call) with duration and outcome.
            </summary>
            <param name="name">Operation name.</param>
            <param name="startTime">Operation start time (UTC recommended).</param>
            <param name="duration">Operation duration.</param>
            <param name="success">Whether the operation succeeded.</param>
            <param name="responseCode">Optional response/result code.</param>
            <param name="properties">Optional key/value properties (low cardinality).</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> is null, empty, or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTelemetry.TrackDependency(System.String,System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tracks a dependency call (e.g., HTTP, database) with duration and outcome.
            </summary>
            <param name="dependencyType">Dependency type (HTTP, DB, Cache, etc.).</param>
            <param name="target">Dependency target (hostname, resource name).</param>
            <param name="name">Operation or command name.</param>
            <param name="startTime">Start time (UTC recommended).</param>
            <param name="duration">Call duration.</param>
            <param name="success">Whether the call succeeded.</param>
            <param name="resultCode">Optional result/status code.</param>
            <param name="properties">Optional key/value properties (low cardinality).</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="dependencyType"/>, <paramref name="target"/>, or <paramref name="name"/> is null, empty, or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTelemetry.TrackException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tracks an exception with optional contextual properties.
            </summary>
            <param name="exception">The exception instance.</param>
            <param name="properties">Optional key/value properties.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTelemetry.TrackMetric(System.String,System.Double,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tracks a numeric metric value.
            </summary>
            <param name="name">Metric name.</param>
            <param name="value">Metric value.</param>
            <param name="properties">Optional key/value properties (low cardinality).</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> is null, empty, or whitespace.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IGraphTemplateEngine">
            <summary>
            Interface for template engine integration with graph execution.
            Provides support for dynamic prompt generation and parameter templating.
            </summary>
            <remarks>
            Implementations should treat templates as untrusted input and validate/escape as appropriate
            for the underlying engine. Methods support cooperative cancellation via <see cref="T:System.Threading.CancellationToken"/>.
            Thread-safety is implementation-specific; prefer stateless services or synchronize access to shared caches.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.RenderAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Renders a template with the provided context data.
            </summary>
            <param name="template">Template string to render.</param>
            <param name="context">Context data for template variables (anonymous object, dictionary, or POCO).</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Rendered template string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template"/> or <paramref name="context"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
            <example>
            <code language="csharp"><![CDATA[
            var output = await templateEngine.RenderAsync("Hello {{name}}", new { name = "World" }, ct);
            // output: "Hello World"
            ]]></code>
            </example>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.RenderWithStateAsync(System.String,SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Renders a template using graph state as context.
            </summary>
            <param name="template">Template string to render.</param>
            <param name="graphState">Graph state containing template variables.</param>
            <param name="additionalContext">Additional context variables merged with state.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Rendered template string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template"/> or <paramref name="graphState"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
            <example>
            <code language="csharp"><![CDATA[
            string prompt = await templateEngine.RenderWithStateAsync(
                "User: {{UserName}}\nLastAction: {{LastAction}}",
                graphState,
                new Dictionary<string, object> { ["LastAction"] = "Search" },
                ct);
            ]]></code>
            </example>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.RenderWithArgumentsAsync(System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Renders a template using kernel arguments as context.
            </summary>
            <param name="template">Template string to render.</param>
            <param name="arguments">Kernel arguments containing template variables.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Rendered template string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.CompileTemplate(System.String,System.String)">
            <summary>
            Compiles a template for repeated use to improve performance.
            </summary>
            <param name="template">Template string to compile.</param>
            <param name="templateName">Optional name for the template.</param>
            <returns>Compiled template instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.RenderCompiledAsync(SemanticKernel.Graph.Integration.ICompiledTemplate,System.Object,System.Threading.CancellationToken)">
            <summary>
            Renders a compiled template with context data.
            </summary>
            <param name="compiledTemplate">Compiled template instance.</param>
            <param name="context">Context data for template variables.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Rendered template string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="compiledTemplate"/> or <paramref name="context"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.ValidateTemplate(System.String)">
            <summary>
            Validates a template syntax without rendering.
            </summary>
            <param name="template">Template string to validate.</param>
            <returns>Validation result indicating if template is valid.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.ExtractVariableNames(System.String)">
            <summary>
            Extracts variable names from a template.
            </summary>
            <param name="template">Template string to analyze.</param>
            <returns>List of variable names used in the template.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.RegisterHelper(System.String,System.Func{System.Object[],System.String})">
            <summary>
            Registers a custom helper function for use in templates.
            </summary>
            <param name="helperName">Name of the helper function.</param>
            <param name="helperFunction">Helper function implementation.</param>
            <remarks>
            Helpers allow reusable logic inside templates (e.g., formatting, conditional operations).
            Name collisions should override previous registrations or be rejected by implementation policy.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="helperName"/> or <paramref name="helperFunction"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IGraphTemplateEngine.RegisterAsyncHelper(System.String,System.Func{System.Object[],System.Threading.Tasks.Task{System.String}})">
            <summary>
            Registers a custom helper function that can be async.
            </summary>
            <param name="helperName">Name of the helper function.</param>
            <param name="helperFunction">Async helper function implementation.</param>
            <remarks>
            Async helpers can call external services (e.g., memory/vector DB lookups) during rendering.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="helperName"/> or <paramref name="helperFunction"/> is null.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ICompiledTemplate">
            <summary>
            Represents a compiled template that can be rendered multiple times efficiently.
            </summary>
            <remarks>
            Compiled templates may cache parse trees and variable analysis to accelerate repeated rendering.
            Implementations should be immutable and safe for concurrent use.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ICompiledTemplate.Name">
            <summary>
            Gets the name of the template.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ICompiledTemplate.Template">
            <summary>
            Gets the original template string.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ICompiledTemplate.Variables">
            <summary>
            Gets the list of variables used in this template.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ICompiledTemplate.CompiledAt">
            <summary>
            Gets when this template was compiled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ICompiledTemplate.IsValid">
            <summary>
            Gets whether this template has been validated.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateValidationResult">
            <summary>
            Result of template validation.
            </summary>
            <remarks>
            Validation checks syntax and may include best-effort variable extraction. It does not execute helpers.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateValidationResult.IsValid">
            <summary>
            Gets whether the template is valid.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateValidationResult.Errors">
            <summary>
            Gets validation error messages, if any.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateValidationResult.Warnings">
            <summary>
            Gets validation warning messages, if any.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateValidationResult.Variables">
            <summary>
            Gets the variables found in the template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.TemplateValidationResult.Success(System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a successful validation result.
            </summary>
            <param name="variables">Variables found in the template</param>
            <returns>Valid template result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.TemplateValidationResult.Failure(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a failed validation result.
            </summary>
            <param name="errors">Validation errors</param>
            <param name="warnings">Optional validation warnings</param>
            <returns>Invalid template result</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IKernelWrapper">
            <summary>
            Wrapper interface for Semantic Kernel to enable mocking in tests.
            Abstracts the Kernel functionality for testing purposes.
            </summary>
            <remarks>
            Useful for dependency inversion when building graphs that need to access the underlying
            <see cref="P:SemanticKernel.Graph.Integration.IKernelWrapper.Kernel"/> and service provider. Implementations should be lightweight.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IKernelWrapper.Kernel">
            <summary>
            Gets the underlying kernel instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IKernelWrapper.Services">
            <summary>
            Gets the kernel services.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.KernelWrapper">
            <summary>
            Default implementation of IKernelWrapper that wraps a Kernel instance.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelWrapper.#ctor(Microsoft.SemanticKernel.Kernel)">
            <summary>
            Initializes a new instance of KernelWrapper.
            </summary>
            <param name="kernel">The kernel to wrap.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="kernel"/> is null.</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.KernelWrapper.Kernel">
            <summary>
            Gets the underlying kernel instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.KernelWrapper.Services">
            <summary>
            Gets the kernel services.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IPluginToNodeConverter">
            <summary>
            Interface for converting Semantic Kernel plugins and functions to graph nodes.
            Enables automatic graph construction from existing plugins.
            </summary>
            <remarks>
            Conversion preserves function metadata and allows optional customization via configuration delegates.
            Implementations should avoid side effects other than node creation.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginToNodeConverter.ConvertFunctionToNode(Microsoft.SemanticKernel.KernelFunction)">
            <summary>
            Converts a single KernelFunction to a FunctionGraphNode.
            </summary>
            <param name="function">Function to convert.</param>
            <returns>Graph node wrapping the function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="function"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginToNodeConverter.ConvertFunctionToNode(Microsoft.SemanticKernel.KernelFunction,System.String,System.Action{SemanticKernel.Graph.Nodes.FunctionGraphNode})">
            <summary>
            Converts a single KernelFunction to a FunctionGraphNode with custom configuration.
            </summary>
            <param name="function">Function to convert.</param>
            <param name="nodeId">Custom node identifier.</param>
            <param name="configure">Configuration action for the node.</param>
            <returns>Configured graph node wrapping the function.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="function"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginToNodeConverter.ConvertPluginToNodes(Microsoft.SemanticKernel.KernelPlugin)">
            <summary>
            Converts an entire plugin to a collection of graph nodes.
            </summary>
            <param name="plugin">Plugin to convert.</param>
            <returns>Collection of graph nodes, one for each function in the plugin.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="plugin"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginToNodeConverter.ConvertPluginToNodes(Microsoft.SemanticKernel.KernelPlugin,System.Action{SemanticKernel.Graph.Nodes.FunctionGraphNode,Microsoft.SemanticKernel.KernelFunction})">
            <summary>
            Converts an entire plugin to a collection of graph nodes with custom configuration.
            </summary>
            <param name="plugin">Plugin to convert.</param>
            <param name="configure">Configuration action for each node.</param>
            <returns>Collection of configured graph nodes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="plugin"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginToNodeConverter.ConvertPluginToConnectedNodes(Microsoft.SemanticKernel.KernelPlugin,System.Boolean)">
            <summary>
            Creates an automatically connected graph from a plugin.
            Functions are connected in alphabetical order by default.
            </summary>
            <param name="plugin">Plugin to convert.</param>
            <param name="connectInOrder">Whether to automatically connect functions in sequence.</param>
            <returns>Collection of connected graph nodes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="plugin"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginToNodeConverter.AnalyzePluginConnections(Microsoft.SemanticKernel.KernelPlugin)">
            <summary>
            Analyzes a plugin and suggests optimal node connections based on function parameters.
            </summary>
            <param name="plugin">Plugin to analyze.</param>
            <returns>Dictionary mapping source function names to suggested target function names.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="plugin"/> is null.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IBearerTokenValidator">
            <summary>
            Validates bearer tokens (e.g., Azure AD JWTs) and optional claims like scopes/app roles.
            This abstraction allows integrating Azure Active Directory without hard dependency.
            </summary>
            <remarks>
            Implementations should validate signature, issuer, audience, expiry, and optionally scopes/roles.
            Methods should be non-throwing for invalid tokens and return false instead.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IBearerTokenValidator.ValidateAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Validates the incoming bearer token according to implementation (signature, issuer, audience, expiry).
            </summary>
            <param name="bearerToken">Bearer token string without the "Bearer " prefix.</param>
            <param name="requiredScopes">Optional required OAuth scopes.</param>
            <param name="requiredAppRoles">Optional required application roles.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True when token is valid and contains required claims.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ISecretResolver">
            <summary>
            Resolves secrets by logical name (e.g., pulling from Azure Key Vault or other secret stores).
            </summary>
            <remarks>
            Implementations may support provider-specific prefixes (e.g., "env:", "kv:") to direct resolution.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ISecretResolver.ResolveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resolves a secret by name.
            </summary>
            <param name="name">Logical secret name (e.g., "OpenAI:ApiKey" or "kv:openai-api").</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Resolved secret value or null when not found.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.CompositeSecretResolver">
            <summary>
            Secret resolver that first checks environment variables and then delegates to another resolver (e.g., Key Vault).
            Allows simple local/dev overrides without Azure dependencies.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ApiRequestSecurityContext">
            <summary>
            Provides security context extracted from transport (e.g., HTTP headers).
            Framework adapters (Minimal APIs/Controllers) should populate this.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ApiRequestSecurityContext.ApiKeyHeader">
            <summary>
            Raw API key header value (e.g., from "x-api-key").
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ApiRequestSecurityContext.AuthorizationHeader">
            <summary>
            Raw Authorization header value. Expected format: "Bearer {token}".
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ApiRequestSecurityContext.CorrelationId">
            <summary>
            Optional correlation identifier used for cross-service tracing.
            When provided, it will be propagated to telemetry as a property.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ApiRequestSecurityContext.UserObjectId">
            <summary>
            Optional Azure AD user/object identifier (OID) extracted upstream by the hosting layer.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ApiRequestSecurityContext.TenantId">
            <summary>
            Optional Azure AD tenant identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ApiRequestSecurityContext.ClientApplicationId">
            <summary>
            Optional client application identifier (AppId / ClientId) for app roles/client credentials flows.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ApiRequestSecurityContext.Claims">
            <summary>
            Optional flattened claims map extracted upstream. Values should be short strings.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IToolRegistry">
            <summary>
            Registry interface for external tools (e.g., REST APIs, local utilities) that can be exposed as graph nodes.
            </summary>
            <remarks>
            Tools are registered by metadata and a factory that can create an executable <see cref="T:SemanticKernel.Graph.Core.IGraphNode"/>.
            Implementations should ensure thread-safety and idempotent registrations.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IToolRegistry.RegisterAsync(SemanticKernel.Graph.Integration.ToolMetadata,System.Func{System.IServiceProvider,SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Registers a tool with its metadata and factory for creating executable nodes.
            </summary>
            <param name="metadata">Tool metadata.</param>
            <param name="factory">Factory that creates an <see cref="T:SemanticKernel.Graph.Core.IGraphNode"/> for this tool.</param>
            <returns>True if registration succeeded.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="metadata"/> or <paramref name="factory"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IToolRegistry.UnregisterAsync(System.String)">
            <summary>
            Unregisters a tool by its identifier.
            </summary>
            <param name="toolId">Tool identifier.</param>
            <returns>True if removal succeeded.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="toolId"/> is null, empty, or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IToolRegistry.GetAsync(System.String)">
            <summary>
            Gets the metadata of a registered tool.
            </summary>
            <param name="toolId">Tool identifier.</param>
            <returns>Tool metadata or null.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="toolId"/> is null, empty, or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IToolRegistry.CreateNodeAsync(System.String,System.IServiceProvider)">
            <summary>
            Creates a node instance for a tool.
            </summary>
            <param name="toolId">Tool identifier.</param>
            <param name="serviceProvider">Service provider to resolve dependencies.</param>
            <returns>Graph node instance or null if tool not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="toolId"/> is null, empty, or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IToolRegistry.ListAsync(SemanticKernel.Graph.Integration.ToolSearchCriteria)">
            <summary>
            Lists all registered tools.
            </summary>
            <param name="criteria">Optional search criteria.</param>
            <returns>List of tools that match the criteria.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ToolMetadata">
            <summary>
            Minimal tool metadata for discovery and execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolMetadata.Id">
            <summary>Globally unique tool identifier.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolMetadata.Name">
            <summary>Human-readable name.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolMetadata.Description">
            <summary>Human-readable description.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolMetadata.Type">
            <summary>Type of tool.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolMetadata.Tags">
            <summary>Tag set for discovery/filtering.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolMetadata.CreatedAt">
            <summary>Creation timestamp (UTC).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolMetadata.UpdatedAt">
            <summary>Last update timestamp (UTC).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolMetadata.Schema">
            <summary>Optional schema association (e.g., REST endpoint schema).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ToolType">
            <summary>
            Tool types supported by the registry.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ToolSearchCriteria">
            <summary>
            Search options for listing tools.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolSearchCriteria.SearchText">
            <summary>Free text to match against name/description/tags.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolSearchCriteria.Type">
            <summary>Optional type filter.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ToolSearchCriteria.Tags">
            <summary>Tags that should be present on the tool.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IToolSchemaConverter">
            <summary>
            Converts a tool schema (e.g., REST) into an executable graph node.
            </summary>
            <remarks>
            Implementations translate schema definitions to strongly-typed <see cref="T:SemanticKernel.Graph.Core.IGraphNode"/> instances.
            Validation errors should be surfaced via exceptions.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IToolSchemaConverter.CreateNode(SemanticKernel.Graph.Integration.RestToolSchema)">
            <summary>
            Creates an <see cref="T:SemanticKernel.Graph.Core.IGraphNode"/> for a REST tool schema.
            </summary>
            <param name="schema">REST tool schema.</param>
            <returns>Executable graph node wrapping the REST tool.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="schema"/> is null.</exception>
            <exception cref="T:System.FormatException">Thrown if the schema is invalid or unsupported.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IWorkflowTemplate">
            <summary>
            Contract for workflow templates that can materialize executable graphs.
            A workflow template represents a reusable, parameterized blueprint for building a <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/>.
            </summary>
            <remarks>
            Templates enable consistent graph construction across environments and versions. Parameter validation
            should be deterministic and side-effect free. Implementations may declare required capabilities to aid
            compatibility checks at runtime.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IWorkflowTemplate.TemplateId">
            <summary>Stable identifier of the template (e.g., "chatbot/basic").</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IWorkflowTemplate.Name">
            <summary>Human-readable name.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IWorkflowTemplate.Version">
            <summary>Semantic version of this template definition (e.g., "1.0.0").</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IWorkflowTemplate.Category">
            <summary>Category of this template (chatbot, analysis, reasoning, multi-agent, etc.).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IWorkflowTemplate.Description">
            <summary>Short description of the workflow purpose.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IWorkflowTemplate.RequiredCapabilities">
            <summary>Declared capabilities/features this template requires to run properly.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.IWorkflowTemplate.Parameters">
            <summary>Declared parameters accepted by this template.</summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IWorkflowTemplate.ValidateParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Validates user-provided parameters against this template's contract.
            </summary>
            <param name="parameters">Parameter bag.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IWorkflowTemplate.BuildGraph(Microsoft.SemanticKernel.Kernel,System.Collections.Generic.IDictionary{System.String,System.Object},System.IServiceProvider)">
            <summary>
            Builds a new <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> from this template, using the provided parameters.
            </summary>
            <param name="kernel">Semantic Kernel instance used to create functions and nodes.</param>
            <param name="parameters">Parameter bag (must pass validation).</param>
            <param name="serviceProvider">Service provider for optional integrations.</param>
            <returns>Configured graph executor.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="kernel"/> or <paramref name="serviceProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="parameters"/> fails validation.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IWorkflowTemplateRegistry">
            <summary>
            Registry abstraction for publishing, discovering and retrieving workflow templates.
            </summary>
            <remarks>
            Registry implementations should ensure thread-safety. Template IDs are treated as case-insensitive by
            convention unless otherwise documented.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IWorkflowTemplateRegistry.Register(SemanticKernel.Graph.Integration.IWorkflowTemplate)">
            <summary>Registers (or updates) a template version.</summary>
            <param name="template">Template instance to register.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IWorkflowTemplateRegistry.TryGet(System.String,System.String,SemanticKernel.Graph.Integration.IWorkflowTemplate@)">
            <summary>Try to get a specific template version.</summary>
            <param name="templateId">Template identifier.</param>
            <param name="version">Semantic version string.</param>
            <param name="template">Resolved template, if found.</param>
            <returns>True if found; otherwise false.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IWorkflowTemplateRegistry.GetLatest(System.String)">
            <summary>Gets the latest version for a given template ID, or null if not found.</summary>
            <param name="templateId">Template identifier.</param>
            <returns>Latest template or null.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IWorkflowTemplateRegistry.List(System.Nullable{SemanticKernel.Graph.Integration.TemplateCategory})">
            <summary>Lists all templates optionally filtered by category.</summary>
            <param name="category">Optional category filter.</param>
            <returns>List of templates.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider">
            <summary>
            Implementation of IGraphMemoryProvider that uses Semantic Kernel's memory system.
            Provides in-memory storage when no external memory store is configured.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.#ctor(Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.KernelMemoryGraphProvider})">
            <summary>
            Initializes a new instance of KernelMemoryGraphProvider.
            </summary>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.IsAvailable">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.SaveInformationAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.SearchAsync(System.String,System.String,System.Int32,System.Double,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.GetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.RemoveAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.CalculateRelevance(System.String,System.String,System.String)">
            <summary>
            Calculates relevance score between query and text using simple string matching.
            </summary>
            <param name="query">Search query</param>
            <param name="text">Text to compare against</param>
            <param name="description">Optional description to include in comparison</param>
            <returns>Relevance score between 0.0 and 1.0</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.CreateEmptyAsyncEnumerable">
            <summary>
            Creates an empty async enumerable.
            </summary>
            <returns>Empty async enumerable</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.KernelMemoryGraphProvider.CreateAsyncEnumerable(System.Collections.Generic.IList{SemanticKernel.Graph.Integration.MemorySearchResult})">
            <summary>
            Creates an async enumerable from a list.
            </summary>
            <param name="items">Items to create async enumerable from</param>
            <returns>Async enumerable of the items</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler">
            <summary>
            Simple logging-based recovery notification handler.
            Demonstrates how to implement IRecoveryNotificationHandler for custom recovery event handling.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler.#ctor(Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler})">
            <summary>
            Initializes a new instance of LoggingRecoveryNotificationHandler.
            </summary>
            <param name="logger">Logger instance for writing notifications</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler.HandleRecoveryNotificationAsync(SemanticKernel.Graph.Core.RecoveryNotification,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler.DetermineLogLevel(SemanticKernel.Graph.Core.RecoveryEventType)">
            <summary>
            Determines the appropriate log level for a recovery event type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler.LogSuccessDetails(SemanticKernel.Graph.Core.RecoveryNotification)">
            <summary>
            Logs additional details for successful recovery.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler.LogFailureDetails(SemanticKernel.Graph.Core.RecoveryNotification)">
            <summary>
            Logs additional details for failed recovery.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.LoggingRecoveryNotificationHandler.LogErrorDetails(SemanticKernel.Graph.Core.RecoveryNotification)">
            <summary>
            Logs additional details for recovery errors.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.NullGraphTelemetry">
            <summary>
            No-op implementation of <see cref="T:SemanticKernel.Graph.Integration.IGraphTelemetry"/> used when no concrete telemetry provider is available.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IPluginDebugger">
            <summary>
            Interface for plugin-specific debugging capabilities.
            Provides specialized debugging tools for custom plugins and Semantic Kernel functions.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginDebugger.StartDebugSessionAsync(System.String,SemanticKernel.Graph.Integration.PluginDebugConfiguration)">
            <summary>
            Starts debugging a plugin with specific configuration.
            </summary>
            <param name="pluginId">Plugin ID to debug</param>
            <param name="configuration">Debug configuration</param>
            <returns>Debug session for the plugin</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginDebugger.AnalyzePluginPerformanceAsync(System.String,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Analyzes plugin performance during execution.
            </summary>
            <param name="pluginId">Plugin ID to analyze</param>
            <param name="executionContext">Execution context</param>
            <returns>Performance analysis results</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginDebugger.ValidatePluginBehaviorAsync(System.String,System.Collections.Generic.IList{SemanticKernel.Graph.Integration.PluginTestInput})">
            <summary>
            Validates plugin behavior against expected patterns.
            </summary>
            <param name="pluginId">Plugin ID to validate</param>
            <param name="testInputs">Test input scenarios</param>
            <returns>Validation results</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginDebugger.GenerateDebugReportAsync(System.String,System.Boolean)">
            <summary>
            Generates debug report for a plugin.
            </summary>
            <param name="pluginId">Plugin ID</param>
            <param name="includeHistory">Whether to include execution history</param>
            <returns>Debug report</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginDebugger.ProfilePluginResourceUsageAsync(System.String,SemanticKernel.Graph.Integration.PluginProfilingOptions)">
            <summary>
            Profiles plugin resource usage.
            </summary>
            <param name="pluginId">Plugin ID to profile</param>
            <param name="profilingOptions">Profiling configuration</param>
            <returns>Resource usage profile</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginDebugger">
            <summary>
            Comprehensive plugin debugger with advanced analysis and monitoring capabilities.
            Integrates with the existing debug system to provide plugin-specific insights.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginDebugger.#ctor(SemanticKernel.Graph.Integration.IPluginRegistry,SemanticKernel.Graph.Integration.PluginDebuggerOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.PluginDebugger})">
            <summary>
            Initializes a new instance of PluginDebugger.
            </summary>
            <param name="pluginRegistry">Plugin registry for accessing plugin metadata</param>
            <param name="options">Debugger configuration options</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginDebugger.StartDebugSessionAsync(System.String,SemanticKernel.Graph.Integration.PluginDebugConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginDebugger.AnalyzePluginPerformanceAsync(System.String,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginDebugger.ValidatePluginBehaviorAsync(System.String,System.Collections.Generic.IList{SemanticKernel.Graph.Integration.PluginTestInput})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginDebugger.GenerateDebugReportAsync(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginDebugger.ProfilePluginResourceUsageAsync(System.String,SemanticKernel.Graph.Integration.PluginProfilingOptions)">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IPluginDebugSession">
            <summary>
            Plugin debug session implementation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginDebugConfiguration">
            <summary>
            Plugin debug configuration.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginDebugLevel">
            <summary>
            Plugin debug levels.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginExecutionHistory">
            <summary>
            Plugin execution history tracking.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginExecutionRecord">
            <summary>
            Plugin execution record.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginDebuggerOptions">
            <summary>
            Plugin debugger configuration options.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginMetadata">
            <summary>
            Represents comprehensive metadata for a plugin in the graph system.
            Includes versioning, dependencies, capabilities, and runtime information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Id">
            <summary>
            Gets or sets the unique identifier for the plugin.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Name">
            <summary>
            Gets or sets the human-readable name of the plugin.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Description">
            <summary>
            Gets or sets the plugin description.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Version">
            <summary>
            Gets or sets the plugin version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Author">
            <summary>
            Gets or sets the plugin author information.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Category">
            <summary>
            Gets or sets the category of the plugin (e.g., "Cognitive", "Data", "Control Flow").
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Tags">
            <summary>
            Gets or sets tags for plugin discovery and filtering.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.PluginType">
            <summary>
            Gets or sets the plugin type for specialized handling.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.MinSemanticKernelVersion">
            <summary>
            Gets or sets the minimum required Semantic Kernel version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.MinGraphVersion">
            <summary>
            Gets or sets the minimum required Graph library version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Dependencies">
            <summary>
            Gets or sets plugin dependencies.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Permissions">
            <summary>
            Gets or sets required permissions for the plugin.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.SupportedExecutionModes">
            <summary>
            Gets or sets the supported execution modes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.SupportsParallelExecution">
            <summary>
            Gets or sets whether the plugin supports parallel execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.SupportsStateSerialization">
            <summary>
            Gets or sets whether the plugin supports state serialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.ConfigurationSchema">
            <summary>
            Gets or sets configuration schema for the plugin.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.Performance">
            <summary>
            Gets or sets performance characteristics of the plugin.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.ResourceRequirements">
            <summary>
            Gets or sets resource requirements.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.SecurityLevel">
            <summary>
            Gets or sets the plugin's security level.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.CreatedAt">
            <summary>
            Gets or sets when the plugin was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.UpdatedAt">
            <summary>
            Gets or sets when the plugin was last updated.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginMetadata.CustomMetadata">
            <summary>
            Gets or sets custom metadata for extensibility.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginMetadata.FromKernelPlugin(Microsoft.SemanticKernel.KernelPlugin,SemanticKernel.Graph.Integration.PluginVersion)">
            <summary>
            Creates plugin metadata from a Semantic Kernel plugin.
            </summary>
            <param name="kernelPlugin">Source kernel plugin</param>
            <param name="version">Optional version override</param>
            <returns>Plugin metadata</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginMetadata.ForCustomNode(System.String,System.String,System.String,SemanticKernel.Graph.Integration.PluginVersion)">
            <summary>
            Creates metadata for a custom graph node plugin.
            </summary>
            <param name="id">Plugin ID</param>
            <param name="name">Plugin name</param>
            <param name="description">Plugin description</param>
            <param name="version">Plugin version</param>
            <returns>Plugin metadata</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginMetadata.Validate">
            <summary>
            Validates the plugin metadata for consistency and completeness.
            </summary>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginMetadata.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginMetadata.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginMetadata.ToString">
            <summary>
            Returns a string representation of the plugin metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginVersion">
            <summary>
            Represents a semantic version for plugins.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginVersion.Major">
            <summary>
            Gets the major version number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginVersion.Minor">
            <summary>
            Gets the minor version number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginVersion.Patch">
            <summary>
            Gets the patch version number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginVersion.PreRelease">
            <summary>
            Gets the pre-release identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginVersion.IsValid">
            <summary>
            Gets whether this is a valid version.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginVersion.#ctor">
            <summary>
            Initializes a new instance of PluginVersion.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of PluginVersion.
            </summary>
            <param name="major">Major version</param>
            <param name="minor">Minor version</param>
            <param name="patch">Patch version</param>
            <param name="preRelease">Pre-release identifier</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginVersion.Parse(System.String)">
            <summary>
            Parses a version string.
            </summary>
            <param name="version">Version string</param>
            <returns>Parsed version</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginVersion.TryParse(System.String,SemanticKernel.Graph.Integration.PluginVersion@)">
            <summary>
            Tries to parse a version string.
            </summary>
            <param name="version">Version string</param>
            <param name="result">Parsed version</param>
            <returns>True if parsing succeeded</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginDependency">
            <summary>
            Represents a plugin dependency.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginDependency.PluginId">
            <summary>
            Gets or sets the plugin ID that is required.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginDependency.MinVersion">
            <summary>
            Gets or sets the minimum required version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginDependency.MaxVersion">
            <summary>
            Gets or sets the maximum allowed version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginDependency.IsOptional">
            <summary>
            Gets or sets whether this dependency is optional.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginDependency.Validate">
            <summary>
            Validates the dependency.
            </summary>
            <returns>Validation result</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginPerformanceMetrics">
            <summary>
            Performance metrics for a plugin.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginPerformanceMetrics.AverageExecutionTimeMs">
            <summary>
            Gets or sets the estimated average execution time in milliseconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginPerformanceMetrics.MemoryUsageMB">
            <summary>
            Gets or sets the estimated memory usage in MB.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginPerformanceMetrics.CpuIntensity">
            <summary>
            Gets or sets the CPU intensity level.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginPerformanceMetrics.PerformsIO">
            <summary>
            Gets or sets whether the plugin performs I/O operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginPerformanceMetrics.MakesNetworkCalls">
            <summary>
            Gets or sets whether the plugin makes network calls.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginResourceRequirements">
            <summary>
            Resource requirements for a plugin.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginResourceRequirements.MinMemoryMB">
            <summary>
            Gets or sets minimum required memory in MB.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginResourceRequirements.MaxParallelInstances">
            <summary>
            Gets or sets maximum recommended parallel instances.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginResourceRequirements.RequiredEnvironmentVariables">
            <summary>
            Gets or sets required environment variables.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginResourceRequirements.FileSystemAccess">
            <summary>
            Gets or sets required file system permissions.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginValidationResult">
            <summary>
            Plugin validation result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginValidationResult.IsValid">
            <summary>
            Gets or sets whether the validation passed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginValidationResult.Errors">
            <summary>
            Gets the validation errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginValidationResult.Warnings">
            <summary>
            Gets the validation warnings.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginValidationResult.AddError(System.String)">
            <summary>
            Adds an error message.
            </summary>
            <param name="error">Error message</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginValidationResult.AddWarning(System.String)">
            <summary>
            Adds a warning message.
            </summary>
            <param name="warning">Warning message</param>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginCategory">
            <summary>
            Plugin categories for organization and discovery.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginType">
            <summary>
            Plugin types for specialized handling.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ExecutionMode">
            <summary>
            Execution modes supported by plugins.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginPermission">
            <summary>
            Plugin permissions for security control.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PerformanceLevel">
            <summary>
            Performance levels for resource planning.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginSecurityLevel">
            <summary>
            Security levels for plugin execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.FileSystemAccess">
            <summary>
            File system access levels.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.IPluginRegistry">
            <summary>
            Interface for plugin registry operations.
            Provides discovery, registration, and lifecycle management for plugins.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.RegisterPluginAsync(SemanticKernel.Graph.Integration.PluginMetadata,System.Func{System.IServiceProvider,SemanticKernel.Graph.Core.IGraphNode})">
            <summary>
            Registers a plugin with metadata.
            </summary>
            <param name="metadata">Plugin metadata</param>
            <param name="factory">Plugin factory function</param>
            <returns>Registration result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.UnregisterPluginAsync(System.String)">
            <summary>
            Unregisters a plugin.
            </summary>
            <param name="pluginId">Plugin ID to unregister</param>
            <returns>True if unregistered successfully</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.GetPluginMetadataAsync(System.String)">
            <summary>
            Gets plugin metadata by ID.
            </summary>
            <param name="pluginId">Plugin ID</param>
            <returns>Plugin metadata if found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.CreatePluginInstanceAsync(System.String,System.IServiceProvider)">
            <summary>
            Creates a plugin instance.
            </summary>
            <param name="pluginId">Plugin ID</param>
            <param name="serviceProvider">Service provider for dependency injection</param>
            <returns>Plugin instance if found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.SearchPluginsAsync(SemanticKernel.Graph.Integration.PluginSearchCriteria)">
            <summary>
            Searches for plugins matching criteria.
            </summary>
            <param name="criteria">Search criteria</param>
            <returns>Matching plugin metadata</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.GetAllPluginsAsync">
            <summary>
            Gets all registered plugins.
            </summary>
            <returns>All plugin metadata</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.ValidateDependenciesAsync(System.String)">
            <summary>
            Validates plugin dependencies.
            </summary>
            <param name="pluginId">Plugin ID to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.UpdatePluginMetadataAsync(SemanticKernel.Graph.Integration.PluginMetadata)">
            <summary>
            Updates plugin metadata.
            </summary>
            <param name="metadata">Updated metadata</param>
            <returns>Update result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.GetPluginStatisticsAsync(System.String)">
            <summary>
            Gets usage statistics for a plugin.
            </summary>
            <param name="pluginId">Plugin ID</param>
            <returns>Plugin statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.IPluginRegistry.GetMarketplaceAnalyticsAsync">
            <summary>
            Gets marketplace analytics.
            </summary>
            <returns>Marketplace analytics</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginRegistry">
            <summary>
            Default implementation of IPluginRegistry providing comprehensive plugin management.
            Supports hot-reloading, dependency validation, and marketplace-like functionality.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.#ctor(SemanticKernel.Graph.Integration.PluginRegistryOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.PluginRegistry})">
            <summary>
            Initializes a new instance of PluginRegistry.
            </summary>
            <param name="options">Registry configuration options</param>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.RegisterPluginAsync(SemanticKernel.Graph.Integration.PluginMetadata,System.Func{System.IServiceProvider,SemanticKernel.Graph.Core.IGraphNode})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.UnregisterPluginAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.GetPluginMetadataAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.CreatePluginInstanceAsync(System.String,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.SearchPluginsAsync(SemanticKernel.Graph.Integration.PluginSearchCriteria)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.GetAllPluginsAsync">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.ValidateDependenciesAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.UpdatePluginMetadataAsync(SemanticKernel.Graph.Integration.PluginMetadata)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.GetPluginStatisticsAsync(System.String)">
            <summary>
            Gets usage statistics for a plugin.
            </summary>
            <param name="pluginId">Plugin ID</param>
            <returns>Plugin statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginRegistry.GetMarketplaceAnalyticsAsync">
            <summary>
            Gets marketplace analytics.
            </summary>
            <returns>Marketplace analytics</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginRegistration">
            <summary>
            Plugin registration information.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginStatistics">
            <summary>
            Plugin usage statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginSearchCriteria">
            <summary>
            Search criteria for plugins.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginSortBy">
            <summary>
            Plugin sort options.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginRegistrationResult">
            <summary>
            Plugin registration result.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginUpdateResult">
            <summary>
            Plugin update result.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginDependencyValidationResult">
            <summary>
            Plugin dependency validation result.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginMarketplaceAnalytics">
            <summary>
            Marketplace analytics data.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginRegistryOptions">
            <summary>
            Configuration options for plugin registry.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginRegistryOptions.MaxPlugins">
            <summary>
            Maximum number of plugins that can be registered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginRegistryOptions.AllowPluginOverwrite">
            <summary>
            Whether to allow overwriting existing plugins.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginRegistryOptions.EnablePeriodicCleanup">
            <summary>
            Whether to enable periodic cleanup of inactive plugins.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginRegistryOptions.CleanupInterval">
            <summary>
            Interval for periodic cleanup.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginRegistryOptions.InactivePluginTimeout">
            <summary>
            Timeout for considering plugins inactive.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.PluginRegistryOptions.RemoveInactivePlugins">
            <summary>
            Whether to remove inactive plugins or just mark them as inactive.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.PluginToNodeConverter">
            <summary>
            Default implementation of IPluginToNodeConverter that converts Semantic Kernel plugins
            and functions into graph nodes with intelligent analysis and configuration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.#ctor(Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.PluginToNodeConverter})">
            <summary>
            Initializes a new instance of PluginToNodeConverter.
            </summary>
            <param name="logger">Optional logger instance</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.ConvertFunctionToNode(Microsoft.SemanticKernel.KernelFunction)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.ConvertFunctionToNode(Microsoft.SemanticKernel.KernelFunction,System.String,System.Action{SemanticKernel.Graph.Nodes.FunctionGraphNode})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.ConvertPluginToNodes(Microsoft.SemanticKernel.KernelPlugin)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.ConvertPluginToNodes(Microsoft.SemanticKernel.KernelPlugin,System.Action{SemanticKernel.Graph.Nodes.FunctionGraphNode,Microsoft.SemanticKernel.KernelFunction})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.ConvertPluginToConnectedNodes(Microsoft.SemanticKernel.KernelPlugin,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.AnalyzePluginConnections(Microsoft.SemanticKernel.KernelPlugin)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.AnalyzeFunctionParameters(Microsoft.SemanticKernel.KernelFunction,SemanticKernel.Graph.Nodes.FunctionGraphNode)">
            <summary>
            Analyzes function parameters and adds relevant metadata to the node.
            </summary>
            <param name="function">Function to analyze</param>
            <param name="node">Node to add metadata to</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.PluginToNodeConverter.CanConnect(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelFunction)">
            <summary>
            Determines if two functions can be logically connected based on their parameters.
            </summary>
            <param name="source">Source function</param>
            <param name="target">Target function</param>
            <returns>True if functions can be connected</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Policies.DefaultCostPolicy">
            <summary>
            Pragmatic default policies with safe behavior.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Policies.ICostPolicy">
            <summary>
            Provides pluggable cost and priority decisions per node.
            Implementations can derive cost/priority from state, metadata or external budgets.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.Policies.ICostPolicy.GetNodeCostWeight(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Returns a relative cost weight for the node (>= 1.0). Higher means more expensive.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.Policies.ICostPolicy.GetNodePriority(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Returns an optional execution priority for the node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Policies.IErrorHandlingPolicy">
            <summary>
            Provides a lightweight, pluggable error handling decision per failure.
            Complements <see cref="T:SemanticKernel.Graph.Core.ErrorRecoveryEngine"/> and can be combined.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.Policies.IErrorHandlingPolicy.ShouldRetry(SemanticKernel.Graph.Core.IGraphNode,System.Exception,SemanticKernel.Graph.Execution.GraphExecutionContext,System.Nullable{System.TimeSpan}@)">
            <summary>
            Called when a node throws. Return true if the engine should retry the node immediately.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.Policies.IErrorHandlingPolicy.ShouldSkip(SemanticKernel.Graph.Core.IGraphNode,System.Exception,SemanticKernel.Graph.Execution.GraphExecutionContext)">
            <summary>
            Called when a node throws. Return true if the engine should skip the node and continue.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Policies.ITimeoutPolicy">
            <summary>
            Provides per-node timeout configuration at runtime.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.Policies.ITimeoutPolicy.GetNodeTimeout(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Returns an optional timeout for a given node under current state.
            If null, the engine uses its default behavior.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Policies.RegistryBackedErrorHandlingPolicy">
            <summary>
            Error handling policy backed by <see cref="T:SemanticKernel.Graph.Core.ErrorPolicyRegistry"/>.
            Decides retry/backoff/skip based on resolved rules and tracks per-node attempts in <see cref="T:SemanticKernel.Graph.Execution.GraphExecutionContext"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ReActTemplateEngine">
            <summary>
            Specialized template engine for ReAct pattern prompts with domain-optimized templates.
            Provides pre-built, optimized prompt templates for different problem domains and contexts.
            </summary>
            <remarks>
            The ReActTemplateEngine builds upon the base template functionality to provide:
            - Domain-specific templates: Optimized prompts for different problem types
            - Context-aware rendering: Templates adapt based on execution context
            - Multi-language support: Templates in different languages and styles
            - Performance optimization: Caching and efficient template compilation
            - Quality assurance: Built-in template validation and testing
            - Extensibility: Easy addition of custom domain templates
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.#ctor(SemanticKernel.Graph.Integration.ReActTemplateOptions,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.ReActTemplateEngine})">
            <summary>
            Initializes a new instance of ReActTemplateEngine.
            </summary>
            <param name="options">Configuration options for the template engine</param>
            <param name="logger">Optional logger for tracking template activities</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RenderAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RenderWithStateAsync(System.String,SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RenderWithArgumentsAsync(System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.CompileTemplate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RenderCompiledAsync(SemanticKernel.Graph.Integration.ICompiledTemplate,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ValidateTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ExtractVariableNames(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RegisterHelper(System.String,System.Func{System.Object[],System.String})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RegisterAsyncHelper(System.String,System.Func{System.Object[],System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RenderReasoningTemplateAsync(SemanticKernel.Graph.Nodes.ReActDomain,System.Collections.Generic.Dictionary{System.String,System.Object},SemanticKernel.Graph.Integration.ReasoningTemplateType,System.Threading.CancellationToken)">
            <summary>
            Renders a domain-specific ReAct template for reasoning phase.
            </summary>
            <param name="domain">Problem domain for template selection</param>
            <param name="context">Context data for template rendering</param>
            <param name="templateType">Type of reasoning template</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered reasoning prompt</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RenderActionTemplateAsync(SemanticKernel.Graph.Nodes.ReActDomain,System.Collections.Generic.Dictionary{System.String,System.Object},SemanticKernel.Graph.Integration.ActionTemplateType,System.Threading.CancellationToken)">
            <summary>
            Renders a domain-specific ReAct template for action selection phase.
            </summary>
            <param name="domain">Problem domain for template selection</param>
            <param name="context">Context data for template rendering</param>
            <param name="templateType">Type of action template</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered action selection prompt</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RenderObservationTemplateAsync(SemanticKernel.Graph.Nodes.ReActDomain,System.Collections.Generic.Dictionary{System.String,System.Object},SemanticKernel.Graph.Integration.ObservationTemplateType,System.Threading.CancellationToken)">
            <summary>
            Renders a domain-specific ReAct template for observation phase.
            </summary>
            <param name="domain">Problem domain for template selection</param>
            <param name="context">Context data for template rendering</param>
            <param name="templateType">Type of observation template</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered observation analysis prompt</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RegisterDomainTemplateSet(SemanticKernel.Graph.Nodes.ReActDomain,SemanticKernel.Graph.Integration.DomainTemplateSet)">
            <summary>
            Registers a custom domain template set.
            </summary>
            <param name="domain">Domain for the template set</param>
            <param name="templateSet">Custom template set</param>
            <exception cref="T:System.ArgumentNullException">Thrown when templateSet is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.GetAvailableTemplates(SemanticKernel.Graph.Nodes.ReActDomain,SemanticKernel.Graph.Integration.ReActPhase)">
            <summary>
            Gets available template variations for a specific domain and phase.
            </summary>
            <param name="domain">Problem domain</param>
            <param name="phase">ReAct phase (reasoning, action, observation)</param>
            <returns>List of available template variations</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ValidateTemplateDetailed(System.String,System.String)">
            <summary>
            Validates a template for syntax and completeness with additional options.
            </summary>
            <param name="template">Template to validate</param>
            <param name="templateType">Type of template for context-specific validation</param>
            <returns>Validation result with any issues found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.InitializeBuiltInTemplates">
            <summary>
            Initializes built-in domain templates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.CreateGeneralTemplateSet">
            <summary>
            Creates template set for general domain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.CreateProblemSolvingTemplateSet">
            <summary>
            Creates template set for problem-solving domain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.CreateDataAnalysisTemplateSet">
            <summary>
            Creates template set for data analysis domain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.CreateTaskExecutionTemplateSet">
            <summary>
            Creates template set for task execution domain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.GetOrCompileTemplate(System.String)">
            <summary>
            Gets or compiles a template for efficient reuse.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.CompileTemplate(System.String)">
            <summary>
            Compiles a template for efficient rendering.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.RenderCompiledTemplateAsync(SemanticKernel.Graph.Integration.CompiledReActTemplate,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Renders a compiled template with context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ProcessConditionalBlocks(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Processes conditional blocks in templates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ProcessLoopBlocks(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Processes loop blocks in templates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ExtractVariables(System.String)">
            <summary>
            Extracts variables from template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ExtractHelpers(System.String)">
            <summary>
            Extracts helpers from template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.CalculateTemplateHash(System.String)">
            <summary>
            Calculates hash for template caching.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.GetDomainTemplateSet(SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Gets domain template set, creating default if needed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ConvertToContextDictionary(System.Object)">
            <summary>
            Converts object to context dictionary.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.PrepareGraphStateContext(SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Prepares context from graph state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.EnhanceReasoningContext(System.Collections.Generic.Dictionary{System.String,System.Object},SemanticKernel.Graph.Nodes.ReActDomain,SemanticKernel.Graph.Integration.ReasoningTemplateType)">
            <summary>
            Enhances context for reasoning templates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.EnhanceActionContext(System.Collections.Generic.Dictionary{System.String,System.Object},SemanticKernel.Graph.Nodes.ReActDomain,SemanticKernel.Graph.Integration.ActionTemplateType)">
            <summary>
            Enhances context for action templates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.EnhanceObservationContext(System.Collections.Generic.Dictionary{System.String,System.Object},SemanticKernel.Graph.Nodes.ReActDomain,SemanticKernel.Graph.Integration.ObservationTemplateType)">
            <summary>
            Enhances context for observation templates.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ClearDomainCache(System.String)">
            <summary>
            Clears cache entries for a specific domain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ValidateTemplateSyntaxBasic(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Validates template syntax.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ValidateTemplateSyntax(System.String,SemanticKernel.Graph.Integration.ReActTemplateValidationResult)">
            <summary>
            Validates template syntax for detailed validation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ValidateTemplatePlaceholders(System.String,System.String,SemanticKernel.Graph.Integration.ReActTemplateValidationResult)">
            <summary>
            Validates template placeholders.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.ValidateTemplateStructure(System.String,System.String,SemanticKernel.Graph.Integration.ReActTemplateValidationResult)">
            <summary>
            Validates template structure.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.ReActTemplateEngine.GetRequiredPlaceholders(System.String)">
            <summary>
            Gets required placeholders for template type.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ReActTemplateOptions">
            <summary>
            Configuration options for ReAct template engine.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ReActTemplateOptions.EnableCaching">
            <summary>Whether to enable template caching.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ReActTemplateOptions.MaxCacheSize">
            <summary>Maximum number of templates to cache.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ReActTemplateOptions.DefaultLanguage">
            <summary>Default language for templates.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.ReActTemplateOptions.EnableDetailedLogging">
            <summary>Whether to enable detailed template logging.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.CompiledReActTemplate">
            <summary>
            Compiled template for efficient rendering.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ReActCompiledTemplate">
            <summary>
            Implementation of ICompiledTemplate for ReAct templates.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.DomainTemplateSet">
            <summary>
            Set of templates for a specific domain.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ReActTemplateValidationResult">
            <summary>
            Extended template validation result for ReAct-specific validation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateIssue">
            <summary>
            Template validation issue.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ReActPhase">
            <summary>
            ReAct phases for template organization.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ReasoningTemplateType">
            <summary>
            Types of reasoning templates.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ActionTemplateType">
            <summary>
            Types of action templates.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ObservationTemplateType">
            <summary>
            Types of observation templates.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateSeverity">
            <summary>
            Template validation severity levels.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.RestToolSchema">
            <summary>
            Minimal REST tool schema describing a single HTTP operation.
            This is intentionally simple and not a full OpenAPI parser.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.Id">
            <summary>
            Gets the unique identifier of this REST tool.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.Name">
            <summary>
            Gets the human-friendly name of this tool.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.Description">
            <summary>
            Gets the description of the tool's purpose.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.BaseUri">
            <summary>
            Gets the base URI of the remote service.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.Path">
            <summary>
            Gets the relative path of the operation (may include route parameters already expanded by the node).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.Method">
            <summary>
            Gets the HTTP method for the operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.JsonBodyTemplate">
            <summary>
            Optional JSON body template evaluated with <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.QueryParameters">
            <summary>
            Query parameters mapping: server parameter name -> argument key in state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.Headers">
            <summary>
            Header mapping: server header name -> argument key, or literal value (prefixed with ":"),
            or secret reference (prefixed with "secret:"; resolved via <see cref="T:SemanticKernel.Graph.Integration.ISecretResolver"/> when available).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.TimeoutSeconds">
            <summary>
            Request timeout in seconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.CacheEnabled">
            <summary>
            Whether node-level response caching is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.CacheTtlSeconds">
            <summary>
            Cache time-to-live in seconds when caching is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.RestToolSchema.TelemetryDependencyName">
            <summary>
            Optional logical dependency name for telemetry correlation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.RestToolSchemaConverter">
            <summary>
            Default converter from <see cref="T:SemanticKernel.Graph.Integration.RestToolSchema"/> to <see cref="T:SemanticKernel.Graph.Nodes.FunctionGraphNode"/> using <see cref="T:SemanticKernel.Graph.Nodes.RestToolGraphNode"/>.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.RestToolSchemaConverter.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger{SemanticKernel.Graph.Integration.RestToolSchemaConverter},SemanticKernel.Graph.Integration.ISecretResolver,SemanticKernel.Graph.Integration.IGraphTelemetry)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Integration.RestToolSchemaConverter"/>.
            </summary>
            <param name="httpClient">HTTP client used to perform requests.</param>
            <param name="logger">Optional logger for diagnostics.</param>
            <param name="secretResolver">Optional secret resolver for header values.</param>
            <param name="telemetry">Optional telemetry adapter for dependency tracking.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.RestToolSchemaConverter.CreateNode(SemanticKernel.Graph.Integration.RestToolSchema)">
            <summary>
            Creates an executable node for the given REST tool <see cref="T:SemanticKernel.Graph.Integration.RestToolSchema"/>.
            </summary>
            <param name="schema">REST tool schema.</param>
            <returns>Configured <see cref="T:SemanticKernel.Graph.Core.IGraphNode"/> that executes the REST operation.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger">
            <summary>
            Implementation of IGraphLogger that integrates with Microsoft.Extensions.Logging
            and provides structured logging for graph execution events.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.#ctor(Microsoft.Extensions.Logging.ILogger,SemanticKernel.Graph.Extensions.GraphOptions)">
            <summary>
            Initializes a new instance of SemanticKernelGraphLogger.
            </summary>
            <param name="logger">Logger instance from dependency injection</param>
            <param name="options">Graph configuration options</param>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogGraphExecutionStarted(System.String,System.String,System.String,SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogGraphExecutionCompleted(System.String,System.String,SemanticKernel.Graph.State.GraphState,System.TimeSpan,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogGraphExecutionFailed(System.String,System.String,System.Exception,SemanticKernel.Graph.State.GraphState,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogNodeExecutionStarted(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogNodeExecutionCompleted(System.String,System.String,System.TimeSpan,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogNodeExecutionFailed(System.String,System.String,System.Exception,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogStateChange(System.String,System.String,SemanticKernel.Graph.Integration.StateChangeType,System.Collections.Generic.IList{System.String},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogGraphValidation(System.String,SemanticKernel.Graph.State.ValidationResult,SemanticKernel.Graph.Integration.GraphValidationType)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogNodeNavigation(System.String,System.String,System.String,System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogPerformanceMetric(System.String,System.String,System.Double,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogDebug(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogInformation(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogWarning(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogError(System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogStructuredError(System.String,System.String,System.Exception,SemanticKernel.Graph.Core.ErrorHandlingContext,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogErrorRecovery(System.String,System.String,SemanticKernel.Graph.Core.ErrorRecoveryAction,System.Boolean,System.TimeSpan,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogCategorized(System.String,Microsoft.Extensions.Logging.LogLevel,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogWithCorrelation(System.String,Microsoft.Extensions.Logging.LogLevel,System.String,System.String,SemanticKernel.Graph.Integration.LogContext)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogNodeExecution(System.String,System.String,SemanticKernel.Graph.Integration.NodeExecutionInfo)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogStateChange(System.String,SemanticKernel.Graph.Integration.StateChangeInfo)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.LogRoutingDecision(System.String,SemanticKernel.Graph.Integration.RoutingDecisionInfo)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.IsEnabled(System.String,Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.GetNodeConfig(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.BeginExecutionScope(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.SerializeMetadata(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Serializes metadata dictionary to JSON string for logging.
            </summary>
            <param name="metadata">Metadata to serialize</param>
            <returns>JSON string representation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.GenerateOrGetCorrelationId(System.String)">
            <summary>
            Generates or retrieves a correlation ID for the given execution ID.
            </summary>
            <param name="executionId">Execution identifier</param>
            <returns>Correlation identifier</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.TruncateData(System.Object,System.Int32)">
            <summary>
            Truncates data to fit within the specified maximum size.
            </summary>
            <param name="data">Data to truncate</param>
            <param name="maxSize">Maximum size in characters</param>
            <returns>Truncated data representation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.ExecutionScope">
            <summary>
            Represents an execution scope that can be disposed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SemanticKernelGraphLogger.NoOpDisposable">
            <summary>
            No-operation disposable for when logging is disabled.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SanitizationLevel">
            <summary>
            Defines the level of sanitization to apply.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SanitizationLevel.None">
            <summary>
            No sanitization. Values are left as-is.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SanitizationLevel.Basic">
            <summary>
            Redact values only when the key suggests sensitivity (e.g., contains "password" or "token").
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SanitizationLevel.Strict">
            <summary>
            Aggressive sanitization. Redacts all string values regardless of key, in addition to key-based redaction.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SensitiveDataPolicy">
            <summary>
            Configuration policy for sensitive data sanitization in logs/exports.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Integration.SensitiveDataPolicy.DefaultKeySubstrings">
            <summary>
            Gets the default list of key substrings considered sensitive (case-insensitive).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.SensitiveDataPolicy.Default">
            <summary>
            Gets a default policy instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.SensitiveDataPolicy.Enabled">
            <summary>
            Enables sanitization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.SensitiveDataPolicy.Level">
            <summary>
            Controls how aggressively sanitization is applied.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.SensitiveDataPolicy.RedactionText">
            <summary>
            Replacement text for redacted values.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.SensitiveDataPolicy.SensitiveKeySubstrings">
            <summary>
            Substrings that, when contained in a key name, mark the value as sensitive.
            Matching is case-insensitive.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.SensitiveDataPolicy.MaskAuthorizationBearerToken">
            <summary>
            Whether to preserve the "Bearer " prefix when redacting authorization tokens.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.SensitiveDataSanitizer">
            <summary>
            Utility to sanitize objects and dictionaries according to a <see cref="T:SemanticKernel.Graph.Integration.SensitiveDataPolicy"/>.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SensitiveDataSanitizer.Sanitize(System.Object)">
            <summary>
            Sanitizes an arbitrary object recursively. For dictionaries, key names are used to determine sensitivity.
            For lists/arrays, elements are sanitized. Primitive values are returned as-is unless the caller supplies a key context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SensitiveDataSanitizer.Sanitize(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sanitizes a dictionary in-place semantics by returning a new sanitized dictionary instance.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.SensitiveDataSanitizer.Sanitize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sanitizes a read-only dictionary by creating a new instance with sanitized values.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Templates.ChainOfThoughtWorkflowTemplate">
            <summary>
            Chain-of-Thought template creating a single <see cref="T:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode"/> with configured type and depth.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Templates.ChatbotWorkflowTemplate">
            <summary>
            Basic chatbot workflow: input -> reasoning (optional) -> function/tool -> output.
            Designed to be a minimal, pragmatic template with SK-first approach.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Templates.DocumentAnalysisWorkflowTemplate">
            <summary>
            Document analysis pipeline: ingest -> analyze -> summarize. Minimal pragmatic pipeline.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.Templates.ReActWorkflowTemplate">
            <summary>
            ReAct workflow template using <see cref="T:SemanticKernel.Graph.Nodes.ReActLoopGraphNode"/> with optional domain-specific tuning.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.ToolRegistry">
            <summary>
            In-memory implementation of <see cref="T:SemanticKernel.Graph.Integration.IToolRegistry"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.VisualGraphDefinition">
            <summary>
            Strongly-typed definition used by a visual editor to describe a graph.
            Minimal and pragmatic: nodes, edges and optional start node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphDefinition.Name">
            <summary>
            Gets or sets the graph name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphDefinition.Description">
            <summary>
            Gets or sets the graph description.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphDefinition.StartNodeId">
            <summary>
            Gets or sets the optional start node id.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphDefinition.Nodes">
            <summary>
            Gets or sets the collection of nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphDefinition.Edges">
            <summary>
            Gets or sets the collection of edges.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.VisualGraphNode">
            <summary>
            Visual node definition. Default type is "function" to map to SK functions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphNode.Id">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphNode.Name">
            <summary>
            Gets or sets the node display name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphNode.Type">
            <summary>
            Gets or sets the node type (e.g., "function").
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphNode.Plugin">
            <summary>
            Gets or sets the plugin name for function nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphNode.Function">
            <summary>
            Gets or sets the function name for function nodes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphNode.Description">
            <summary>
            Optional description.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.VisualGraphEdge">
            <summary>
            Visual edge definition with optional simple condition (state boolean key).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphEdge.Source">
            <summary>
            Gets or sets the source node id.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphEdge.Target">
            <summary>
            Gets or sets the target node id.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphEdge.Label">
            <summary>
            Optional edge label.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.VisualGraphEdge.Condition">
            <summary>
            Optional condition: name of a boolean key in state to enable this edge.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.WorkflowTemplateCompatibility">
            <summary>
            Performs minimal environment compatibility checks for workflow templates.
            Currently produces only warnings for missing optional capabilities.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.WorkflowTemplateCompatibilityResult">
            <summary>
            Result of compatibility validation for templates.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.WorkflowTemplateRegistry">
            <summary>
            In-memory implementation of <see cref="T:SemanticKernel.Graph.Integration.IWorkflowTemplateRegistry"/> suitable for single-process hosting.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateCategory">
            <summary>
            Categories for classifying workflow templates.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateCapabilities">
            <summary>
            Bit flags that describe capabilities required by a template.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.TemplateParameter">
            <summary>
            Describes a single parameter in a workflow template.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateParameter.Name">
            <summary>
            Parameter name (identifier) used by the template.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateParameter.Description">
            <summary>
            Human-readable description of the parameter purpose.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateParameter.Required">
            <summary>
            Indicates whether this parameter is required.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.TemplateParameter.DefaultValue">
            <summary>
            Optional default value to use when not provided.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Integration.WorkflowTemplateValidationResult">
            <summary>
            Validation result for workflow template parameters.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.WorkflowTemplateValidationResult.IsValid">
            <summary>
            Gets whether the provided parameters are valid.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Integration.WorkflowTemplateValidationResult.Errors">
            <summary>
            Gets the validation errors, if any.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.WorkflowTemplateValidationResult.Success">
            <summary>
            Creates a successful validation result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Integration.WorkflowTemplateValidationResult.Failure(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a failed validation result with the specified error messages.
            </summary>
            <param name="errors">Collection of error messages.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SemanticKernel.Graph.Nodes.ActionGraphNode" -->
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.#ctor(System.String,System.String,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Nodes.ActionGraphNode"/>.
            </summary>
            <param name="nodeId">Optional node identifier. If null, a unique identifier is generated.</param>
            <param name="name">Optional display name. Defaults to "Action Node".</param>
            <param name="description">Optional description of the node's purpose.</param>
            <param name="logger">Optional logger used for diagnostics.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.CreateWithActions(Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Nodes.ActionSelectionCriteria,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Creates an <see cref="T:SemanticKernel.Graph.Nodes.ActionGraphNode"/> pre‑populated with actions discovered from a kernel.
            </summary>
            <param name="kernel">The kernel exposing plugins and functions to pull actions from.</param>
            <param name="actionSelection">Selection criteria for which functions to include.</param>
            <param name="nodeId">Optional node identifier.</param>
            <param name="logger">Optional logger.</param>
            <returns>A configured node with available actions sourced from the kernel.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="actionSelection"/> is null.</exception>
            <remarks>
            Functions are filtered using <see cref="T:SemanticKernel.Graph.Nodes.ActionSelectionCriteria"/>. Existing actions in the node are not preserved; a new node is returned.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.AvailableActions">
            <summary>
            Gets the available actions that can be executed by this node, keyed by action name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.Statistics">
            <summary>
            Gets a point‑in‑time snapshot of action execution statistics maintained in node metadata.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.SelectionStrategy">
            <summary>
            Gets the action selection strategy used by this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionGraphNode.ParameterValidationEnabled">
            <summary>
            Gets a value indicating whether parameter validation is enabled before execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.ConfigureExecution(SemanticKernel.Graph.Nodes.ActionSelectionStrategy,System.Boolean,System.Nullable{System.TimeSpan},System.Boolean,System.Int32)">
            <summary>
            Configures action selection and execution behavior for this node.
            </summary>
            <param name="selectionStrategy">The strategy used to select actions.</param>
            <param name="enableParameterValidation">Whether to validate parameters prior to invocation.</param>
            <param name="maxExecutionTime">Maximum allowed duration per action execution. Defaults to 5 minutes.</param>
            <param name="enableRetryOnFailure">Whether to retry on failures.</param>
            <param name="maxRetries">Maximum number of retries (0–10 inclusive).</param>
            <returns>The same instance for fluent chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxRetries"/> is outside 0–10.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.AddAction(System.String,Microsoft.SemanticKernel.KernelFunction,System.Func{Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.KernelArguments})">
            <summary>
            Adds an action that this node can execute.
            </summary>
            <param name="actionName">The logical name/key for the action.</param>
            <param name="function">The kernel function to execute.</param>
            <param name="parameterMapper">Optional mapping from graph arguments to action parameters.</param>
            <returns>The same instance for fluent chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="actionName"/> is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="function"/> is null.</exception>
            <remarks>
            Adding an action with an existing name replaces the previous function and its mapper. Mapping is applied before default parameter inference.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.AddActionsFromPlugin(Microsoft.SemanticKernel.KernelPlugin,System.Func{Microsoft.SemanticKernel.KernelFunction,System.Boolean})">
            <summary>
            Adds multiple actions discovered from a plugin.
            </summary>
            <param name="plugin">The plugin whose functions will be considered.</param>
            <param name="actionFilter">Optional predicate to select specific functions.</param>
            <returns>The same instance for fluent chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="plugin"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.RemoveAction(System.String)">
            <summary>
            Removes an action from the available set.
            </summary>
            <param name="actionName">The action name to remove.</param>
            <returns><c>true</c> if an action was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.AddNextNode(SemanticKernel.Graph.Core.IGraphNode,System.Func{Microsoft.SemanticKernel.KernelArguments,System.Boolean})">
            <summary>
            Adds a next node and an associated conditional edge for routing.
            </summary>
            <param name="nextNode">The node to add as a potential successor.</param>
            <param name="condition">Optional predicate evaluated over <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> to permit traversal.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="nextNode"/> is null.</exception>
            <remarks>
            If <paramref name="condition"/> is null, an unconditional edge is added. Duplicate nodes are ignored.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.AddSuccessFailureRouting(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds success/failure routing based on the "action_success" argument populated by execution.
            </summary>
            <param name="successNode">The node to route to when execution succeeds.</param>
            <param name="failureNode">The node to route to when execution fails.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
            <remarks>
            When <paramref name="executionResult"/> is null, all registered next nodes are returned. Otherwise, the method
            evaluates conditional edges and returns the applicable subset. If no conditions match, all next nodes are returned.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> when no suitable action can be selected. Honors caller cancellation
            via <paramref name="cancellationToken"/> and enforces a per‑action timeout when configured.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when an action cannot be selected for execution or all attempts fail.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
            <remarks>
            Returns validation errors when no actions are available and warnings when reasoning inputs are missing.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <remarks>Performs pre‑execution validation and emits diagnostic logs.</remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <inheritdoc />
            <remarks>Emits diagnostic logs including success flag and action name when available.</remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
            <remarks>Increments failure counters and logs the error.</remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.InitializeMetadata">
            <summary>
            Initializes node metadata with defaults for selection, retries, and statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.ShouldIncludeFunction(Microsoft.SemanticKernel.KernelFunction,SemanticKernel.Graph.Nodes.ActionSelectionCriteria)">
            <summary>
            Determines whether a function should be included based on selection criteria.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.SelectActionAsync(Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Selects the most appropriate action to execute based on configured strategy, reasoning, and context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.SelectActionDirect(System.String)">
            <summary>
            Selects an action by direct name matching, falling back to the first available when not specified.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.SelectActionIntelligentAsync(System.String,System.String,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Selects an action using a simple scoring function over reasoning text and parameter compatibility.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.SelectActionRandom(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Selects a random action (useful for testing or exploration).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.CalculateActionScore(System.String,Microsoft.SemanticKernel.KernelFunction,System.String,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Calculates an action score based on name relevance, parameter compatibility, and historical success.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.PrepareActionParameters(System.String,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Prepares parameters for action execution using an optional mapper and best‑effort inference.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.ExecuteActionWithRetryAsync(Microsoft.SemanticKernel.Kernel,System.String,Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes an action with retry and timeout logic, honoring caller cancellation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when all attempts fail.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.CreateExecutionResult(System.String,Microsoft.SemanticKernel.FunctionResult,System.String)">
            <summary>
            Creates an execution result from a successful action invocation and updates internal metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.CreateErrorResult(System.Exception,System.String)">
            <summary>
            Creates an error result from a failed action invocation and updates internal metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.UpdateStatistics(System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Updates aggregate and per‑action execution statistics stored in metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ActionGraphNode.GetActionStatistics">
            <summary>
            Produces a structured snapshot of current action statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ActionSelectionStrategy">
            <summary>
            Strategies for selecting which action to execute.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ActionSelectionStrategy.Direct">
            <summary>Direct action selection based on suggested action name.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ActionSelectionStrategy.Intelligent">
            <summary>Intelligent selection based on reasoning analysis and context.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ActionSelectionStrategy.Random">
            <summary>Random selection (for testing or exploration).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ActionSelectionCriteria">
            <summary>
            Criteria for selecting which actions to include from a kernel.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionSelectionCriteria.IncludedPlugins">
            <summary>Plugin names to include (null means all).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionSelectionCriteria.ExcludedPlugins">
            <summary>Plugin names to exclude.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionSelectionCriteria.FunctionNamePattern">
            <summary>Regex pattern for function names to include.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionSelectionCriteria.MinRequiredParameters">
            <summary>Minimum number of required parameters (functions with fewer parameters will be excluded).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionSelectionCriteria.MaxRequiredParameters">
            <summary>Maximum number of required parameters (functions with more parameters will be excluded).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ActionStatistics">
            <summary>
            Statistics about action node performance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionStatistics.ExecutionCount">
            <summary>Total number of executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionStatistics.FailureCount">
            <summary>Number of failed executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionStatistics.AvailableActionCount">
            <summary>Number of available actions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionStatistics.AverageExecutionTime">
            <summary>Average execution time.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionStatistics.LastExecutedAt">
            <summary>Timestamp of last execution.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionStatistics.ActionSuccessCounts">
            <summary>Success counts per action.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionStatistics.ActionFailureCounts">
            <summary>Failure counts per action.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ActionStatistics.SuccessRate">
            <summary>Overall success rate (0.0 to 1.0).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode">
            <summary>
            Graph node that implements Chain-of-Thought reasoning pattern.
            Orchestrates structured step-by-step reasoning with validation and backtracking capabilities.
            </summary>
            <remarks>
            The ChainOfThoughtGraphNode implements structured reasoning by:
            1. **Step-by-Step Processing**: Breaks down complex problems into sequential reasoning steps
            2. **Validation**: Validates each step before proceeding to the next
            3. **Backtracking**: Can backtrack when validation fails or reasoning gets stuck
            4. **Template System**: Uses specialized templates for different reasoning types
            5. **Quality Metrics**: Tracks consistency and quality of reasoning chains
            6. **Caching**: Caches frequently used reasoning chains for optimization
            
            Key features:
            - Structured reasoning: Sequential prompt execution with step validation
            - Multiple reasoning types: Problem-solving, analysis, decision-making, etc.
            - Backtracking support: Ability to retry failed reasoning steps
            - Quality assessment: Consistency and confidence scoring for reasoning chains
            - Template-driven: Configurable templates for different reasoning patterns
            - Performance optimization: Intelligent caching of reasoning chains
            
            Metadata keys (optional):
            - "ExecutionCount", "FailureCount": aggregate counters (int)
            - "AverageExecutionTime", "AverageQualityScore", "AverageStepsUsed", "LastExecutedAt": metrics
            - "BacktrackingCount", "CacheHitCount": strategy counters
            - "ReasoningType", "MaxSteps", "BacktrackingEnabled", "CachingEnabled": configuration
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.#ctor(SemanticKernel.Graph.Nodes.ChainOfThoughtType,System.Int32,System.String,System.String,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ChainOfThoughtGraphNode.
            </summary>
            <param name="reasoningType">Type of reasoning to perform</param>
            <param name="maxSteps">Maximum number of reasoning steps (default: 10)</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional custom description</param>
            <param name="templateEngine">Optional template engine for prompt processing</param>
            <param name="logger">Optional logger for tracking reasoning activities</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.CreateWithCustomization(SemanticKernel.Graph.Nodes.ChainOfThoughtType,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{SemanticKernel.Graph.Core.IChainOfThoughtValidationRule},System.Int32,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Creates a ChainOfThoughtGraphNode with custom templates and validation rules.
            </summary>
            <param name="reasoningType">Type of reasoning to perform</param>
            <param name="customTemplates">Custom templates for reasoning steps</param>
            <param name="validationRules">Custom validation rules for steps</param>
            <param name="maxSteps">Maximum number of reasoning steps</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="templateEngine">Optional template engine</param>
            <param name="logger">Optional logger</param>
            <returns>Configured ChainOfThoughtGraphNode</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.ReasoningType">
            <summary>
            Gets the type of reasoning this node performs.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.MaxSteps">
            <summary>
            Gets the maximum number of reasoning steps allowed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.BacktrackingEnabled">
            <summary>
            Gets or sets whether backtracking is enabled when validation fails.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.MinimumStepConfidence">
            <summary>
            Gets or sets the minimum confidence score required for accepting a reasoning step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.CachingEnabled">
            <summary>
            Gets or sets whether reasoning chain caching is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.CustomTemplates">
            <summary>
            Gets or sets custom templates for reasoning steps.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.Statistics">
            <summary>
            Gets the current reasoning statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.AddNextNode(SemanticKernel.Graph.Core.IGraphNode)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.RemoveNextNode(SemanticKernel.Graph.Core.IGraphNode)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetNextNodes">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.AddConditionalEdge(SemanticKernel.Graph.Core.ConditionalEdge)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetConditionalEdges">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called before the node is executed.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called after the node has been executed successfully.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="result">Execution result.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called when the node execution fails.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="exception">Exception that occurred.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Executes Chain-of-Thought reasoning over multiple steps with validation and optional backtracking.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments containing the problem/context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result encapsulating the final answer and metadata.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.InitializeMetadata">
            <summary>
            Initializes the node metadata with default values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.PrepareReasoningContext(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Prepares the reasoning context from input arguments.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.ExecuteChainOfThoughtAsync(Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Nodes.ChainOfThoughtContext,System.Threading.CancellationToken)">
            <summary>
            Executes the complete Chain-of-Thought reasoning process.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GenerateStepPromptAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtContext,SemanticKernel.Graph.Nodes.ChainOfThoughtResult,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates a prompt for a specific reasoning step.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.ExecuteReasoningStepAsync(Microsoft.SemanticKernel.Kernel,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes a single reasoning step.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.PerformBacktrackAsync(SemanticKernel.Graph.Nodes.ChainOfThoughtResult,SemanticKernel.Graph.Core.ChainOfThoughtValidationResult)">
            <summary>
            Performs backtracking when a step validation fails.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetStepTemplate(System.Int32)">
            <summary>
            Gets the appropriate template for a reasoning step.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetProblemSolvingTemplate(System.Int32)">
            <summary>
            Gets the problem-solving specific template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetAnalysisTemplate(System.Int32)">
            <summary>
            Gets the analysis specific template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetDecisionMakingTemplate(System.Int32)">
            <summary>
            Gets the decision-making specific template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetPlanningTemplate(System.Int32)">
            <summary>
            Gets the planning specific template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetEvaluationTemplate(System.Int32)">
            <summary>
            Gets the evaluation specific template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetGeneralTemplate(System.Int32)">
            <summary>
            Gets the general template for any reasoning type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.DetermineIfConclusive(System.String,System.Int32)">
            <summary>
            Determines if a reasoning step represents a conclusion.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.CalculateQualityScore(SemanticKernel.Graph.Nodes.ChainOfThoughtResult)">
            <summary>
            Calculates the overall quality score for the reasoning chain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.ExtractFinalAnswer(SemanticKernel.Graph.Nodes.ChainOfThoughtResult)">
            <summary>
            Extracts the final answer from the reasoning chain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GenerateCacheKey(SemanticKernel.Graph.Nodes.ChainOfThoughtContext)">
            <summary>
            Generates a cache key for the reasoning context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.CreateExecutionResult(SemanticKernel.Graph.Nodes.ChainOfThoughtResult,System.String,System.TimeSpan)">
            <summary>
            Creates the final execution result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.UpdateStatistics(System.TimeSpan,SemanticKernel.Graph.Nodes.ChainOfThoughtResult)">
            <summary>
            Updates execution statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.UpdateFailureStatistics">
            <summary>
            Updates failure statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ChainOfThoughtGraphNode.GetReasoningStatistics">
            <summary>
            Gets current reasoning statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ChainOfThoughtType">
            <summary>
            Represents different types of Chain-of-Thought reasoning.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ChainOfThoughtType.General">
            <summary>General-purpose reasoning for any problem.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ChainOfThoughtType.ProblemSolving">
            <summary>Structured problem-solving with solution-oriented steps.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ChainOfThoughtType.Analysis">
            <summary>Analytical reasoning for examining and understanding subjects.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ChainOfThoughtType.DecisionMaking">
            <summary>Decision-making reasoning with criteria evaluation.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ChainOfThoughtType.Planning">
            <summary>Planning reasoning for creating structured plans.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ChainOfThoughtType.Evaluation">
            <summary>Evaluation reasoning for assessing and judging subjects.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ChainOfThoughtContext">
            <summary>
            Context information for Chain-of-Thought reasoning execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtContext.ProblemStatement">
            <summary>The main problem or question to reason about.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtContext.Context">
            <summary>Additional context information.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtContext.Constraints">
            <summary>Constraints or limitations to consider.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtContext.ExpectedOutcome">
            <summary>Expected type of outcome or answer.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtContext.ReasoningDepth">
            <summary>Maximum number of reasoning steps to perform.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtContext.AdditionalContext">
            <summary>Additional context variables.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ChainOfThoughtStep">
            <summary>
            Represents a single step in the Chain-of-Thought reasoning process.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStep.StepNumber">
            <summary>Step number in the reasoning sequence.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStep.Prompt">
            <summary>The prompt used for this step.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStep.Content">
            <summary>The reasoning content generated for this step.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStep.ExecutedAt">
            <summary>When this step was executed.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStep.IsConclusive">
            <summary>Whether this step represents a conclusion.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStep.ConfidenceScore">
            <summary>Confidence score for this step (0.0 to 1.0).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ChainOfThoughtResult">
            <summary>
            Complete result of a Chain-of-Thought reasoning execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.ReasoningType">
            <summary>Type of reasoning performed.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.Steps">
            <summary>Individual reasoning steps taken.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.FinalAnswer">
            <summary>Final answer derived from the reasoning chain.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.QualityScore">
            <summary>Overall quality score of the reasoning (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.IsSuccessful">
            <summary>Whether the reasoning completed successfully.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.FailureReason">
            <summary>Reason for failure, if any.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.StartTime">
            <summary>When reasoning started.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.EndTime">
            <summary>When reasoning completed.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.ExecutionTime">
            <summary>Total execution time.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtResult.BacktrackingHistory">
            <summary>History of backtracking operations, if any.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics">
            <summary>
            Statistics about Chain-of-Thought node performance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.ExecutionCount">
            <summary>Total number of executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.FailureCount">
            <summary>Number of failed executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.AverageExecutionTime">
            <summary>Average execution time.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.AverageQualityScore">
            <summary>Average quality score across all executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.AverageStepsUsed">
            <summary>Average number of steps used in reasoning chains.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.BacktrackingCount">
            <summary>Total number of backtracking operations performed.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.CacheHitCount">
            <summary>Number of cache hits.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.LastExecutedAt">
            <summary>Timestamp of last execution.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.SuccessRate">
            <summary>Success rate (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ChainOfThoughtStatistics.CacheHitRate">
            <summary>Cache hit rate (0.0 to 1.0).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ConditionalGraphNode">
            <summary>
            Graph node that implements conditional if/else logic based on graph state.
            Evaluates conditions and routes execution to different paths without executing functions.
            Supports both function-based and template-based conditions with advanced caching and debugging.
            </summary>
            <remarks>
            This node provides:
            - Function-based conditions: Direct evaluation using Func&lt;GraphState, bool&gt;
            - Template-based conditions: Handlebars-like templates with variable substitution
            - Advanced caching: Automatic cache of evaluation results for performance
            - Debugging support: Integration with ConditionalDebugger for step-by-step analysis
            - Metrics tracking: Comprehensive execution metrics and performance monitoring
            - Thread safety: All operations are thread-safe for concurrent execution
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.#ctor(System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of ConditionalGraphNode with a condition function.
            </summary>
            <param name="condition">Function that evaluates the condition based on graph state</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional description of what this condition checks</param>
            <exception cref="T:System.ArgumentNullException">Thrown when condition is null</exception>  
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of ConditionalGraphNode with a template-based condition.
            </summary>
            <param name="conditionTemplate">Handlebars template that evaluates to a boolean value</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional description of what this condition checks</param>
            <exception cref="T:System.ArgumentException">Thrown when conditionTemplate is null or whitespace</exception>
            <remarks>
            Example:
            <code><![CDATA[
            var node = new ConditionalGraphNode("{{ gt score 0.8 }}");
            node.AddTrueNode(successNode).AddFalseNode(retryNode);
            ]]></code>
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.NodeId">
            <summary>
            Gets the unique identifier for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.Name">
            <summary>
            Gets the human-readable name of this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.Description">
            <summary>
            Gets the description of what this node does.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.Metadata">
            <summary>
            Gets the metadata associated with this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.IsExecutable">
            <summary>
            Indicates whether this node can be executed (always true for conditional nodes).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.InputParameters">
            <summary>
            Gets the list of input parameter names this node expects.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.OutputParameters">
            <summary>
            Gets the list of output parameter names this node produces.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.Condition">
            <summary>
            Gets the condition function for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.ConditionTemplate">
            <summary>
            Gets the condition template (if provided).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.TrueNodes">
            <summary>
            Gets the nodes to execute when condition is true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConditionalGraphNode.FalseNodes">
            <summary>
            Gets the nodes to execute when condition is false.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.AddTrueNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to be executed when the condition is true.
            </summary>
            <param name="node">Node to add to the true path</param>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when node is already added</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.AddFalseNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to be executed when the condition is false.
            </summary>
            <param name="node">Node to add to the false path</param>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when node is already added</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.RemoveTrueNode(System.String)">
            <summary>
            Removes a node from the true path.
            </summary>
            <param name="nodeId">ID of the node to remove</param>
            <returns>True if the node was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.RemoveFalseNode(System.String)">
            <summary>
            Removes a node from the false path.
            </summary>
            <param name="nodeId">ID of the node to remove</param>
            <returns>True if the node was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes this conditional node by evaluating the condition.
            Does not actually execute any functions - only evaluates the condition.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments containing the graph state</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result indicating the condition evaluation</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when evaluation fails.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Validates that this node can execute with the provided arguments.
            </summary>
            <param name="arguments">Arguments to validate</param>
            <returns>Validation result</returns>
            <remarks>
            Performs lightweight checks for template syntax and presence of connected nodes. Does not mutate state.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets the next possible nodes to execute after this one based on condition result.
            </summary>
            <param name="executionResult">Result of executing this node</param>
            <param name="graphState">Current graph state</param>
            <returns>Collection of possible next nodes</returns>
            <remarks>
            If <paramref name="executionResult"/> is provided and parseable as boolean, it is used; otherwise the
            condition will be re-evaluated using <paramref name="graphState"/>.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Determines if this node should be executed based on the current state.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>Always true for conditional nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Called before the node is executed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after the node has been executed successfully.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the node execution fails.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.InitializeMetadata">
            <summary>
            Initializes metadata for this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.RecordEvaluationMetrics(System.Boolean,System.TimeSpan)">
            <summary>
            Records evaluation metrics.
            </summary>
            <param name="result">Condition evaluation result</param>
            <param name="evaluationTime">Time taken to evaluate</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.RecordEvaluationError(System.Exception)">
            <summary>
            Records evaluation error.
            </summary>
            <param name="exception">Exception that occurred</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConditionalGraphNode.EvaluateTemplate(System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Evaluates a conditional expression using the advanced expression evaluator.
            </summary>
            <param name="expression">Expression to evaluate</param>
            <param name="state">Graph state to use as context</param>
            <returns>Boolean result of expression evaluation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode">
            <summary>
            Nó de grafo que implementa pausa condicional baseada em níveis de confiança/incerteza.
            Monitora métricas de confiança e interrompe para aprovação humana quando estão abaixo do threshold.
            </summary>
            <remarks>
            Este nó oferece controle de qualidade baseado em confiança:
            - Threshold configurável: Define limite mínimo de confiança
            - Múltiplas fontes: Confiança de LLM, scores de similaridade, métricas customizadas
            - Análise automática: Detecta padrões de incerteza e problemas
            - Escalation: Diferentes níveis de aprovação baseados na gravidade
            - Learning: Ajusta thresholds baseado em feedback histórico
            - Bypass: Opções para pular verificação em cenários específicos
            
            Metadados (opcionais):
            - "AnalysisCount": número de análises (int)
            - "LastAnalysisStarted" / "LastAnalysisCompleted": timestamps (DateTimeOffset)
            - "LastGateResult": último resultado (bool)
            - "GatePassed" / "GateBlocked" / "HumanOverrides": contadores (int)
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.#ctor(System.Double,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode"/>.
            </summary>
            <param name="confidenceThreshold">Minimum confidence threshold (0.0 to 1.0)</param>
            <param name="nodeId">Optional node identifier</param>
            <param name="logger">Optional logger</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.CreateWithInteraction(System.Double,SemanticKernel.Graph.Core.IHumanInteractionChannel,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Cria um nó de confidence gate com canal de interação.
            </summary>
            <param name="confidenceThreshold">Threshold de confiança</param>
            <param name="interactionChannel">Canal para interação humana</param>
            <param name="nodeId">ID opcional do nó</param>
            <param name="logger">Logger opcional</param>
            <returns>Nó configurado</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ConfidenceThreshold">
            <summary>
            Threshold mínimo de confiança.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ConfidenceSources">
            <summary>
            Fontes de confiança configuradas.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AggregationStrategy">
            <summary>
            Estratégia de agregação de confiança.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.TimeoutConfiguration">
            <summary>
            Configurações de timeout para interação humana.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AllowManualBypass">
            <summary>
            Permite bypass manual do gate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.Mode">
            <summary>
            Modo de operação do gate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ConfidenceHistory">
            <summary>
            Histórico de análises de confiança.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.Statistics">
            <summary>
            Estatísticas do gate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.LastConfidenceContext">
            <summary>
            Contexto da última análise de confiança.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executa a análise de confiança e, quando necessário, ativa o gate para intervenção humana.
            </summary>
            <param name="kernel">Instância do Semantic Kernel.</param>
            <param name="arguments">Argumentos de execução contendo o estado do grafo.</param>
            <param name="cancellationToken">Token de cancelamento.</param>
            <returns>Resultado com decisão do gate e metadados de confiança/incerteza.</returns>
            <exception cref="T:System.ArgumentNullException">Lançada quando <paramref name="kernel"/> ou <paramref name="arguments"/> é nulo.</exception>
            <exception cref="T:System.OperationCanceledException">Propagada quando <paramref name="cancellationToken"/> é cancelado.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Resolve próximos nós com base no JSON de resultado do gate.
            </summary>
            <param name="executionResult">Resultado desta execução.</param>
            <param name="graphState">Estado atual do grafo.</param>
            <returns>Conjunto de próximos nós (normais ou de baixa confiança).</returns>
            <remarks>
            Em caso de falha ao ler o JSON, retorna os nós normais.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Chamado antes da execução do nó.
            </summary>
            <param name="kernel">Instância do Semantic Kernel.</param>
            <param name="arguments">Argumentos de execução.</param>
            <param name="cancellationToken">Token de cancelamento.</param>
            <returns>Tarefa concluída.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Chamado após execução bem-sucedida do nó.
            </summary>
            <param name="kernel">Instância do Semantic Kernel.</param>
            <param name="arguments">Argumentos de execução.</param>
            <param name="result">Resultado da execução.</param>
            <param name="cancellationToken">Token de cancelamento.</param>
            <returns>Tarefa concluída.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Chamado quando a execução do nó falha.
            </summary>
            <param name="kernel">Instância do Semantic Kernel.</param>
            <param name="arguments">Argumentos de execução.</param>
            <param name="exception">Exceção ocorrida.</param>
            <param name="cancellationToken">Token de cancelamento.</param>
            <returns>Tarefa concluída.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AddConfidenceSource(SemanticKernel.Graph.Nodes.ConfidenceSource)">
            <summary>
            Adiciona uma fonte de confiança.
            </summary>
            <param name="source">Fonte de confiança</param>
            <returns>Este nó para method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.WithAggregationStrategy(SemanticKernel.Graph.Nodes.ConfidenceAggregationStrategy)">
            <summary>
            Configura estratégia de agregação.
            </summary>
            <param name="strategy">Estratégia de agregação</param>
            <returns>Este nó para method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.WithMode(SemanticKernel.Graph.Nodes.ConfidenceGateMode)">
            <summary>
            Configura modo de operação do gate.
            </summary>
            <param name="mode">Modo de operação</param>
            <returns>Este nó para method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.OnLowConfidence(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adiciona nó para execução quando confiança é baixa.
            </summary>
            <param name="lowConfidenceNode">Nó para baixa confiança</param>
            <returns>Este nó para method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.WithManualBypass(System.Boolean)">
            <summary>
            Permite bypass manual do gate.
            </summary>
            <param name="allow">Se deve permitir bypass</param>
            <returns>Este nó para method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.InitializeMetadata">
            <summary>
            Inicializa metadados do nó.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AnalyzeConfidenceAsync(Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Analyzes current confidence.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ShouldActivateGate(SemanticKernel.Graph.Nodes.ConfidenceAnalysis)">
            <summary>
            Determines whether the gate should activate.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ProcessHighConfidence(SemanticKernel.Graph.Nodes.ConfidenceAnalysis)">
            <summary>
            Processes the high‑confidence case.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ProcessLowConfidence(SemanticKernel.Graph.Nodes.ConfidenceAnalysis,SemanticKernel.Graph.State.GraphState,System.Threading.CancellationToken)">
            <summary>
            Processes the low‑confidence case.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.RequestHumanApproval(SemanticKernel.Graph.Nodes.ConfidenceAnalysis,SemanticKernel.Graph.State.GraphState,System.Threading.CancellationToken)">
            <summary>
            Requests human approval.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.ProcessHumanResponse(SemanticKernel.Graph.Core.HumanInterruptionResponse,SemanticKernel.Graph.Nodes.ConfidenceAnalysis)">
            <summary>
            Processes a human response.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.HandleGateError(System.Exception,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Handles an error in the gate.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AutoDetectConfidenceScores(Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Auto‑detects confidence scores.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.TryParseConfidenceValue(System.Object,System.Double@)">
            <summary>
            Tenta fazer parse de um valor de confiança.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.EstimateDefaultConfidence(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Estimates a default confidence based on graph state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AggregateConfidenceScores(System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ConfidenceScore})">
            <summary>
            Aggregates confidence scores.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AggregateWeightedAverage(System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ConfidenceScore})">
            <summary>
            Calculates weighted average.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.CalculateMedian(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates median.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.CreateConfidenceContext(System.Double,System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ConfidenceScore},SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates a confidence context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AnalyzeUncertaintyFactors(System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ConfidenceScore},Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Analyzes uncertainty factors.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.AnalyzeUncertaintyReasons(System.Collections.Generic.List{SemanticKernel.Graph.Nodes.ConfidenceScore},System.Double)">
            <summary>
            Analyzes uncertainty reasons.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.CalculateVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates variance.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.DeterminePriority(System.Double)">
            <summary>
            Determines interaction priority based on confidence.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.CreateConfidenceMessage(SemanticKernel.Graph.Nodes.ConfidenceAnalysis)">
            <summary>
            Creates the confidence message for the user.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.CreateConfidenceApprovalOptions">
            <summary>
            Creates approval options for the confidence gate.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.UpdateGateStatistics(System.Boolean)">
            <summary>
            Updates gate statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceGateGraphNode.GetGateStatistics">
            <summary>
            Gets gate statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ConfidenceSource">
            <summary>
            Configurable confidence source.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceSource.SourceName">
            <summary>
            Source name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceSource.Weight">
            <summary>
            Source weight in aggregation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ConfidenceSource.ExtractConfidenceAsync(Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Extracts a confidence score.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="graphState">Graph state</param>
            <returns>Confidence score</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ConfidenceScore">
            <summary>
            Confidence score from a specific source.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceScore.SourceName">
            <summary>
            Source name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceScore.Score">
            <summary>
            Confidence score (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceScore.Weight">
            <summary>
            Weight in aggregation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceScore.Timestamp">
            <summary>
            Collection timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceScore.Metadata">
            <summary>
            Additional metadata.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ConfidenceAnalysis">
            <summary>
            Complete confidence analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceAnalysis.AnalysisId">
            <summary>
            Analysis identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceAnalysis.NodeId">
            <summary>
            Identifier of the node that performed the analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceAnalysis.AnalysisTimestamp">
            <summary>
            Analysis timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceAnalysis.ConfidenceScores">
            <summary>
            Collected confidence scores.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceAnalysis.AggregatedConfidence">
            <summary>
            Final aggregated confidence.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceAnalysis.ConfidenceContext">
            <summary>
            Confidence context.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceAnalysis.UncertaintyFactors">
            <summary>
            Identified uncertainty factors.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ConfidenceAggregationStrategy">
            <summary>
            Confidence aggregation strategies.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ConfidenceAggregationStrategy.Average">
            <summary>
            Simple average.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ConfidenceAggregationStrategy.WeightedAverage">
            <summary>
            Weighted average.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ConfidenceAggregationStrategy.Minimum">
            <summary>
            Minimum value (most conservative).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ConfidenceAggregationStrategy.Maximum">
            <summary>
            Maximum value (most optimistic).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ConfidenceAggregationStrategy.Median">
            <summary>
            Median.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ConfidenceGateMode">
            <summary>
            Operating modes for the confidence gate.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ConfidenceGateMode.Strict">
            <summary>
            Strict mode — always blocks when below the threshold.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ConfidenceGateMode.Adaptive">
            <summary>
            Adaptive mode — adjusts threshold based on history.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ConfidenceGateMode.Permissive">
            <summary>
            Permissive mode — only blocks in extreme cases.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics">
            <summary>
            Confidence gate statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.TotalAnalyses">
            <summary>
            Total number of analyses performed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.GatePassed">
            <summary>
            Number of times the gate passed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.GateBlocked">
            <summary>
            Number of times the gate blocked.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.HumanOverrides">
            <summary>
            Número de overrides humanos.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.PassRate">
            <summary>
            Gate pass rate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.BlockRate">
            <summary>
            Gate block rate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.OverrideRate">
            <summary>
            Human override rate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.LastAnalysisAt">
            <summary>
            Timestamp of the last analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.LastGateResult">
            <summary>
            Result of the last analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.ConfidenceThreshold">
            <summary>
            Configured confidence threshold.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ConfidenceGateStatistics.AggregationStrategy">
            <summary>
            Aggregation strategy.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode">
            <summary>
            Specialized node for handling errors during graph execution.
            Provides error categorization, recovery actions, and routing based on error types.
            </summary>
            <remarks>
            Capabilities:
            - Categorization: maps exceptions to <see cref="T:SemanticKernel.Graph.Core.GraphErrorType"/>
            - Recovery: Retry, Skip, Fallback, Rollback, Halt, Escalate, Continue
            - Routing: conditional edges based on recovery outcome or metadata
            - Telemetry: uses <see cref="T:SemanticKernel.Graph.Integration.IGraphLogger"/> helpers for structured logs
            
            Metadata keys (optional):
            - "ExecutionCount", "SuccessCount", "FailureCount": counters (int)
            - "ErrorsHandled": per-type counters (ConcurrentDictionary)
            - "LastExecutionTime", "LastError", "LastErrorTime": diagnostics
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.#ctor(System.String,System.String,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ErrorHandlerGraphNode.
            </summary>
            <param name="nodeId">Unique identifier for this node</param>
            <param name="name">Human-readable name for this node</param>
            <param name="description">Description of what this error handler does</param>
            <param name="logger">Optional logger for error tracking</param>
            <exception cref="T:System.ArgumentException">Thrown when nodeId or name are null or empty</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ErrorStatistics">
            <summary>
            Gets the current error handling statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ConfigureErrorHandler(SemanticKernel.Graph.Core.GraphErrorType,SemanticKernel.Graph.Core.ErrorRecoveryAction,SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Configures how a specific error type should be handled.
            </summary>
            <param name="errorType">Type of error to configure</param>
            <param name="recoveryAction">Action to take for this error type</param>
            <param name="fallbackNode">Optional fallback node for this error type</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameters are invalid</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ConfigureErrorHandlers(System.Collections.Generic.Dictionary{SemanticKernel.Graph.Core.GraphErrorType,SemanticKernel.Graph.Core.ErrorRecoveryAction})">
            <summary>
            Configures multiple error handlers at once.
            </summary>
            <param name="handlers">Dictionary of error types to recovery actions</param>
            <exception cref="T:System.ArgumentNullException">Thrown when handlers dictionary is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.AddFallbackNode(SemanticKernel.Graph.Core.GraphErrorType,SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a fallback node for a specific error type.
            </summary>
            <param name="errorType">Error type that triggers this fallback</param>
            <param name="fallbackNode">Node to execute as fallback</param>
            <exception cref="T:System.ArgumentNullException">Thrown when fallbackNode is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <inheritdoc />
            <summary>Analyzes error context and performs a configured recovery strategy.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments containing error context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result with recovery outcome in metadata.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.AddEdge(SemanticKernel.Graph.Core.IGraphNode,System.Func{Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Adds a conditional edge from this error handler to another node.
            </summary>
            <param name="targetNode">Target node for the edge</param>
            <param name="condition">Condition function for the edge</param>
            <param name="edgeName">Optional name for the edge</param>
            <exception cref="T:System.ArgumentNullException">Thrown when targetNode or condition are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.AddEdgeForRecoveryAction(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.ErrorRecoveryAction,System.String)">
            <summary>
            Adds a conditional edge based on recovery action result.
            </summary>
            <param name="targetNode">Target node for the edge</param>
            <param name="requiredAction">Recovery action that should have been taken</param>
            <param name="edgeName">Optional name for the edge</param>
            <exception cref="T:System.ArgumentNullException">Thrown when targetNode is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.InitializeMetadata">
            <summary>
            Initializes node metadata with default values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ConfigureDefaultErrorHandlers">
            <summary>
            Configures default error handling strategies.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ExtractErrorContext(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Extracts error context from kernel arguments.
            </summary>
            <param name="arguments">Kernel arguments containing error information</param>
            <returns>Error handling context</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.CategorizeError(System.Exception)">
            <summary>
            Categorizes an exception into a specific error type.
            </summary>
            <param name="exception">Exception to categorize</param>
            <returns>Categorized error type</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.DetermineRecoveryAction(SemanticKernel.Graph.Core.ErrorHandlingContext)">
            <summary>
            Determines the recovery action for a given error context.
            </summary>
            <param name="context">Error context</param>
            <returns>Recommended recovery action</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ExecuteRecoveryAction(SemanticKernel.Graph.Core.ErrorRecoveryAction,SemanticKernel.Graph.Core.ErrorHandlingContext,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the determined recovery action.
            </summary>
            <param name="action">Recovery action to execute</param>
            <param name="context">Error context</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Kernel arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Recovery execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.CalculateRetryDelay(System.Int32)">
            <summary>
            Calculates appropriate retry delay based on attempt number.
            </summary>
            <param name="attemptNumber">Current attempt number</param>
            <returns>Delay before next retry</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ExecuteRollback(Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes rollback logic to restore previous state.
            </summary>
            <param name="arguments">Kernel arguments</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.ExecuteEscalation(SemanticKernel.Graph.Core.ErrorHandlingContext,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes escalation logic for human intervention.
            </summary>
            <param name="context">Error context</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Kernel arguments</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.CreateErrorHandlingResult(Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Core.ErrorHandlingContext,SemanticKernel.Graph.Core.ErrorRecoveryAction,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the function result for successful error handling.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="context">Error context</param>
            <param name="action">Recovery action taken</param>
            <param name="recoveryResult">Result of recovery execution</param>
            <returns>Function result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.CreateFailedErrorHandlingResult(Microsoft.SemanticKernel.Kernel,System.Exception)">
            <summary>
            Creates the function result for failed error handling.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="exception">Exception that occurred in error handler</param>
            <returns>Function result indicating failure</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.GetErrorStatistics">
            <summary>
            Gets current error handling statistics.
            </summary>
            <returns>Dictionary of error types to count</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.IncrementErrorStatistics(SemanticKernel.Graph.Core.GraphErrorType)">
            <summary>
            Increments error statistics for a specific error type.
            </summary>
            <param name="errorType">Error type to increment</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode.UpdateExecutionMetadata(System.Boolean,System.Exception)">
            <summary>
            Updates execution metadata after node execution.
            </summary>
            <param name="success">Whether execution was successful</param>
            <param name="exception">Exception if execution failed</param>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.FederatedGraphNode">
            <summary>
            Node that federates execution to an external graph engine via REST.
            Sends the current state to a remote graph service, waits for completion,
            and merges the returned state snapshot and textual result back into the
            local execution context.
            </summary>
            <remarks>
            Behavior:
            - Sends current <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> to remote `api/graph/execute` with target graph name
            - Awaits completion; merges returned state snapshot into local arguments
            - Emits the remote textual result as the function value; stores identifiers in arguments
            
            Considerations:
            - Network errors surface as exceptions; callers may use <see cref="T:SemanticKernel.Graph.Nodes.ErrorHandlerGraphNode"/>
            - Cancellation is honored via linked token
            - Hosts should configure <see cref="T:System.Net.Http.HttpClient"/> timeouts/retries as appropriate
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.#ctor(System.String,System.String,System.Net.Http.HttpClient,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SemanticKernel.Graph.Nodes.FederatedGraphNode"/> class.
            </summary>
            <param name="remoteGraphName">The name of the remote graph to execute.</param>
            <param name="baseAddress">The absolute base address of the remote graph service.</param>
            <param name="httpClient">Optional HTTP client to use. If not provided, a new client is created with the specified base address.</param>
            <param name="nodeId">Optional explicit node identifier. If not provided, a random identifier is generated.</param>
            <param name="name">Optional display name for the node.</param>
            <param name="description">Optional description for the node.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FederatedGraphNode.NodeId">
            <summary>
            Gets the unique node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FederatedGraphNode.Name">
            <summary>
            Gets the display name of the node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FederatedGraphNode.Description">
            <summary>
            Gets the textual description of the node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FederatedGraphNode.Metadata">
            <summary>
            Gets arbitrary metadata associated with the node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FederatedGraphNode.IsExecutable">
            <summary>
            Gets a value indicating whether the node is executable.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FederatedGraphNode.InputParameters">
            <summary>
            Gets the logical input parameter names expected by this node. Federated execution requires no specific inputs.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FederatedGraphNode.OutputParameters">
            <summary>
            Gets the logical output parameter names produced by this node. May include a <c>remote_result</c> string.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the remote graph by posting the current arguments to the remote service, then merges the returned state snapshot.
            </summary>
            <param name="kernel">The Semantic Kernel instance.</param>
            <param name="arguments">The current execution arguments/state.</param>
            <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.FunctionResult"/> containing the remote textual result.</returns>
            <inheritdoc />
            <summary>Calls the remote graph API and merges the returned state into current arguments.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Current execution arguments.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result with remote textual outcome; remote identifiers stored in arguments.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">Thrown when the remote request fails.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the response cannot be parsed.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Validates whether execution can proceed with the provided arguments.
            </summary>
            <param name="arguments">The current execution arguments.</param>
            <returns>An empty validation result if valid.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Returns the next nodes to execute after this node. Federated nodes do not chain automatically.
            </summary>
            <param name="executionResult">The execution result of this node, if any.</param>
            <param name="graphState">The current graph state.</param>
            <returns>An empty sequence.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Indicates whether the node should execute. Federated nodes always execute when invoked.
            </summary>
            <param name="graphState">The current graph state.</param>
            <returns><see langword="true"/> always.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Hook executed before the node runs. No-op for federated nodes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Hook executed after the node runs. No-op for federated nodes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Hook executed if the node fails. No-op for federated nodes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FederatedGraphNode.ConvertJsonElement(System.Text.Json.JsonElement)">
            <summary>
            Converts a <see cref="T:System.Text.Json.JsonElement"/> to a best-fit .NET primitive type when possible.
            For objects and arrays, returns the original <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="element">The JSON element to convert.</param>
            <returns>A primitive .NET value, or the original element.</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode">
            <summary>
            Graph node that implements foreach loop logic for processing lists/collections.
            Iterates over a collection and executes nodes for each item.
            Provides comprehensive collection processing, monitoring, and safety features.
            </summary>
            <remarks>
            This node provides:
            - Collection iteration: Process each item in a list/collection
            - Dynamic collection access: Support for various collection types
            - Item context: Each iteration has access to current item and index
            - Maximum iteration limit: Prevents infinite loops on large collections
            - Break/continue support: Control flow within loops
            - Performance monitoring: Detailed metrics and timing
            - Safety features: Automatic infinite loop detection
            - Thread safety: All operations are thread-safe for concurrent execution
            - State management: Proper state handling during iterations
            
            Metadata keys (optional):
            - "ExecutionCount": number of loop executions (int)
            - "CurrentIteration": current iteration index (int)
            - "LastIterationCount": last total iterations (int)
            - "LastExecutionDuration": last loop duration (TimeSpan)
            - "AverageExecutionTime": running average duration (TimeSpan)
            - "LastExecutionError": last error message (string)
            - "MaxIterations": configured iteration limit (int)
            - "ItemVariableName" / "IndexVariableName": configured variable names
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.#ctor(System.Func{SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IEnumerable{System.Object}},System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of ForeachLoopGraphNode with a collection accessor function.
            </summary>
            <param name="collectionAccessor">Function that retrieves the collection to iterate over</param>
            <param name="itemVariableName">Name of the variable to store the current item (default: "item")</param>
            <param name="indexVariableName">Name of the variable to store the current index (default: "index")</param>
            <param name="maxIterations">Maximum number of iterations to prevent infinite loops (default: 10000)</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional description of what this loop does</param>
            <exception cref="T:System.ArgumentNullException">Thrown when collectionAccessor is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when maxIterations is less than 1</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of ForeachLoopGraphNode with a template-based collection accessor.
            </summary>
            <param name="collectionTemplate">Handlebars template that evaluates to a collection</param>
            <param name="itemVariableName">Name of the variable to store the current item (default: "item")</param>
            <param name="indexVariableName">Name of the variable to store the current index (default: "index")</param>
            <param name="maxIterations">Maximum number of iterations to prevent infinite loops (default: 10000)</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional description of what this loop does</param>
            <exception cref="T:System.ArgumentException">Thrown when collectionTemplate is null or whitespace, or maxIterations is less than 1</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.NodeId">
            <summary>
            Gets the unique identifier for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.Name">
            <summary>
            Gets the human-readable name of this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.Description">
            <summary>
            Gets the description of what this node does.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.Metadata">
            <summary>
            Gets the metadata associated with this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.IsExecutable">
            <summary>
            Indicates whether this node can be executed (always true for foreach loop nodes).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.InputParameters">
            <summary>
            Gets the list of input parameter names this node expects.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.OutputParameters">
            <summary>
            Gets the list of output parameter names this node produces.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.CollectionAccessor">
            <summary>
            Gets the collection accessor function for this loop.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.CollectionTemplate">
            <summary>
            Gets the collection template (if provided).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.ItemVariableName">
            <summary>
            Gets the name of the variable to store the current item.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.IndexVariableName">
            <summary>
            Gets the name of the variable to store the current index.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.MaxIterations">
            <summary>
            Gets the maximum number of iterations allowed for this loop.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.LoopNodes">
            <summary>
            Gets the nodes to execute in each iteration of the loop.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.AddLoopNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to be executed in each iteration of the loop.
            </summary>
            <param name="node">Node to add to the loop</param>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when node is already added</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.RemoveLoopNode(System.String)">
            <summary>
            Removes a node from the loop.
            </summary>
            <param name="nodeId">ID of the node to remove</param>
            <returns>True if the node was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes this foreach loop node by iterating over the collection and executing loop nodes for each item.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments containing the graph state</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result indicating the loop execution outcome</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown on invalid collection evaluation or infinite loop condition.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Validates that this node can execute with the provided arguments.
            </summary>
            <param name="arguments">Arguments to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets the next possible nodes to execute after this one.
            For foreach loops, this returns an empty collection as the loop handles its own flow.
            </summary>
            <param name="executionResult">Result of executing this node</param>
            <param name="graphState">Current graph state</param>
            <returns>Empty collection as loops handle their own flow</returns>
            <remarks>
            Foreach loops control their own iteration and do not yield successor nodes via this method.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Determines if this node should be executed based on the current state.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>Always true for foreach loop nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Called before the node is executed.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after the node has been executed successfully.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="result">Execution result.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the node execution fails.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="exception">Exception that occurred.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.InitializeMetadata">
            <summary>
            Initializes metadata for this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.RecordLoopMetrics(System.Int32,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Records loop execution metrics.
            </summary>
            <param name="iterations">Number of iterations completed</param>
            <param name="executionTime">Total execution time</param>
            <param name="breakRequested">Whether break was requested</param>
            <param name="continueRequested">Whether continue was requested</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.RecordLoopError(System.Exception)">
            <summary>
            Records loop execution error.
            </summary>
            <param name="exception">Exception that occurred</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.RecordNodeExecutionError(System.String,System.Exception)">
            <summary>
            Records node execution error.
            </summary>
            <param name="nodeId">ID of the node that failed</param>
            <param name="exception">Exception that occurred</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.RecordInfiniteLoopDetection(System.Int32)">
            <summary>
            Records infinite loop detection.
            </summary>
            <param name="iterations">Number of iterations reached</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ForeachLoopGraphNode.EvaluateCollectionTemplate(System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Evaluates a collection template using the advanced expression evaluator.
            </summary>
            <param name="template">Template to evaluate</param>
            <param name="state">Graph state to use as context</param>
            <returns>Collection result of template evaluation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.FunctionGraphNode">
            <summary>
            Graph node implementation that encapsulates a Semantic Kernel function.
            Provides graph-specific functionality around existing ISKFunction instances.
            </summary>
            <remarks>
            This node forwards execution to an underlying <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> and
            augments it with graph-aware behavior:
            <para>
            • Navigation: you can connect unconditional successors via <see cref="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.ConnectTo(SemanticKernel.Graph.Core.IGraphNode)"/>
              and conditional transitions via <see cref="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.AddConditionalEdge(SemanticKernel.Graph.Core.ConditionalEdge)"/>.
            </para>
            <para>
            • Metadata hooks (optional):
              - <c>"StoreResultAs"</c> (string): stores the last result into <see cref="T:SemanticKernel.Graph.State.GraphState"/> under the given key.
              - <c>"BeforeExecute"</c> (Action/Func): custom setup logic executed in <see cref="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)"/>.
              - <c>"AfterExecute"</c> (Action/Func): custom cleanup logic executed in <see cref="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)"/>.
              - <c>"OnExecutionFailed"</c> (Action/Func): error handling hook executed in <see cref="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)"/>.
              - <c>"StrictValidation"</c> (bool): if true, pre-execution validation failures cause an exception.
            </para>
            Thread-safety: connection lists are guarded by a private lock for mutation.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.#ctor(Microsoft.SemanticKernel.KernelFunction,System.String,System.String)">
            <summary>
            Initializes a new instance of FunctionGraphNode.
            </summary>
            <param name="function">Semantic Kernel function to encapsulate</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="description">Optional custom description</param>
            <exception cref="T:System.ArgumentNullException">Thrown when function is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.StoreResultAs(System.String)">
            <summary>
            Configures this node to store its execution result into the graph state under the given key.
            </summary>
            <param name="stateKey">Graph state key to store the result as</param>
            <returns>This node for fluent chaining</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="stateKey"/> is null or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.FromPlugin(Microsoft.SemanticKernel.Kernel,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a FunctionGraphNode from a kernel plugin function.
            </summary>
            <param name="kernel">Kernel containing the plugin</param>
            <param name="pluginName">Name of the plugin</param>
            <param name="functionName">Name of the function</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="description">Optional custom description</param>
            <returns>New FunctionGraphNode instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when kernel is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when plugin or function names are invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the function is not found</exception>
            <remarks>
            Example:
            <code><![CDATA[
            var node = FunctionGraphNode.FromPlugin(kernel, "math", "add").StoreResultAs("sum");
            ]]></code>
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.NodeId">
            <summary>
            Gets the unique identifier for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.Name">
            <summary>
            Gets the human-readable name of this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.Description">
            <summary>
            Gets the description of what this node does.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.Metadata">
            <summary>
            Gets the metadata associated with this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.IsExecutable">
            <summary>
            Indicates whether this node can be executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.InputParameters">
            <summary>
            Gets the list of input parameter names this node expects.
            </summary>
            <remarks>
            Derived from <see cref="P:Microsoft.SemanticKernel.KernelFunctionMetadata.Parameters"/>. Used for wiring and validation hints.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.OutputParameters">
            <summary>
            Gets the list of output parameter names this node produces.
            </summary>
            <remarks>
            Always exposes a single output name: <c>"result"</c>.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.Function">
            <summary>
            Gets the underlying Semantic Kernel function.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.PluginName">
            <summary>
            Gets the plugin name (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.ExecutionCount">
            <summary>
            Gets the number of times this node has been executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.LastExecutedAt">
            <summary>
            Gets the timestamp of the last execution (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.FunctionGraphNode.AverageExecutionTime">
            <summary>
            Gets the average execution time for this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes this node with the provided kernel and arguments.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments containing the graph state</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of the node execution</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when kernel or arguments are null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the node cannot be executed</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Validates that this node can execute with the provided arguments.
            </summary>
            <param name="arguments">Arguments to validate</param>
            <returns>Validation result indicating if execution is possible</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when arguments are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets the next possible nodes to execute after this one.
            </summary>
            <param name="executionResult">Result of executing this node</param>
            <param name="graphState">Current graph state</param>
            <returns>Collection of possible next nodes</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when graphState is null</exception>
            <remarks>
            Evaluates conditional edges first; if none match, returns unconditional successors registered via
            <see cref="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.ConnectTo(SemanticKernel.Graph.Core.IGraphNode)"/>.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Determines if this node should be executed based on the current state.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>True if the node should execute</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when graphState is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Called before the node is executed.
            Allows for setup and validation.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the setup operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after the node has been executed successfully.
            Allows for cleanup and post-processing.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments</param>
            <param name="result">Execution result</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the cleanup operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the node execution fails.
            Allows for error handling and recovery.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments</param>
            <param name="exception">Exception that occurred</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the error handling operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.ConnectTo(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds an unconditional connection to another node.
            </summary>
            <param name="targetNode">Node to connect to</param>
            <exception cref="T:System.ArgumentNullException">Thrown when targetNode is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.AddConditionalEdge(SemanticKernel.Graph.Core.ConditionalEdge)">
            <summary>
            Adds a conditional connection to another node.
            </summary>
            <param name="edge">Conditional edge to add</param>
            <exception cref="T:System.ArgumentNullException">Thrown when edge is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when edge source doesn't match this node</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.DisconnectFrom(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Removes a connection to another node.
            </summary>
            <param name="targetNode">Node to disconnect from</param>
            <returns>True if the connection was removed</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when targetNode is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.GetOutgoingEdges">
            <summary>
            Gets all outgoing edges from this node.
            </summary>
            <returns>Read-only collection of outgoing edges</returns>
            <remarks>
            Returns a snapshot copy to preserve thread-safety of internal collections.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.SetMetadata(System.String,System.Object)">
            <summary>
            Sets custom metadata for this node.
            </summary>
            <param name="key">Metadata key</param>
            <param name="value">Metadata value</param>
            <exception cref="T:System.ArgumentException">Thrown when key is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.GetMetadata``1(System.String)">
            <summary>
            Gets custom metadata from this node.
            </summary>
            <typeparam name="T">Expected metadata type</typeparam>
            <param name="key">Metadata key</param>
            <returns>Metadata value or default if not found</returns>
            <exception cref="T:System.ArgumentException">Thrown when key is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.InitializeMetadata">
            <summary>
            Initializes default metadata for this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.UpdateExecutionStatistics(System.DateTimeOffset)">
            <summary>
            Updates execution statistics after a successful execution.
            </summary>
            <param name="startTime">Execution start time</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.ToString">
            <summary>
            Returns a string representation of this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.Equals(System.Object)">
            <summary>
            Checks if this node is equal to another object.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.FunctionGraphNode.GetHashCode">
            <summary>
            Gets the hash code for this node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode">
             <summary>
             Graph node that implements a human-approval interruption.
             Pauses graph execution and waits for human approval before continuing.
             </summary>
             <remarks>
             This node provides comprehensive Human-in-the-Loop capabilities:
             - Conditional interruption: Pause based on configurable activation conditions
             - Multiple channels: Console, Web API, CLI, Email, Webhook
             - Configurable timeouts: Automatic fallback actions when no response is received
             - Batch approval: Group multiple approval requests
             - Context awareness: Supplies rich context for human decision-making
             - Authentication: Supports authenticated users and permissions
             - Metrics: Full tracking of interactions and performance
            
             Metadata keys (optional):
             - "ExecutionCount": number of executions (int)
             - "LastExecutionStarted" / "LastExecutionCompleted": timestamps (DateTimeOffset)
             - "LastApprovalResult": last boolean decision (bool)
             - "ApprovalCount" / "RejectionCount" / "TimeoutCount": counters (int)
             - "HasActivationCondition": whether an activation condition is configured (bool)
             </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.#ctor(System.String,System.String,SemanticKernel.Graph.Core.IHumanInteractionChannel,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode"/>.
            </summary>
            <param name="approvalTitle">Approval request title.</param>
            <param name="approvalMessage">Detailed message presented to the user.</param>
            <param name="interactionChannel">User interaction channel.</param>
            <param name="nodeId">Optional node identifier.</param>
            <param name="logger">Optional logger.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.CreateConditional(System.String,System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},SemanticKernel.Graph.Core.IHumanInteractionChannel,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Creates an approval node with an activation condition.
            </summary>
            <param name="approvalTitle">Approval title.</param>
            <param name="approvalMessage">Message shown to the user.</param>
            <param name="activationCondition">Condition that enables the approval request.</param>
            <param name="interactionChannel">Communication channel.</param>
            <param name="nodeId">Optional node identifier.</param>
            <param name="logger">Optional logger.</param>
            <returns>A configured approval node with activation condition.</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ApprovalTitle">
            <summary>
            Approval request title.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ApprovalMessage">
            <summary>
            Detailed message presented to the user.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.InterruptionType">
            <summary>
            Type of interruption.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.Priority">
            <summary>
            Approval request priority.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ActivationCondition">
            <summary>
            Activation condition (optional) to trigger the approval request.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.TimeoutConfiguration">
            <summary>
            Timeout configuration for the approval request.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ApprovalOptions">
            <summary>
            Available options the user can choose from.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.InteractionChannel">
            <summary>
            Communication channel used to reach the user.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.AllowStateModifications">
            <summary>
            Whether user-approved state modifications are allowed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.LastApprovalContext">
            <summary>
            Most recent approval context.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.Statistics">
            <summary>
            Aggregated approval statistics for this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the human approval flow, optionally pausing execution until a response is received.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments containing the graph state.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result encoding the approval decision and related metadata.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Resolves the next nodes based on the approval result embedded in <paramref name="executionResult"/>.
            </summary>
            <param name="executionResult">Result of executing this node.</param>
            <param name="graphState">Current graph state.</param>
            <returns>Collection of next nodes honoring approval/rejection paths.</returns>
            <remarks>
            When the approval result cannot be parsed, falls back to returning all configured next nodes.
            Nodes marked with metadata key "rejection_only" are returned only on rejection.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Determines if this node should be executed based on the current state and optional activation condition.
            </summary>
            <param name="graphState">Current graph state.</param>
            <returns>True when no activation condition is provided or when it evaluates to true.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Called before the node is executed.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after the node has been executed successfully.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="result">Execution result.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the node execution fails.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="exception">Exception that occurred.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.AddApprovalOption(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Adds an approval option the user can choose from.
            </summary>
            <param name="optionId">Option identifier.</param>
            <param name="displayText">Display text for the option.</param>
            <param name="value">Value to return when selected.</param>
            <param name="isDefault">Whether this option is the default.</param>
            <returns>This node for method chaining.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.WithTimeout(System.TimeSpan,SemanticKernel.Graph.Core.TimeoutAction)">
            <summary>
            Configures the approval timeout behavior.
            </summary>
            <param name="primaryTimeout">Primary timeout.</param>
            <param name="defaultAction">Default action on timeout.</param>
            <returns>This node for method chaining.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.WithPriority(SemanticKernel.Graph.Core.InteractionPriority)">
            <summary>
            Sets the approval request priority.
            </summary>
            <param name="priority">Priority.</param>
            <returns>This node for method chaining.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.AllowStateModification(System.Boolean)">
            <summary>
            Enables state modifications to be applied from the user response.
            </summary>
            <param name="allow">Whether modifications are allowed.</param>
            <returns>This node for method chaining.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.OnRejection(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to be executed when approval is rejected.
            </summary>
            <param name="rejectionNode">Node for rejection path.</param>
            <returns>This node for method chaining.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.InitializeMetadata">
            <summary>
            Initializes node metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.CreateApprovalContext(SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Creates the approval context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.CreateInterruptionRequest(SemanticKernel.Graph.Core.HumanApprovalContext,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates the interruption request sent to the user.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.AddDefaultApprovalOptions">
            <summary>
            Adds default approval options (Approve / Reject).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ProcessApprovalResponse(SemanticKernel.Graph.Core.HumanInterruptionResponse,SemanticKernel.Graph.State.GraphState,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Processes the approval response and creates the function result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.HandleApprovalError(System.Exception,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Handles errors during the approval process by applying the default action.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.CreateStateContext(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates a compact state context to be sent with the approval request.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ExtractPerformanceMetrics(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Extracts basic performance metrics from the current state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.ExtractRelevantLogs(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Extracts a small set of relevant log lines from the recent execution steps.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.UpdateApprovalStatistics(System.Boolean)">
            <summary>
            Updates approval statistics based on the last decision.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.HumanApprovalGraphNode.GetApprovalStatistics">
            <summary>
            Gets current approval statistics snapshot.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ApprovalStatistics">
            <summary>
            Approval statistics for a node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.TotalExecutions">
            <summary>
            Total number of node executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.TotalApprovals">
            <summary>
            Total number of approvals.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.TotalRejections">
            <summary>
            Total number of rejections.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.TotalTimeouts">
            <summary>
            Total number of timeouts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.ApprovalRate">
            <summary>
            Approval rate (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.RejectionRate">
            <summary>
            Rejection rate (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.TimeoutRate">
            <summary>
            Timeout rate (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.LastExecutionAt">
            <summary>
            Timestamp of the last execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ApprovalStatistics.LastApprovalResult">
            <summary>
            Result of the last approval, when available.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ObservationGraphNode">
            <summary>
            Graph node that implements observation and analysis capabilities for the ReAct pattern.
            Analyzes action results, extracts insights, and determines if goals have been achieved.
            </summary>
            <remarks>
            The ObservationGraphNode analyzes the results of executed actions, evaluates their success,
            extracts relevant information, and determines the next steps in the reasoning cycle.
            
            Key features:
            - Result analysis: Deep analysis of action execution results
            - Goal evaluation: Determines if objectives have been met
            - Information extraction: Extracts key insights and data from results
            - Quality assessment: Evaluates the quality and relevance of results
            - Context update: Updates context for next reasoning iteration
            - Decision making: Determines whether to continue or conclude the ReAct loop
            
            Metadata keys (optional):
            - "ExecutionCount", "FailureCount", "GoalAchievedCount": aggregate counters (int)
            - "AverageExecutionTime", "GoalAchievementRate", "AverageSuccessAssessment", "LastExecutedAt": metrics
            - "Domain", "DeepAnalysisEnabled", "GoalAchievementThreshold": configuration
            - "ExtractionPatterns", "ResultTypePatterns", "GoalCriteria": behavior customization
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.#ctor(System.String,System.String,System.String,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ObservationGraphNode.
            </summary>
            <param name="observationPrompt">Base prompt template for observation analysis</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional custom description</param>
            <param name="templateEngine">Optional template engine for prompt processing</param>
            <param name="logger">Optional logger for tracking observation activities</param>
            <exception cref="T:System.ArgumentException">Thrown when observationPrompt is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.CreateForDomain(SemanticKernel.Graph.Nodes.ObservationDomain,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Creates an ObservationGraphNode with domain-specific configuration.
            </summary>
            <param name="domain">Domain type for specialized observation</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="templateEngine">Optional template engine</param>
            <param name="logger">Optional logger</param>
            <returns>Configured ObservationGraphNode for the specified domain</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.ObservationPrompt">
            <summary>
            Gets the base observation prompt template.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.Statistics">
            <summary>
            Gets the current observation statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.Domain">
            <summary>
            Gets the configured observation domain.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.DeepAnalysisEnabled">
            <summary>
            Gets whether deep analysis is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationGraphNode.GoalAchievementThreshold">
            <summary>
            Gets the goal achievement threshold.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ConfigureObservation(SemanticKernel.Graph.Nodes.ObservationDomain,System.Boolean,System.Double,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Configures the observation parameters.
            </summary>
            <param name="domain">Observation domain specialization</param>
            <param name="enableDeepAnalysis">Whether to enable detailed analysis</param>
            <param name="goalAchievementThreshold">Threshold for determining goal achievement (0.0-1.0)</param>
            <param name="extractionPatterns">Patterns for information extraction</param>
            <param name="qualityMetrics">Metrics for assessing result quality</param>
            <returns>This instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.AddResultTypePattern(System.String,System.String)">
            <summary>
            Adds a custom observation pattern for specific result types.
            </summary>
            <param name="resultType">Type of result this pattern applies to</param>
            <param name="analysisPrompt">Specialized analysis prompt for this result type</param>
            <returns>This instance for method chaining</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameters are null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.AddGoalCriterion(System.String,System.Func{System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean})">
            <summary>
            Adds a goal evaluation criterion.
            </summary>
            <param name="criterionName">Name of the criterion</param>
            <param name="evaluationFunction">Function to evaluate this criterion</param>
            <returns>This instance for method chaining</returns>
            <exception cref="T:System.ArgumentException">Thrown when criterionName is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when evaluationFunction is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.AddNextNode(SemanticKernel.Graph.Core.IGraphNode,System.Func{Microsoft.SemanticKernel.KernelArguments,System.Boolean})">
            <summary>
            Adds a next node with conditional routing based on observation results.
            </summary>
            <param name="nextNode">Node to add</param>
            <param name="condition">Condition for routing to this node</param>
            <exception cref="T:System.ArgumentNullException">Thrown when nextNode is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.AddGoalBasedRouting(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds routing based on goal achievement status.
            </summary>
            <param name="goalAchievedNode">Node to route to when goal is achieved</param>
            <param name="continueReasoningNode">Node to route to when goal is not achieved</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes observation analysis over the provided action result, extracting insights and assessing goal status.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments containing the action result and context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result encoding observation summary and metadata.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when observation execution fails.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called before the node is executed.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called after the node has been executed successfully.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="result">Execution result.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called when the node execution fails.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="exception">Exception that occurred.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.InitializeMetadata">
            <summary>
            Initializes node metadata with default values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.GetDomainConfiguration(SemanticKernel.Graph.Nodes.ObservationDomain)">
            <summary>
            Gets domain-specific configuration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.PrepareObservationContext(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Prepares the observation context from kernel arguments.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.SelectObservationPrompt(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Selects the appropriate observation prompt based on context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.GenerateObservationPromptAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Generates the final observation prompt using the template engine.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ExecuteObservationAsync(Microsoft.SemanticKernel.Kernel,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the observation analysis via LLM.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ParseObservationResult(System.String)">
            <summary>
            Parses and validates the observation result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.EvaluateGoalAchievement(SemanticKernel.Graph.Nodes.ObservationResult,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluates whether the goal has been achieved based on observation results.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ExtractInformation(SemanticKernel.Graph.Nodes.ObservationResult,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Extracts structured information from the observation result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.EstimateSuccessFromText(System.String)">
            <summary>
            Estimates success assessment from plain text.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ExtractInformationFromText(System.String)">
            <summary>
            Extracts information from plain text using simple heuristics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.ExtractRecommendationFromText(System.String)">
            <summary>
            Extracts recommendation from plain text.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.EstimateConfidenceFromText(System.String)">
            <summary>
            Estimates confidence from text content.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.CreateExecutionResult(SemanticKernel.Graph.Nodes.ObservationResult,SemanticKernel.Graph.Nodes.GoalEvaluation,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Creates the final execution result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.UpdateStatistics(System.TimeSpan,System.Boolean)">
            <summary>
            Updates execution statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ObservationGraphNode.GetObservationStatistics">
            <summary>
            Gets current observation statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ObservationDomain">
            <summary>
            Represents different observation domains for specialized analysis.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ObservationDomain.General">
            <summary>General-purpose observation for any result type.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ObservationDomain.DataAnalysis">
            <summary>Specialized observation for data analysis results.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ObservationDomain.ProblemSolving">
            <summary>Specialized observation for problem-solving results.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ObservationDomain.TaskExecution">
            <summary>Specialized observation for task execution results.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ObservationResult">
            <summary>
            Represents the result of an observation analysis.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationResult.Summary">
            <summary>Summary of the observation.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationResult.SuccessAssessment">
            <summary>Assessment of action success (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationResult.ExtractedInformation">
            <summary>Extracted structured information.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationResult.NextRecommendation">
            <summary>Recommendation for next step.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationResult.ConfidenceScore">
            <summary>Confidence in the observation (0.0 to 1.0).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.JsonObservationResult">
            <summary>
            JSON representation of observation result for structured parsing.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.GoalEvaluation">
            <summary>
            Represents goal achievement evaluation results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.GoalEvaluation.IsAchieved">
            <summary>Whether the goal has been achieved.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.GoalEvaluation.AchievementScore">
            <summary>Goal achievement score (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.GoalEvaluation.Confidence">
            <summary>Confidence in the evaluation.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.GoalEvaluation.CriteriaResults">
            <summary>Results of individual criteria evaluations.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ObservationStatistics">
            <summary>
            Statistics about observation node performance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationStatistics.ExecutionCount">
            <summary>Total number of executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationStatistics.FailureCount">
            <summary>Number of failed executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationStatistics.GoalAchievedCount">
            <summary>Number of times goal was achieved.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationStatistics.AverageExecutionTime">
            <summary>Average execution time.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationStatistics.GoalAchievementRate">
            <summary>Rate of goal achievement (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationStatistics.AverageSuccessAssessment">
            <summary>Average success assessment score.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationStatistics.LastExecutedAt">
            <summary>Timestamp of last execution.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ObservationStatistics.SuccessRate">
            <summary>Success rate (0.0 to 1.0).</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SemanticKernel.Graph.Nodes.PythonGraphNode" -->
        <member name="M:SemanticKernel.Graph.Nodes.PythonGraphNode.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a Python node with the specified command and optional runtime settings.
            </summary>
            <param name="command">Python command to run (used with -c).</param>
            <param name="nodeId">Optional node id.</param>
            <param name="name">Optional display name.</param>
            <param name="description">Optional description.</param>
            <param name="pythonExecutablePath">Optional path to python executable. Defaults to 'python'.</param>
            <param name="workingDirectory">Optional working directory.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="command"/> is null or whitespace.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.PythonGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Runs the configured Python command and returns stdout in the function result.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments. Supports optional "env".</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result with stdout; stderr and exit code are stored in arguments.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReActLoopGraphNode">
            <summary>
            Graph node that orchestrates the complete ReAct (Reasoning + Acting) pattern loop.
            Coordinates reasoning, action execution, and observation in iterative cycles until goal achievement.
            </summary>
            <remarks>
            The ReActLoopGraphNode implements the full ReAct pattern by orchestrating:
            1. **Reasoning**: Analyzes current situation and plans next action
            2. **Acting**: Executes the planned action with available functions
            3. **Observation**: Analyzes action results and evaluates goal achievement
            4. **Loop Control**: Continues until goal is achieved or maximum iterations reached
            
            Key features:
            - Complete ReAct orchestration: Manages the full reasoning-acting-observation cycle
            - Flexible node composition: Can use custom reasoning, action, and observation nodes
            - Iteration limits: Configurable maximum iterations with early termination
            - Goal evaluation: Sophisticated goal achievement detection
            - Performance tracking: Comprehensive metrics and timing information
            - Error handling: Robust error handling with recovery strategies
            - Context management: Maintains and updates context across iterations
            
            Metadata keys (optional):
            - "ExecutionCount", "FailureCount", "SuccessfulCompletions", "TotalIterations": aggregate counters (int)
            - "AverageExecutionTime", "AverageIterationsPerExecution", "SuccessRate", "LastExecutedAt": metrics
            - "MaxIterations", "GoalAchievementThreshold", "EarlyTerminationEnabled", "IterationTimeout", "TotalTimeout", "Domain": configuration
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.#ctor(System.String,System.String,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ReActLoopGraphNode.
            </summary>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional custom description</param>
            <param name="logger">Optional logger for tracking ReAct activities</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.CreateWithNodes(SemanticKernel.Graph.Nodes.ReasoningGraphNode,SemanticKernel.Graph.Nodes.ActionGraphNode,SemanticKernel.Graph.Nodes.ObservationGraphNode,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Creates a ReActLoopGraphNode with pre-configured component nodes.
            </summary>
            <param name="reasoningNode">Node for reasoning phase</param>
            <param name="actionNode">Node for action execution phase</param>
            <param name="observationNode">Node for observation phase</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="logger">Optional logger</param>
            <returns>Configured ReActLoopGraphNode</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.CreateForDomain(SemanticKernel.Graph.Nodes.ReActDomain,Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Nodes.ActionSelectionCriteria,SemanticKernel.Graph.Integration.IGraphTemplateEngine,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Creates a ReActLoopGraphNode with default nodes for a specific domain.
            </summary>
            <param name="domain">Domain for specialized ReAct behavior</param>
            <param name="kernel">Kernel containing available actions</param>
            <param name="actionCriteria">Criteria for selecting available actions</param>
            <param name="templateEngine">Optional template engine</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="logger">Optional logger</param>
            <returns>Configured ReActLoopGraphNode for the domain</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.MaxIterations">
            <summary>
            Gets the maximum number of iterations allowed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.Domain">
            <summary>
            Gets the configured ReAct domain.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.EarlyTerminationEnabled">
            <summary>
            Gets whether early termination is enabled.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.Statistics">
            <summary>
            Gets the current ReAct statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ReasoningNode">
            <summary>
            Gets the reasoning node (if configured).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ActionNode">
            <summary>
            Gets the action node (if configured).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ObservationNode">
            <summary>
            Gets the observation node (if configured).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ConfigureLoop(System.Int32,System.Double,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Configures the ReAct loop parameters.
            </summary>
            <param name="maxIterations">Maximum number of ReAct iterations</param>
            <param name="goalAchievementThreshold">Threshold for goal achievement detection</param>
            <param name="enableEarlyTermination">Whether to terminate early on goal achievement</param>
            <param name="iterationTimeout">Timeout for individual iterations</param>
            <param name="totalTimeout">Timeout for the entire ReAct loop</param>
            <returns>This instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ConfigureNodes(SemanticKernel.Graph.Nodes.ReasoningGraphNode,SemanticKernel.Graph.Nodes.ActionGraphNode,SemanticKernel.Graph.Nodes.ObservationGraphNode)">
            <summary>
            Configures the component nodes for the ReAct pattern.
            </summary>
            <param name="reasoningNode">Node for reasoning phase</param>
            <param name="actionNode">Node for action execution phase</param>
            <param name="observationNode">Node for observation phase</param>
            <returns>This instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any node is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ConfigureForDomain(SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Configures domain-specific behavior.
            </summary>
            <param name="domain">ReAct domain specialization</param>
            <returns>This instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.AddNextNode(SemanticKernel.Graph.Core.IGraphNode,System.Func{Microsoft.SemanticKernel.KernelArguments,System.Boolean})">
            <summary>
            Adds a next node with conditional routing based on ReAct results.
            </summary>
            <param name="nextNode">Node to add</param>
            <param name="condition">Condition for routing to this node</param>
            <exception cref="T:System.ArgumentNullException">Thrown when nextNode is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.AddCompletionRouting(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds routing based on ReAct completion status.
            </summary>
            <param name="successNode">Node to route to on successful goal achievement</param>
            <param name="failureNode">Node to route to on failure or timeout</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the ReAct loop (reasoning → action → observation) until goal achievement or configured limits.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments containing task/context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result with a JSON summary and metrics in metadata.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when required component nodes are not configured.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> or timeouts are triggered.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.InitializeMetadata">
            <summary>
            Initializes node metadata with default values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.MapToReasoningDomain(SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Maps ReAct domain to reasoning domain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.MapToObservationDomain(SemanticKernel.Graph.Nodes.ReActDomain)">
            <summary>
            Maps ReAct domain to observation domain.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.PrepareExecutionContext(Microsoft.SemanticKernel.KernelArguments,System.String)">
            <summary>
            Prepares the execution context for the ReAct loop.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.ExecuteReActLoopAsync(Microsoft.SemanticKernel.Kernel,SemanticKernel.Graph.Nodes.ReActExecutionContext,System.Threading.CancellationToken)">
            <summary>
            Executes the main ReAct loop.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.CreateExecutionResult(SemanticKernel.Graph.Nodes.ReActLoopResult,System.String)">
            <summary>
            Creates the final execution result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.CreateErrorResult(System.Exception,System.String)">
            <summary>
            Creates error result from failed execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.UpdateStatistics(System.TimeSpan,System.Int32,System.Boolean)">
            <summary>
            Updates execution statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReActLoopGraphNode.GetReActStatistics">
            <summary>
            Gets current ReAct statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReActDomain">
            <summary>
            Represents different ReAct domains for specialized behavior.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ReActDomain.General">
            <summary>General-purpose ReAct for any task.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ReActDomain.ProblemSolving">
            <summary>Specialized ReAct for problem-solving scenarios.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ReActDomain.DataAnalysis">
            <summary>Specialized ReAct for data analysis tasks.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ReActDomain.TaskExecution">
            <summary>Specialized ReAct for task execution processes.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReActExecutionContext">
            <summary>
            Execution context for a ReAct loop.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReActIteration">
            <summary>
            Represents a single iteration in the ReAct loop.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReActLoopResult">
            <summary>
            Result of a complete ReAct loop execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReActStatistics">
            <summary>
            Statistics about ReAct loop node performance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActStatistics.ExecutionCount">
            <summary>Total number of executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActStatistics.FailureCount">
            <summary>Number of failed executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActStatistics.SuccessfulCompletions">
            <summary>Number of successful goal completions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActStatistics.TotalIterations">
            <summary>Total iterations across all executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActStatistics.AverageExecutionTime">
            <summary>Average execution time.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActStatistics.AverageIterationsPerExecution">
            <summary>Average iterations per execution.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActStatistics.SuccessRate">
            <summary>Success rate (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReActStatistics.LastExecutedAt">
            <summary>Timestamp of last execution.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReasoningGraphNode">
            <summary>
            Graph node that implements reasoning capabilities for analyzing current situation and planning next actions.
            This node is designed to be used as part of the ReAct pattern for structured decision-making.
            </summary>
            <remarks>
            The ReasoningGraphNode analyzes the current context, evaluates available information,
            and generates structured reasoning about what action should be taken next.
            It uses configurable prompt templates and can be customized for different domains.
            
            Key features:
            - Context-aware reasoning: Analyzes current situation and available data
            - Template-based prompts: Uses customizable templates for different reasoning patterns
            - Quality metrics: Tracks reasoning quality and consistency
            - Domain specialization: Can be configured for specific problem domains
            - Chain-of-thought support: Supports step-by-step reasoning patterns
            
            Metadata keys (optional):
            - "ExecutionCount", "FailureCount": aggregate counters (int)
            - "AverageExecutionTime", "AverageConfidenceScore", "LastExecutedAt": metrics
            - "Domain", "ChainOfThoughtEnabled", "MaxReasoningSteps", "ConfidenceThreshold": configuration
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.#ctor(System.String,System.String,System.String,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of ReasoningGraphNode.
            </summary>
            <param name="reasoningPrompt">Base prompt template for reasoning</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional custom description</param>
            <param name="templateEngine">Optional template engine for prompt processing</param>
            <param name="logger">Optional logger for tracking reasoning activities</param>
            <exception cref="T:System.ArgumentException">Thrown when reasoningPrompt is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.CreateForDomain(SemanticKernel.Graph.Nodes.ReasoningDomain,System.String,SemanticKernel.Graph.Integration.IGraphTemplateEngine,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Creates a ReasoningGraphNode with domain-specific configuration.
            </summary>
            <param name="domain">Domain type for specialized reasoning</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="templateEngine">Optional template engine</param>
            <param name="logger">Optional logger</param>
            <returns>Configured ReasoningGraphNode for the specified domain</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ReasoningPrompt">
            <summary>
            Gets the base reasoning prompt template.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.Statistics">
            <summary>
            Gets the current reasoning statistics.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.Domain">
            <summary>
            Gets the configured reasoning domain.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ChainOfThoughtEnabled">
            <summary>
            Gets whether chain-of-thought reasoning is enabled.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ConfigureReasoning(SemanticKernel.Graph.Nodes.ReasoningDomain,System.Boolean,System.Int32,System.Double)">
            <summary>
            Configures the reasoning parameters.
            </summary>
            <param name="domain">Reasoning domain specialization</param>
            <param name="enableChainOfThought">Whether to enable step-by-step reasoning</param>
            <param name="maxReasoningSteps">Maximum number of reasoning steps</param>
            <param name="confidenceThreshold">Minimum confidence threshold for decisions</param>
            <returns>This instance for method chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.AddScenarioTemplate(System.String,System.String)">
            <summary>
            Adds a custom reasoning template for specific scenarios.
            </summary>
            <param name="scenarioKey">Key identifying the scenario</param>
            <param name="promptTemplate">Template for this scenario</param>
            <returns>This instance for method chaining</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameters are null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.AddNextNode(SemanticKernel.Graph.Core.IGraphNode,System.Func{Microsoft.SemanticKernel.KernelArguments,System.Boolean})">
            <summary>
            Adds a next node with optional conditional routing.
            </summary>
            <param name="nextNode">Node to add</param>
            <param name="condition">Optional condition for routing to this node</param>
            <exception cref="T:System.ArgumentNullException">Thrown when nextNode is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the reasoning prompt against the configured LLM and returns a structured result.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments containing the graph state and reasoning inputs.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result encoding reasoning output, suggested action, and metadata.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when reasoning execution fails.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called before the node is executed.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called after the node has been executed successfully.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="result">Execution result.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Called when the node execution fails.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="exception">Exception that occurred.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.InitializeMetadata">
            <summary>
            Initializes node metadata with default values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.GetDomainConfiguration(SemanticKernel.Graph.Nodes.ReasoningDomain)">
            <summary>
            Gets domain-specific configuration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.PrepareReasoningContext(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Prepares the reasoning context from kernel arguments.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.SelectPromptTemplate(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Selects the appropriate prompt template based on context.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.GenerateReasoningPromptAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Generates the final reasoning prompt using the template engine.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ExecuteReasoningAsync(Microsoft.SemanticKernel.Kernel,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the reasoning via LLM.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ParseReasoningResult(System.String)">
            <summary>
            Parses and validates the reasoning result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.ExtractActionFromText(System.String)">
            <summary>
            Extracts suggested action from plain text reasoning.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.EstimateConfidenceFromText(System.String)">
            <summary>
            Estimates confidence score from text content.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.CreateExecutionResult(SemanticKernel.Graph.Nodes.ReasoningResult,System.String,System.String)">
            <summary>
            Creates the final execution result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.UpdateStatistics(System.TimeSpan,System.Double)">
            <summary>
            Updates execution statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.ReasoningGraphNode.GetReasoningStatistics">
            <summary>
            Gets current reasoning statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReasoningDomain">
            <summary>
            Represents different reasoning domains for specialized prompts and logic.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ReasoningDomain.General">
            <summary>General-purpose reasoning for any task.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ReasoningDomain.ProblemSolving">
            <summary>Specialized reasoning for problem-solving scenarios.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ReasoningDomain.DataAnalysis">
            <summary>Specialized reasoning for data analysis tasks.</summary>
        </member>
        <member name="F:SemanticKernel.Graph.Nodes.ReasoningDomain.DecisionMaking">
            <summary>Specialized reasoning for decision-making processes.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReasoningResult">
            <summary>
            Represents the result of a reasoning operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningResult.ReasoningChain">
            <summary>Chain of reasoning steps taken.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningResult.SuggestedAction">
            <summary>Suggested action to take next.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningResult.ConfidenceScore">
            <summary>Confidence score for the reasoning (0.0 to 1.0).</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningResult.NextStep">
            <summary>Next step in the process.</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.JsonReasoningResult">
            <summary>
            JSON representation of reasoning result for structured parsing.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.ReasoningStatistics">
            <summary>
            Statistics about reasoning node performance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningStatistics.ExecutionCount">
            <summary>Total number of executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningStatistics.FailureCount">
            <summary>Number of failed executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningStatistics.AverageExecutionTime">
            <summary>Average execution time.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningStatistics.AverageConfidenceScore">
            <summary>Average confidence score across all executions.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningStatistics.LastExecutedAt">
            <summary>Timestamp of last execution.</summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.ReasoningStatistics.SuccessRate">
            <summary>Success rate (0.0 to 1.0).</summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.RestToolGraphNode">
            <summary>
            Graph node that executes a REST operation based on a <see cref="T:SemanticKernel.Graph.Integration.RestToolSchema"/>.
            Includes basic input mapping, validation, timeout, and response handling.
            </summary>
            <remarks>
            Behavior overview:
            - Input mapping: pulls values for query/headers from <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> by schema mappings; supports literals and secrets
            - Timeouts: per-request timeout via schema; linked cancellation to node token
            - Caching: optional response caching keyed by method+url+body
            - Telemetry: emits dependency events via <see cref="T:SemanticKernel.Graph.Integration.IGraphTelemetry"/> when available
            - Schema: implements <see cref="T:SemanticKernel.Graph.Core.ITypedSchemaNode"/> to expose input/output schemas
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RestToolGraphNode.NodeId">
            <summary>
            Gets the unique identifier for this node, derived from the tool schema id.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RestToolGraphNode.Name">
            <summary>
            Gets the human-readable name of this node, derived from the tool schema name.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RestToolGraphNode.Description">
            <summary>
            Gets the description of what this node does.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RestToolGraphNode.Metadata">
            <summary>
            Gets metadata associated with this node. Rest tool nodes expose no dynamic metadata by default.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RestToolGraphNode.IsExecutable">
            <summary>
            Indicates whether this node can be executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RestToolGraphNode.InputParameters">
            <summary>
            Gets the input parameter names expected by this node, inferred from query/header mappings in the schema.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RestToolGraphNode.OutputParameters">
            <summary>
            Gets the output parameter names produced by this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets the next possible nodes to execute after this one. Rest tool nodes are leaves by default.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Determines if this node should be executed based on the current state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Called before the node is executed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after the node has been executed successfully.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the node execution fails.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Validates that this node can execute with the provided arguments.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.GetInputSchema">
            <summary>
            Gets the input schema describing parameters expected by this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.GetOutputSchema">
            <summary>
            Gets the output schema describing values produced by this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RestToolGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Executes the REST request described by the schema and returns a structured result.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments used for parameter/header substitution.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result containing response body and metadata (status_code, response_json, from_cache).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled or timeout elapses.</exception>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode">
            <summary>
            Specialized node that wraps another node with automatic retry capabilities.
            Handles transient failures with configurable retry policies and backoff strategies.
            </summary>
            <remarks>
            Adds retry-related context into <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> during execution:
            - "AttemptCount": current attempt number (int)
            - "IsRetryAttempt": whether the current attempt is a retry (bool)
            - "MaxRetries": configured maximum retries (int)
            On success, augments <see cref="P:Microsoft.SemanticKernel.FunctionResult.Metadata"/> with:
            - "RetryAttempts" (int), "TotalRetryTime" (ms), "RetryDelays" (ms[]), "RetryStrategy" (string)
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.#ctor(SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.Core.RetryPolicyConfig,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of RetryPolicyGraphNode.
            </summary>
            <param name="wrappedNode">Node to wrap with retry policy</param>
            <param name="retryConfig">Retry policy configuration</param>
            <param name="logger">Optional logger for retry tracking</param>
            <exception cref="T:System.ArgumentNullException">Thrown when wrappedNode or retryConfig are null</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.NodeId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.Name">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.Description">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.Metadata">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.IsExecutable">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.InputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.OutputParameters">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.WrappedNode">
            <summary>
            Gets the wrapped node instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.RetryConfig">
            <summary>
            Gets the current retry policy configuration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.RetryStatistics">
            <summary>
            Gets the retry statistics for this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.UpdateRetryConfig(SemanticKernel.Graph.Core.RetryPolicyConfig)">
            <summary>
            Updates the retry policy configuration.
            </summary>
            <param name="config">New retry configuration</param>
            <exception cref="T:System.ArgumentNullException">Thrown when config is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <remarks>
            Throws <see cref="T:System.OperationCanceledException"/> when cancelled; rethrows last failure if not retryable or
            retry budget is exhausted. Updates <see cref="P:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.RetryStatistics"/> and metadata accordingly.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.AddEdge(SemanticKernel.Graph.Core.IGraphNode,System.Func{Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Adds a conditional edge from this retry node to another node.
            </summary>
            <param name="targetNode">Target node for the edge</param>
            <param name="condition">Condition function for the edge</param>
            <param name="edgeName">Optional name for the edge</param>
            <exception cref="T:System.ArgumentNullException">Thrown when targetNode or condition are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.AddEdgeForRetryOutcome(SemanticKernel.Graph.Core.IGraphNode,System.Boolean,System.Int32,System.String)">
            <summary>
            Adds a conditional edge based on retry outcome.
            </summary>
            <param name="targetNode">Target node for the edge</param>
            <param name="onlyOnRetrySuccess">Whether to only execute on successful retry</param>
            <param name="minRetryAttempts">Minimum retry attempts required</param>
            <param name="edgeName">Optional name for the edge</param>
            <exception cref="T:System.ArgumentNullException">Thrown when targetNode is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.InitializeMetadata">
            <summary>
            Initializes node metadata with default values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.ValidateRetryConfiguration">
            <summary>
            Validates the retry configuration for correctness.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.ShouldRetryError(System.Exception,System.Int32)">
            <summary>
            Determines if an error should be retried based on configuration.
            </summary>
            <param name="exception">Exception that occurred</param>
            <param name="attemptNumber">Current attempt number</param>
            <returns>True if the error should be retried</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.CategorizeError(System.Exception)">
            <summary>
            Categorizes an exception into a specific error type.
            </summary>
            <param name="exception">Exception to categorize</param>
            <returns>Categorized error type</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.IsTransientError(System.Exception)">
            <summary>
            Determines if an exception represents a transient error.
            </summary>
            <param name="exception">Exception to check</param>
            <returns>True if the error is transient</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.CalculateRetryDelay(System.Int32)">
            <summary>
            Calculates the delay before the next retry attempt.
            </summary>
            <param name="attemptNumber">Current attempt number</param>
            <returns>Delay before next retry</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.UpdateRetryStatistics(System.Int32,System.TimeSpan,System.Collections.Generic.List{System.TimeSpan},System.Boolean,System.Exception)">
            <summary>
            Updates retry statistics after execution.
            </summary>
            <param name="attempts">Number of attempts made</param>
            <param name="totalTime">Total execution time</param>
            <param name="delays">List of delays between attempts</param>
            <param name="success">Whether execution was successful</param>
            <param name="exception">Exception if execution failed</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.GetRetryStatistics">
            <summary>
            Gets current retry statistics.
            </summary>
            <returns>Current retry statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.RetryPolicyGraphNode.UpdateExecutionMetadata(System.Boolean,System.Exception)">
            <summary>
            Updates execution metadata after node execution.
            </summary>
            <param name="success">Whether execution was successful</param>
            <param name="exception">Exception if execution failed</param>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.RetryStatistics">
            <summary>
            Statistics for retry policy execution.
            Tracks performance and behavior metrics for retry operations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.TotalExecutions">
            <summary>
            Gets or sets the total number of executions attempted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.TotalRetryAttempts">
            <summary>
            Gets or sets the total number of retry attempts made.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.SuccessfulExecutions">
            <summary>
            Gets or sets the number of successful executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.FailedExecutions">
            <summary>
            Gets or sets the number of failed executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.SuccessfulRetries">
            <summary>
            Gets or sets the number of successful retries (succeeded after failing at least once).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.FailedRetries">
            <summary>
            Gets or sets the number of failed retries (failed even after retrying).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.TotalExecutionTime">
            <summary>
            Gets or sets the total execution time across all attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.TotalRetryDelay">
            <summary>
            Gets or sets the total time spent in retry delays.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.AverageAttemptsPerExecution">
            <summary>
            Gets or sets the average number of attempts per execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.AverageExecutionTime">
            <summary>
            Gets or sets the average execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.LastExecutionAttempts">
            <summary>
            Gets or sets the number of attempts for the last execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.LastExecutionTime">
            <summary>
            Gets or sets the timestamp of the last execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.ErrorTypeCounts">
            <summary>
            Gets or sets the count of each error type encountered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.SuccessRate">
            <summary>
            Gets the success rate as a percentage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.RetryStatistics.RetryEffectivenessRate">
            <summary>
            Gets the retry effectiveness rate as a percentage.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.SubgraphGraphNode">
            <summary>
            Graph node that executes another <see cref="T:SemanticKernel.Graph.Core.GraphExecutor"/> as a subgraph.
            Supports isolation modes, input/output mappings and controlled state merging.
            </summary>
            <remarks>
            Isolation modes:
            - SharedState: runs subgraph against parent <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>; no merge required
            - ScopedPrefix: copies parent args with a prefix into child; merges back under prefix
            - IsolatedClone: executes on a deep-cloned state and merges back using conflict policy or explicit mappings
            
            Configuration: see <see cref="T:SemanticKernel.Graph.Core.SubgraphConfiguration"/> for mappings, start node, and merge policy.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SubgraphGraphNode.#ctor(SemanticKernel.Graph.Core.GraphExecutor,System.String,System.String,SemanticKernel.Graph.Core.SubgraphConfiguration,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Nodes.SubgraphGraphNode"/>.
            </summary>
            <param name="subgraph">The subgraph executor to run.</param>
            <param name="name">Optional display name for the node.</param>
            <param name="description">Optional description for the node.</param>
            <param name="config">Optional configuration for isolation and mappings.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SubgraphGraphNode.Subgraph">
            <summary>
            Gets the subgraph executor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SubgraphGraphNode.Configuration">
            <summary>
            Gets the subgraph configuration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SubgraphGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>Executes the configured subgraph with the specified isolation/mapping rules.</summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Parent execution arguments to derive child state from.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Function result produced by the subgraph.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SubgraphGraphNode.AddEdge(SemanticKernel.Graph.Core.IGraphNode,System.Func{Microsoft.SemanticKernel.KernelArguments,System.Boolean},System.String)">
            <summary>
            Adds a conditional edge from this node to another node.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.SwitchCase">
            <summary>
            Represents a case in a switch node with a condition and associated nodes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchCase.#ctor(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of SwitchCase.
            </summary>
            <param name="name">Name of this case</param>
            <param name="condition">Condition function for this case</param>
            <param name="description">Optional description of this case</param>
            <exception cref="T:System.ArgumentException">Thrown when name is null or whitespace</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when condition is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchCase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of SwitchCase with a template-based condition.
            </summary>
            <param name="name">Name of this case</param>
            <param name="conditionTemplate">Handlebars template that evaluates to a boolean value</param>
            <param name="description">Optional description of this case</param>
            <exception cref="T:System.ArgumentException">Thrown when name or conditionTemplate are null or whitespace</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchCase.CaseId">
            <summary>
            Gets the unique identifier for this case.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchCase.Name">
            <summary>
            Gets the name of this case.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchCase.Description">
            <summary>
            Gets the description of this case.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchCase.Condition">
            <summary>
            Gets the condition function for this case.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchCase.ConditionTemplate">
            <summary>
            Gets the condition template (if provided).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchCase.Nodes">
            <summary>
            Gets the nodes associated with this case.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchCase.CreatedAt">
            <summary>
            Gets the timestamp when this case was created.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchCase.AddNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to this case.
            </summary>
            <param name="node">Node to add</param>
            <returns>This SwitchCase instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when node is already added</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchCase.RemoveNode(System.String)">
            <summary>
            Removes a node from this case.
            </summary>
            <param name="nodeId">ID of the node to remove</param>
            <returns>True if the node was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchCase.EvaluateTemplate(System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Evaluates a conditional expression using the advanced expression evaluator.
            </summary>
            <param name="expression">Expression to evaluate</param>
            <param name="state">Graph state to use as context</param>
            <returns>Boolean result of expression evaluation</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SemanticKernel.Graph.Nodes.SwitchGraphNode" -->
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of SwitchGraphNode.
            </summary>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional description of what this switch does</param>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.NodeId">
            <summary>
            Gets the unique identifier for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.Name">
            <summary>
            Gets the human-readable name of this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.Description">
            <summary>
            Gets the description of what this node does.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.Metadata">
            <summary>
            Gets the metadata associated with this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.IsExecutable">
            <summary>
            Indicates whether this node can be executed (always true for switch nodes).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.InputParameters">
            <summary>
            Gets the list of input parameter names this node expects.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.OutputParameters">
            <summary>
            Gets the list of output parameter names this node produces.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.Cases">
            <summary>
            Gets all cases in this switch node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.SwitchGraphNode.DefaultNodes">
            <summary>
            Gets the default nodes to execute when no cases match.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.AddCase(SemanticKernel.Graph.Nodes.SwitchCase)">
            <summary>
            Adds a case to this switch node.
            </summary>
            <param name="switchCase">Case to add</param>
            <returns>This SwitchGraphNode instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when switchCase is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when case name already exists</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.AddCase(System.String,System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.String)">
            <summary>
            Creates and adds a new case with a condition function.
            </summary>
            <param name="name">Name of the case</param>
            <param name="condition">Condition function</param>
            <param name="description">Optional description</param>
            <returns>The created SwitchCase for further configuration</returns>
            <exception cref="T:System.ArgumentException">Thrown when name is null or whitespace</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when condition is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.AddCase(System.String,System.String,System.String)">
            <summary>
            Creates and adds a new case with a template-based condition.
            </summary>
            <param name="name">Name of the case</param>
            <param name="conditionTemplate">Handlebars template condition</param>
            <param name="description">Optional description</param>
            <returns>The created SwitchCase for further configuration</returns>
            <exception cref="T:System.ArgumentException">Thrown when name or conditionTemplate are null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.RemoveCase(System.String)">
            <summary>
            Removes a case by name.
            </summary>
            <param name="caseName">Name of the case to remove</param>
            <returns>True if the case was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when caseName is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.GetCase(System.String)">
            <summary>
            Gets a case by name.
            </summary>
            <param name="caseName">Name of the case to get</param>
            <returns>The case if found, null otherwise</returns>
            <exception cref="T:System.ArgumentException">Thrown when caseName is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.AddDefaultNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to the default execution path.
            </summary>
            <param name="node">Node to add to default path</param>
            <returns>This SwitchGraphNode instance for method chaining</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when node is already added</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.RemoveDefaultNode(System.String)">
            <summary>
            Removes a node from the default execution path.
            </summary>
            <param name="nodeId">ID of the node to remove</param>
            <returns>True if the node was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes this switch node by evaluating cases in order.
            Finds the first matching case and returns information about which case matched.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments containing the graph state</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result indicating which case matched</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when evaluation fails.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Validates that this node can execute with the provided arguments.
            </summary>
            <param name="arguments">Arguments to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets the next possible nodes to execute after this one based on which case matched.
            </summary>
            <param name="executionResult">Result of executing this node</param>
            <param name="graphState">Current graph state</param>
            <returns>Collection of possible next nodes</returns>
            <remarks>
            Uses the matched case from <paramref name="executionResult"/> when available; otherwise re-evaluates
            conditions against <paramref name="graphState"/>. If nothing matches, returns default nodes.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Determines if this node should be executed based on the current state.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>Always true for switch nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Called before the node is executed.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after the node has been executed successfully.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="result">Execution result.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the node execution fails.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="exception">Exception that occurred.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.InitializeMetadata">
            <summary>
            Initializes metadata for this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.RecordEvaluationMetrics(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            Records evaluation metrics.
            </summary>
            <param name="matchedCase">The case that matched</param>
            <param name="hasMatch">Whether any case matched</param>
            <param name="evaluationTime">Time taken to evaluate</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.RecordEvaluationError(System.Exception)">
            <summary>
            Records evaluation error.
            </summary>
            <param name="exception">Exception that occurred</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.SwitchGraphNode.RecordCaseEvaluationError(System.String,System.Exception)">
            <summary>
            Records case-specific evaluation error.
            </summary>
            <param name="caseName">Name of the case that failed</param>
            <param name="exception">Exception that occurred</param>
        </member>
        <member name="T:SemanticKernel.Graph.Nodes.WhileLoopGraphNode">
            <summary>
            Graph node that implements while loop logic for conditional repetitions.
            Executes a set of nodes repeatedly while a condition is true.
            Provides comprehensive loop control, monitoring, and safety features.
            </summary>
            <remarks>
            This node provides:
            - Conditional loop execution: Repeat while condition is true
            - Maximum iteration limit: Prevents infinite loops
            - Break/continue support: Control flow within loops
              - Break: Immediately exits the loop
              - Continue: Skips remaining nodes in current iteration and proceeds to next iteration
            - Performance monitoring: Detailed metrics and timing
            - Safety features: Automatic infinite loop detection
            - Thread safety: All operations are thread-safe for concurrent execution
            - State management: Proper state handling during iterations
            
            Flow control behavior:
            - Each iteration checks the condition before execution
            - If condition is false, loop exits
            - If break is requested, loop exits immediately
            - If continue is requested, remaining nodes in current iteration are skipped
            - Iteration count is incremented at the start of each iteration
            - Loop continues until condition is false or max iterations reached
            
            Metadata keys (optional):
            - "ExecutionCount": number of loop executions (int)
            - "CurrentIteration": current iteration index (int)
            - "LastIterationCount": last total iterations (int)
            - "LastExecutionDuration": last loop duration (TimeSpan)
            - "AverageExecutionTime": running average duration (TimeSpan)
            - "LastExecutionError": last error message (string)
            - "MaxIterations": configured iteration limit (int)
            - "MonitoringLevel": configured monitoring level (string)
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.#ctor(System.Func{SemanticKernel.Graph.State.GraphState,System.Boolean},System.Int32,System.String,System.String,System.String,SemanticKernel.Graph.Core.LoopMonitoringLevel,System.Nullable{System.TimeSpan},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of WhileLoopGraphNode with a condition function.
            </summary>
            <param name="condition">Function that evaluates the loop condition based on graph state</param>
            <param name="maxIterations">Maximum number of iterations to prevent infinite loops (default: 1000)</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional description of what this loop does</param>
            <param name="monitoringLevel">Level of performance monitoring (default: Basic)</param>
            <param name="maxExecutionTime">Maximum execution time before timeout (optional)</param>
            <param name="maxMemoryUsage">Maximum memory usage before termination (optional)</param>
            <exception cref="T:System.ArgumentNullException">Thrown when condition is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when maxIterations is less than 1</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.#ctor(System.String,System.Int32,System.String,System.String,System.String,SemanticKernel.Graph.Core.LoopMonitoringLevel,System.Nullable{System.TimeSpan},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of WhileLoopGraphNode with a template-based condition.
            </summary>
            <param name="conditionTemplate">Handlebars template that evaluates to a boolean value</param>
            <param name="maxIterations">Maximum number of iterations to prevent infinite loops (default: 1000)</param>
            <param name="nodeId">Optional custom node identifier</param>
            <param name="name">Optional custom name for the node</param>
            <param name="description">Optional description of what this loop does</param>
            <param name="monitoringLevel">Level of performance monitoring (default: Basic)</param>
            <param name="maxExecutionTime">Maximum execution time before timeout (optional)</param>
            <param name="maxMemoryUsage">Maximum memory usage before termination (optional)</param>
            <exception cref="T:System.ArgumentException">Thrown when conditionTemplate is null or whitespace, or maxIterations is less than 1</exception>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.NodeId">
            <summary>
            Gets the unique identifier for this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.Name">
            <summary>
            Gets the human-readable name of this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.Description">
            <summary>
            Gets the description of what this node does.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.Metadata">
            <summary>
            Gets the metadata associated with this node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.IsExecutable">
            <summary>
            Indicates whether this node can be executed (always true for while loop nodes).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.InputParameters">
            <summary>
            Gets the list of input parameter names this node expects.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.OutputParameters">
            <summary>
            Gets the list of output parameter names this node produces.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.Condition">
            <summary>
            Gets the condition function for this loop.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.ConditionTemplate">
            <summary>
            Gets the condition template (if provided).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.MaxIterations">
            <summary>
            Gets the maximum number of iterations allowed for this loop.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.MonitoringLevel">
            <summary>
            Gets the monitoring level for this loop.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.MaxExecutionTime">
            <summary>
            Gets the maximum execution time before timeout.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.MaxMemoryUsage">
            <summary>
            Gets the maximum memory usage before termination.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.LoopNodes">
            <summary>
            Gets the nodes to execute in each iteration of the loop.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.AddLoopNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to be executed in each iteration of the loop.
            </summary>
            <param name="node">Node to add to the loop</param>
            <exception cref="T:System.ArgumentNullException">Thrown when node is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when node is already added</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.RemoveLoopNode(System.String)">
            <summary>
            Removes a node from the loop.
            </summary>
            <param name="nodeId">ID of the node to remove</param>
            <returns>True if the node was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when nodeId is null or whitespace</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes this while loop node by repeatedly executing loop nodes while the condition is true.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Execution arguments containing the graph state</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result containing the number of iterations executed</returns>
            <remarks>
            Execution flow:
            1. Check condition at start of each iteration
            2. If condition is false, exit loop
            3. Increment iteration counter
            4. Check for global break/continue signals
            5. Execute each loop node sequentially
            6. Check for break/continue signals after each node
            7. If break requested: exit loop immediately
            8. If continue requested: skip remaining nodes, proceed to next iteration
            9. Repeat until condition is false or max iterations reached
            
            The returned result contains the total number of iterations executed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="kernel"/> or <paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the loop detects an infinite condition or otherwise fails.</exception>
            <exception cref="T:System.OperationCanceledException">Propagated when <paramref name="cancellationToken"/> is cancelled.</exception>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.ValidateExecution(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Validates that this node can execute with the provided arguments.
            </summary>
            <param name="arguments">Arguments to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.GetNextNodes(Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Gets the next possible nodes to execute after this one.
            For while loops, this returns an empty collection as the loop handles its own flow.
            </summary>
            <param name="executionResult">Result of executing this node</param>
            <param name="graphState">Current graph state</param>
            <returns>Empty collection as loops handle their own flow</returns>
            <remarks>
            While loops control their own iteration and do not yield successor nodes via this method.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.ShouldExecute(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Determines if this node should be executed based on the current state.
            </summary>
            <param name="graphState">Current graph state</param>
            <returns>Always true for while loop nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.OnBeforeExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Called before the node is executed.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.OnAfterExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.FunctionResult,System.Threading.CancellationToken)">
            <summary>
            Called after the node has been executed successfully.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="result">Execution result.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.OnExecutionFailedAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called when the node execution fails.
            </summary>
            <param name="kernel">Semantic kernel instance.</param>
            <param name="arguments">Execution arguments.</param>
            <param name="exception">Exception that occurred.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Completed task.</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.InitializeMetadata">
            <summary>
            Initializes metadata for this node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.InitializeAdvancedLoopState">
            <summary>
            Initializes advanced loop state with monitoring and safety features.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.RecordLoopMetrics(System.Int32,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Records loop execution metrics.
            </summary>
            <param name="iterations">Number of iterations completed</param>
            <param name="executionTime">Total execution time</param>
            <param name="breakRequested">Whether break was requested</param>
            <param name="continueRequested">Whether continue was requested</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.RecordLoopError(System.Exception)">
            <summary>
            Records loop execution error.
            </summary>
            <param name="exception">Exception that occurred</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.RecordNodeExecutionError(System.String,System.Exception)">
            <summary>
            Records node execution error.
            </summary>
            <param name="nodeId">ID of the node that failed</param>
            <param name="exception">Exception that occurred</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.RecordInfiniteLoopDetection(System.Int32)">
            <summary>
            Records infinite loop detection.
            </summary>
            <param name="iterations">Number of iterations reached</param>
        </member>
        <member name="M:SemanticKernel.Graph.Nodes.WhileLoopGraphNode.EvaluateTemplate(System.String,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Evaluates a conditional expression using the advanced expression evaluator.
            </summary>
            <param name="expression">Expression to evaluate</param>
            <param name="state">Graph state to use as context</param>
            <returns>Boolean result of expression evaluation</returns>
        </member>
        <member name="T:SemanticKernel.Graph.State.ExecutionStatus">
            <summary>
            Represents the possible execution statuses for a graph step.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ExecutionStatus.Running">
            <summary>
            The step is currently running.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ExecutionStatus.Completed">
            <summary>
            The step completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ExecutionStatus.Failed">
            <summary>
            The step failed during execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ExecutionStatus.Cancelled">
            <summary>
            The step was cancelled before completion.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.ExecutionStep">
            <summary>
            Represents an individual step in graph execution.
            Provides detailed tracking of each operation executed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ExecutionStep.#ctor(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of ExecutionStep.
            </summary>
            <param name="nodeId">Identifier of the node that executed</param>
            <param name="functionName">Name of the function executed</param>
            <param name="startTime">Execution start timestamp</param>
            <exception cref="T:System.ArgumentException">Thrown when nodeId or functionName are null or empty</exception>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.StepId">
            <summary>
            Gets the unique identifier for this execution step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.NodeId">
            <summary>
            Gets the identifier of the node that executed this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.FunctionName">
            <summary>
            Gets the name of the function executed in this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.StartTime">
            <summary>
            Gets the execution start timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.EndTime">
            <summary>
            Gets the execution end timestamp (if completed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.Duration">
            <summary>
            Gets the execution duration (if completed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.Status">
            <summary>
            Gets the current execution status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.ErrorMessage">
            <summary>
            Gets the error message (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.Exception">
            <summary>
            Gets the exception details (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.Result">
            <summary>
            Gets the execution result (if any).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.Metadata">
            <summary>
            Gets the additional metadata for this step.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.IsSuccessful">
            <summary>
            Indicates whether this step was executed successfully.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.IsFailed">
            <summary>
            Indicates whether this step failed during execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ExecutionStep.IsRunning">
            <summary>
            Indicates whether this step is still running.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ExecutionStep.MarkCompleted(System.Object)">
            <summary>
            Marks this step as successfully completed.
            </summary>
            <param name="result">Execution result</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the step has already been finalized</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ExecutionStep.MarkFailed(System.String,System.Exception)">
            <summary>
            Marks this step as failed.
            </summary>
            <param name="errorMessage">Error message</param>
            <param name="exception">Exception that caused the failure (optional)</param>
            <exception cref="T:System.ArgumentException">Thrown when errorMessage is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the step has already been finalized</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ExecutionStep.MarkCancelled(System.String)">
            <summary>
            Marks this step as cancelled.
            </summary>
            <param name="reason">Cancellation reason (optional)</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the step has already been finalized</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ExecutionStep.AddMetadata(System.String,System.Object)">
            <summary>
            Adds metadata to this step.
            </summary>
            <param name="key">Metadata key</param>
            <param name="value">Metadata value</param>
            <exception cref="T:System.ArgumentException">Thrown when key is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ExecutionStep.EnsureNotFinalized">
            <summary>
            Ensures the step has not been finalized yet.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the step has already been finalized</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ExecutionStep.ToString">
            <summary>
            Returns a string representation of this execution step.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.GraphState">
            <summary>
            Typed wrapper for KernelArguments that serves as the graph state foundation.
            Provides graph-specific functionality for execution tracking and state manipulation.
            </summary>
            <remarks>
            Design goals:
            - Keep state as a thin wrapper over <see cref="P:SemanticKernel.Graph.State.GraphState.KernelArguments"/> to maximize SK compatibility.
            - Provide execution history and metadata without affecting argument semantics.
            - Ensure thread-safety for history reads via internal locking; argument access follows SK semantics.
            - All public methods validate inputs and avoid throwing except for invalid usage.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.#ctor">
            <summary>
            Initializes a new instance of GraphState with empty KernelArguments.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.#ctor(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Initializes a new instance of GraphState with existing KernelArguments.
            </summary>
            <param name="kernelArguments">Kernel arguments to encapsulate</param>
            <exception cref="T:System.ArgumentNullException">Thrown when kernelArguments is null</exception>
        </member>
        <member name="P:SemanticKernel.Graph.State.GraphState.KernelArguments">
            <summary>
            Gets the underlying KernelArguments.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.GraphState.StateId">
            <summary>
            Gets the unique identifier for this state instance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.GraphState.Version">
            <summary>
            Gets the current state version for compatibility control.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.GraphState.CreatedAt">
            <summary>
            Gets the timestamp when the state was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.GraphState.LastModified">
            <summary>
            Gets the timestamp of the last state modification.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.GraphState.ExecutionHistory">
            <summary>
            Gets the execution history (read-only).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.GraphState.ExecutionStepCount">
            <summary>
            Gets the total number of recorded execution steps.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.GraphState.IsModified">
            <summary>
            Indicates whether the state has been modified since creation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.GetValue``1(System.String)">
            <summary>
            Gets a value from the state by name.
            </summary>
            <typeparam name="T">Expected value type</typeparam>
            <param name="name">Parameter name</param>
            <returns>Typed value or default(T) if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to get a value from the state by name.
            </summary>
            <typeparam name="T">Expected value type</typeparam>
            <param name="name">Parameter name</param>
            <param name="value">Output value if found</param>
            <returns>True if the value was found and is of the correct type</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.SetValue(System.String,System.Object)">
            <summary>
            Sets a value in the state.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.RemoveValue(System.String)">
            <summary>
            Removes a value from the state.
            </summary>
            <param name="name">Parameter name to remove</param>
            <returns>True if the value was removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.ContainsValue(System.String)">
            <summary>
            Checks if a value exists in the state.
            </summary>
            <param name="name">Parameter name</param>
            <returns>True if the value exists</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.GetParameterNames">
            <summary>
            Gets all parameter names in the state.
            </summary>
            <returns>Collection with all parameter names</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.GetMetadata``1(System.String)">
            <summary>
            Gets a metadata value.
            </summary>
            <typeparam name="T">Expected value type</typeparam>
            <param name="key">Metadata key</param>
            <returns>Typed value or default(T) if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.SetMetadata(System.String,System.Object)">
            <summary>
            Sets a metadata value.
            </summary>
            <param name="key">Metadata key</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.RemoveMetadata(System.String)">
            <summary>
            Removes a metadata value.
            </summary>
            <param name="key">Metadata key to remove</param>
            <returns>True if the value was removed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.Serialize(SemanticKernel.Graph.State.SerializationOptions)">
            <summary>
            Serializes this state to a string representation.
            </summary>
            <param name="options">Serialization options</param>
            <returns>Serialized state data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.ValidateIntegrity">
            <summary>
            Validates the integrity of this state.
            </summary>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.CreateChecksum">
            <summary>
            Creates a checksum for integrity verification.
            </summary>
            <returns>State checksum</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.CreateNormalizedData">
            <summary>
            Creates a normalized string representation for checksum calculation.
            </summary>
            <returns>Normalized data string</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.InitializeMetadata">
            <summary>
            Initializes the default state metadata.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.GraphState.UpdateLastModified">
            <summary>
            Updates the last modified timestamp.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.ISerializableState">
            <summary>
            Interface for serializable state objects.
            Provides standard methods for state serialization with version control and integrity checks.
            </summary>
            <remarks>
            Implementations should produce deterministic serialized forms for equivalent states to enable
            reliable checksums and diffing. Serialization methods should honor options and avoid throwing
            on benign omissions (e.g., missing optional metadata).
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.State.ISerializableState.Version">
            <summary>
            Gets the current version of this state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ISerializableState.StateId">
            <summary>
            Gets the unique identifier of this state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ISerializableState.CreatedAt">
            <summary>
            Gets the timestamp when this state was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ISerializableState.LastModified">
            <summary>
            Gets the timestamp when this state was last modified.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ISerializableState.Serialize(SemanticKernel.Graph.State.SerializationOptions)">
            <summary>
            Serializes this state to a string representation.
            </summary>
            <param name="options">Serialization options</param>
            <returns>Serialized state data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.ISerializableState.ValidateIntegrity">
            <summary>
            Validates the integrity of this state.
            </summary>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.ISerializableState.CreateChecksum">
            <summary>
            Creates a checksum for integrity verification.
            </summary>
            <returns>State checksum</returns>
        </member>
        <member name="T:SemanticKernel.Graph.State.SerializationOptions">
            <summary>
            Options for state serialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.Indented">
            <summary>
            Gets or sets whether to use indented formatting.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.EnableCompression">
            <summary>
            Gets or sets whether to enable compression for large states.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.IncludeMetadata">
            <summary>
            Gets or sets whether to include metadata in serialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.IncludeExecutionHistory">
            <summary>
            Gets or sets whether to include execution history.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.CompressionLevel">
            <summary>
            Gets or sets the compression level to use.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.JsonOptions">
            <summary>
            Gets or sets custom JSON serializer options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.ValidateIntegrity">
            <summary>
            Gets or sets whether to validate integrity after serialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.Default">
            <summary>
            Creates default serialization options.
            </summary>
            <returns>Default SerializationOptions</returns>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.Compact">
            <summary>
            Creates compact serialization options (no indentation, compression enabled).
            </summary>
            <returns>Compact SerializationOptions</returns>
        </member>
        <member name="P:SemanticKernel.Graph.State.SerializationOptions.Verbose">
            <summary>
            Creates verbose serialization options (indented, all metadata included).
            </summary>
            <returns>Verbose SerializationOptions</returns>
        </member>
        <member name="T:SemanticKernel.Graph.State.DeserializationResult`1">
            <summary>
            Deserialization result containing the restored state and metadata.
            </summary>
            <typeparam name="T">Type of the deserialized state</typeparam>
        </member>
        <member name="M:SemanticKernel.Graph.State.DeserializationResult`1.#ctor(`0,System.Boolean,System.Boolean,System.Nullable{SemanticKernel.Graph.State.StateVersion},SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Initializes a new instance of DeserializationResult.
            </summary>
            <param name="state">Deserialized state</param>
            <param name="wasCompressed">Whether the data was compressed</param>
            <param name="wasMigrated">Whether migration was applied</param>
            <param name="originalVersion">Original version before migration</param>
            <param name="validationResult">Validation result</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.DeserializationResult`1.State">
            <summary>
            Gets the deserialized state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.DeserializationResult`1.WasCompressed">
            <summary>
            Gets whether the source data was compressed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.DeserializationResult`1.WasMigrated">
            <summary>
            Gets whether migration was applied during deserialization.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.DeserializationResult`1.OriginalVersion">
            <summary>
            Gets the original version before migration (if migration occurred).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.DeserializationResult`1.ValidationResult">
            <summary>
            Gets the validation result from integrity checks.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.DeserializationResult`1.DeserializedAt">
            <summary>
            Gets the timestamp when deserialization occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.DeserializationResult`1.IsSuccessful">
            <summary>
            Gets whether deserialization was successful.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.DeserializationResult`1.CreateSummary">
            <summary>
            Returns a summary of the deserialization process.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.DeserializationResult`1.ToString">
            <summary>
            Returns a string representation of this result.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.SerializableStateFactory">
            <summary>
            Factory for creating serializable states with standard implementations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.SerializableStateFactory.Deserialize``1(System.String,System.Func{System.String,``0})">
            <summary>
            Deserializes a state from string data with full error handling and migration support.
            </summary>
            <typeparam name="T">Type of state to deserialize</typeparam>
            <param name="serializedData">Serialized state data</param>
            <param name="deserializer">Custom deserializer function</param>
            <returns>Deserialization result</returns>
            <exception cref="T:System.ArgumentException">Thrown when serializedData is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when deserializer is null</exception>
        </member>
        <member name="T:SemanticKernel.Graph.State.ObjectToStringConverter">
            <summary>
            Custom JSON converter for objects that cannot be normally serialized.
            - Detects reference cycles and falls back to a safe string when detected
            - Converts delegates/pointers/byrefs to a safe string representation
            - Otherwise defers to System.Text.Json default handling
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ObjectToStringConverter.ShouldSerializeAsString(System.Object)">
            <summary>
            Checks if the object should be serialized as string.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ObjectToStringConverter.IsKnownSerializableType(System.Type)">
            <summary>
            Checks if the type is known to be serializable.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ObjectToStringConverter.SafeToString(System.Object)">
            <summary>
            Generates a safe string for non-serializable values.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SemanticKernel.Graph.State.ObjectToStringConverter.ReferenceEqualityComparerInstance" -->
        <member name="T:SemanticKernel.Graph.State.KernelArgumentsConverter">
            <summary>
            Custom JSON converter for KernelArguments.
            Provides optimized serialization of KernelArguments content.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateVersionConverter">
            <summary>
            Custom JSON converter for StateVersion.
            Provides compact string-based serialization.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.ParameterChange">
            <summary>
            Represents a change in a state parameter.
            Contains the old value and the new value.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ParameterChange.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of ParameterChange.
            </summary>
            <param name="oldValue">Old parameter value</param>
            <param name="newValue">New parameter value</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.ParameterChange.OldValue">
            <summary>
            Gets the old parameter value.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ParameterChange.NewValue">
            <summary>
            Gets the new parameter value.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ParameterChange.Timestamp">
            <summary>
            Gets the timestamp of the change.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ParameterChange.HasActualChange">
            <summary>
            Indicates whether there was an actual change in values.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ParameterChange.OldValueType">
            <summary>
            Gets the type of the old value (if not null).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ParameterChange.NewValueType">
            <summary>
            Gets the type of the new value (if not null).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ParameterChange.HasTypeChange">
            <summary>
            Indicates whether there was a change in value type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ParameterChange.CreateDescription(System.Boolean)">
            <summary>
            Creates a textual description of the change.
            </summary>
            <param name="includeTypes">Whether to include type information</param>
            <returns>Description of the change</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.ParameterChange.Invert">
            <summary>
            Inverts this change (swaps old and new values).
            </summary>
            <returns>New inverted ParameterChange</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.ParameterChange.FormatValue(System.Object)">
            <summary>
            Formats a value for display.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ParameterChange.FormatEnumerable(System.Collections.IEnumerable)">
            <summary>
            Formats an enumerable value for display.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ParameterChange.Equals(System.Object)">
            <summary>
            Checks if this change is equal to another.
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.ParameterChange.GetHashCode">
            <summary>
            Gets the hash code of this change.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ParameterChange.ToString">
            <summary>
            Returns a string representation of this change.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.PooledKernelArguments">
            <summary>
            Pooled wrapper for <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> to minimize allocations on hot paths.
            Rent instances via <see cref="M:SemanticKernel.Graph.State.PooledKernelArguments.Rent(Microsoft.SemanticKernel.KernelArguments,System.Boolean)"/> and return via <see cref="M:SemanticKernel.Graph.State.PooledKernelArguments.Dispose"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.PooledKernelArguments.Arguments">
            <summary>
            Underlying reusable instance. Do not hold references after disposing the wrapper.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.PooledKernelArguments.Rent(Microsoft.SemanticKernel.KernelArguments,System.Boolean)">
            <summary>
            Rents a pooled instance. Optionally copies values from a template.
            </summary>
            <param name="template">Optional template to copy values from</param>
            <param name="preserveInternalGraphKeys">If false, known internal graph keys are skipped</param>
            <returns>Reusable pooled wrapper</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.PooledKernelArguments.CopyFrom(Microsoft.SemanticKernel.KernelArguments,System.Boolean)">
            <summary>
            Clears current contents and copies values from the template.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.PooledKernelArguments.Clear">
            <summary>
            Removes all keys and values.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.PooledKernelArguments.Dispose">
            <summary>
            Returns this instance to the pool. After disposing, the instance must not be used.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateDiff">
            <summary>
            Represents differences between two graph states.
            Provides detailed information about parameter changes.
            </summary>
            <remarks>
            Tracks added, removed and modified parameters. Designed for reporting and applying changes via
            <see cref="M:SemanticKernel.Graph.State.StateDiff.ApplyTo(SemanticKernel.Graph.State.GraphState)"/>. Value formatting in summaries avoids dumping large structures.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.#ctor">
            <summary>
            Initializes a new instance of StateDiff.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateDiff.Timestamp">
            <summary>
            Gets the timestamp when this diff was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateDiff.AddedParameters">
            <summary>
            Parameters that were added.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateDiff.RemovedParameters">
            <summary>
            Parameters that were removed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateDiff.ModifiedParameters">
            <summary>
            Parameters that were modified.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateDiff.HasChanges">
            <summary>
            Indicates whether there are differences between states.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateDiff.TotalChanges">
            <summary>
            Gets the total number of changes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateDiff.AffectedParameters">
            <summary>
            Gets all affected parameter names.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.IsParameterAdded(System.String)">
            <summary>
            Checks if a specific parameter was added.
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>True if the parameter was added</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameterName is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.IsParameterRemoved(System.String)">
            <summary>
            Checks if a specific parameter was removed.
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>True if the parameter was removed</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameterName is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.IsParameterModified(System.String)">
            <summary>
            Checks if a specific parameter was modified.
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>True if the parameter was modified</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameterName is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.GetParameterChange(System.String)">
            <summary>
            Gets the change for a specific parameter.
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>ParameterChange if found, null otherwise</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameterName is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.CreateSummary(System.Boolean)">
            <summary>
            Creates a textual summary of the differences.
            </summary>
            <param name="includeValues">Whether to include values in the changes</param>
            <returns>Differences summary</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.Invert">
            <summary>
            Inverts this diff (swaps additions with removals and vice versa).
            </summary>
            <returns>New inverted StateDiff</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.ApplyTo(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Applies this diff to a state, creating a new state.
            </summary>
            <param name="targetState">Target state to apply changes to</param>
            <returns>New GraphState with changes applied</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when targetState is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.FormatValue(System.Object)">
            <summary>
            Formats a value for display.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateDiff.ToString">
            <summary>
            Returns a string representation of this diff.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateMergeConflict">
            <summary>
            Represents information about a state merge conflict.
            </summary>
            <param name="Key">Parameter key where conflict occurred</param>
            <param name="BaseValue">Value from base state</param>
            <param name="OverlayValue">Value from overlay state</param>
            <param name="Policy">Merge policy that detected the conflict</param>
            <param name="ResolvedValue">Value used after conflict resolution (if resolved)</param>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeConflict.#ctor(System.String,System.Object,System.Object,SemanticKernel.Graph.State.StateMergeConflictPolicy,System.Object)">
            <summary>
            Represents information about a state merge conflict.
            </summary>
            <param name="Key">Parameter key where conflict occurred</param>
            <param name="BaseValue">Value from base state</param>
            <param name="OverlayValue">Value from overlay state</param>
            <param name="Policy">Merge policy that detected the conflict</param>
            <param name="ResolvedValue">Value used after conflict resolution (if resolved)</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConflict.Key">
            <summary>Parameter key where conflict occurred</summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConflict.BaseValue">
            <summary>Value from base state</summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConflict.OverlayValue">
            <summary>Value from overlay state</summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConflict.Policy">
            <summary>Merge policy that detected the conflict</summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConflict.ResolvedValue">
            <summary>Value used after conflict resolution (if resolved)</summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConflict.WasResolved">
            <summary>
            Gets whether the conflict was resolved automatically.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateMergeResult">
            <summary>
            Represents the result of a state merge operation, including any conflicts detected.
            </summary>
            <param name="MergedState">The resulting merged state</param>
            <param name="Conflicts">List of conflicts detected during merge</param>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeResult.#ctor(SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IReadOnlyList{SemanticKernel.Graph.State.StateMergeConflict})">
            <summary>
            Represents the result of a state merge operation, including any conflicts detected.
            </summary>
            <param name="MergedState">The resulting merged state</param>
            <param name="Conflicts">List of conflicts detected during merge</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeResult.MergedState">
            <summary>The resulting merged state</summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeResult.Conflicts">
            <summary>List of conflicts detected during merge</summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeResult.HasConflicts">
            <summary>
            Gets whether any conflicts were detected during the merge.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeResult.Success(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates a result with no conflicts.
            </summary>
            <param name="mergedState">The merged state</param>
            <returns>Merge result with no conflicts</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeResult.WithConflicts(SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IEnumerable{SemanticKernel.Graph.State.StateMergeConflict})">
            <summary>
            Creates a result with conflicts.
            </summary>
            <param name="mergedState">The merged state</param>
            <param name="conflicts">List of conflicts detected</param>
            <returns>Merge result with conflicts</returns>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers">
            <summary>
            Helper methods for graph-specific state manipulation.
            Provides common operations and utilities for working with GraphState and KernelArguments.
            </summary>
            <remarks>
            Serialization uses cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> for performance and optional compression.
            Helpers avoid mutating input states unless explicitly documented. Public APIs validate inputs and surface
            failures via <see cref="T:System.InvalidOperationException"/> with contextual messages.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.GetAdaptiveCompressionThreshold">
            <summary>
            Gets the current adaptive compression threshold in bytes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ResetAdaptiveCompression">
            <summary>
            Resets the adaptive compression statistics and threshold to defaults.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers.AdaptiveCompressionState">
            <summary>
            Snapshot of adaptive compression state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.GetAdaptiveCompressionState">
            <summary>
            Gets a snapshot of the current adaptive compression state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CreateSerializationOptions(System.Boolean)">
            <summary>
            Creates optimized JSON serialization options with custom converters.
            </summary>
            <param name="writeIndented">Whether to write indented JSON</param>
            <returns>Configured JsonSerializerOptions</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CreateDeserializationOptions">
            <summary>
            Creates optimized JSON deserialization options.
            </summary>
            <returns>Configured JsonSerializerOptions for deserialization</returns>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers.CachedSerializationEntry">
            <summary>
            Cached serialization entry.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.GenerateCacheKey(SemanticKernel.Graph.State.GraphState,System.Boolean,System.Boolean)">
            <summary>
            Generates a cache key for state serialization.
            </summary>
            <param name="state">State to generate key for</param>
            <param name="indented">Whether serialization is indented</param>
            <param name="enableCompression">Whether compression is enabled</param>
            <returns>Cache key</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CleanupCacheIfNeeded">
            <summary>
            Cleans up expired cache entries.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.GetCacheStats">
            <summary>
            Gets cache statistics.
            </summary>
            <returns>Cache statistics</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ClearSerializationCache">
            <summary>
            Clears the serialization cache.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.MergeStates(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Merges two states, prioritizing values from the second state.
            </summary>
            <param name="baseState">Base state</param>
            <param name="overlayState">State to overlay</param>
            <returns>New GraphState with merged values</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either state is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CloneState(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Deep-clones a GraphState (parameters only). Execution metadata is not preserved.
            </summary>
            <param name="state">Source state</param>
            <returns>Cloned state</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.MergeStates(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.StateMergeConflictPolicy)">
            <summary>
            Merges two states using a conflict policy when both contain the same key with different values.
            </summary>
            <param name="baseState">Base state</param>
            <param name="overlayState">Overlay state</param>
            <param name="policy">Conflict resolution policy</param>
            <returns>Merged state</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any state is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.MergeStates(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.StateMergeConfiguration)">
            <summary>
            Merges two states using a detailed configuration with per-key and per-type policies.
            </summary>
            <param name="baseState">Base state</param>
            <param name="overlayState">Overlay state</param>
            <param name="configuration">Merge configuration with policies per key/type</param>
            <returns>Merged state</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any parameter is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.MergeStatesWithConflictDetection(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.StateMergeConfiguration,System.Boolean)">
            <summary>
            Merges two states using a detailed configuration with per-key and per-type policies,
            detecting and reporting conflicts instead of throwing exceptions.
            </summary>
            <param name="baseState">Base state</param>
            <param name="overlayState">Overlay state</param>
            <param name="configuration">Merge configuration with policies per key/type</param>
            <param name="detectConflicts">If true, conflicts are detected and reported rather than handled silently</param>
            <returns>Merge result with merged state and any conflicts detected</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any parameter is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ApplyMergePolicy(System.String,System.Object,System.Object,SemanticKernel.Graph.State.StateMergeConflictPolicy,SemanticKernel.Graph.State.StateMergeConfiguration)">
            <summary>
            Applies a specific merge policy to resolve conflicts between two values.
            </summary>
            <param name="key">Parameter key</param>
            <param name="baseValue">Base value</param>
            <param name="overlayValue">Overlay value</param>
            <param name="policy">Merge policy to apply</param>
            <param name="configuration">Merge configuration for custom functions</param>
            <returns>Merged value</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ApplyTimestampPolicy(System.Object,System.Object,System.Boolean)">
            <summary>
            Applies timestamp-based merge policy (requires metadata with timestamps).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ApplyReducePolicy(System.String,System.Object,System.Object,SemanticKernel.Graph.State.StateMergeConfiguration)">
            <summary>
            Applies reduce-based merge policy for compatible types.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ApplyCrdtPolicy(System.String,System.Object,System.Object)">
            <summary>
            Applies CRDT-like merge semantics for supported types.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ApplyCustomPolicy(System.String,System.Object,System.Object,SemanticKernel.Graph.State.StateMergeConfiguration)">
            <summary>
            Applies custom merge function defined per key or type.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CreateDiff(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates a diff between two states showing the differences.
            </summary>
            <param name="oldState">Old state</param>
            <param name="newState">New state</param>
            <returns>Detailed diff of changes</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when newState is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.FilterState(SemanticKernel.Graph.State.GraphState,System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            Filters a state keeping only parameters that meet a criterion.
            </summary>
            <param name="state">State to filter</param>
            <param name="predicate">Filter criterion</param>
            <returns>New GraphState with filtered parameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state or predicate are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ProjectState(SemanticKernel.Graph.State.GraphState,System.Func{System.String,System.Object,System.Object})">
            <summary>
            Projects a state by applying transformations to values.
            </summary>
            <param name="state">State to project</param>
            <param name="transformer">Transformation function</param>
            <returns>New GraphState with transformed values</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state or transformer are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ValidateRequiredParameters(SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates if a state contains all required parameters.
            </summary>
            <param name="state">State to validate</param>
            <param name="requiredParameters">Required parameters</param>
            <returns>List of missing parameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state or requiredParameters are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.ValidateParameterTypes(SemanticKernel.Graph.State.GraphState,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Validates specific parameter types in the state.
            </summary>
            <param name="state">State to validate</param>
            <param name="typeConstraints">Type constraints per parameter</param>
            <returns>List of type violations</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state or typeConstraints are null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.SerializeState(SemanticKernel.Graph.State.GraphState,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Serializes a state to JSON with optimized settings, optional compression, and caching.
            </summary>
            <param name="state">State to serialize</param>
            <param name="indented">Whether to use indented formatting</param>
            <param name="enableCompression">Whether to enable compression for large states</param>
            <param name="useCache">Whether to use serialization cache</param>
            <returns>JSON representing the state (possibly compressed)</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when serialization fails</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.SerializeState(SemanticKernel.Graph.State.GraphState,System.Boolean,System.Boolean,System.Boolean,SemanticKernel.Graph.State.StateHelpers.SerializationMetrics@)">
            <summary>
            Serializes a state to JSON with optimized settings, optional compression, caching, and returns metrics.
            </summary>
            <param name="state">State to serialize</param>
            <param name="indented">Whether to use indented formatting</param>
            <param name="enableCompression">Whether to enable compression for large states</param>
            <param name="useCache">Whether to use serialization cache</param>
            <param name="metrics">Serialization metrics output</param>
            <returns>JSON representing the state (possibly compressed)</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when serialization fails</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.DeserializeState(System.String)">
            <summary>
            Deserializes a state from JSON (with automatic decompression if needed).
            </summary>
            <param name="json">JSON containing the serialized state (possibly compressed)</param>
            <returns>Reconstructed GraphState</returns>
            <exception cref="T:System.ArgumentException">Thrown when json is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when deserialization fails</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CompressIfNeeded(System.String,System.Nullable{System.IO.Compression.CompressionLevel})">
            <summary>
            Compresses a string using GZip compression if it exceeds the threshold.
            </summary>
            <param name="data">Data to compress</param>
            <param name="compressionLevel">Compression level to use</param>
            <returns>Compressed data (with prefix) or original data if below threshold</returns>
            <exception cref="T:System.ArgumentException">Thrown when data is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.DecompressIfNeeded(System.String)">
            <summary>
            Decompresses data that was compressed with CompressIfNeeded.
            </summary>
            <param name="data">Data to decompress (may or may not be compressed)</param>
            <returns>Decompressed data</returns>
            <exception cref="T:System.ArgumentException">Thrown when data is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when decompression fails</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CompressData(System.Byte[],System.IO.Compression.CompressionLevel)">
            <summary>
            Compresses data using GZip.
            </summary>
            <param name="data">Data to compress</param>
            <param name="compressionLevel">Compression level</param>
            <returns>Compressed data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.DecompressData(System.Byte[])">
            <summary>
            Decompresses GZip compressed data.
            </summary>
            <param name="compressedData">Compressed data</param>
            <returns>Decompressed data</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.GetCompressionStats(System.String)">
            <summary>
            Gets compression statistics for a string.
            </summary>
            <param name="data">Data to analyze</param>
            <returns>Compression statistics</returns>
            <exception cref="T:System.ArgumentException">Thrown when data is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.BeginTransaction(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Starts a state transaction that can be rolled back.
            </summary>
            <param name="state">State to transact</param>
            <returns>ID of the started transaction</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.RollbackTransaction(SemanticKernel.Graph.State.GraphState,System.String)">
            <summary>
            Rolls back a state transaction to the initial snapshot.
            </summary>
            <param name="state">State to roll back</param>
            <param name="transactionId">Transaction ID to roll back</param>
            <returns>Rolled back GraphState</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when transactionId is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when there's no active transaction</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CommitTransaction(SemanticKernel.Graph.State.GraphState,System.String)">
            <summary>
            Commits a transaction by removing the snapshot.
            </summary>
            <param name="state">Transaction state</param>
            <param name="transactionId">Transaction ID to commit</param>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when transactionId is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when there's no active transaction</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CreateCheckpoint(SemanticKernel.Graph.State.GraphState,System.String)">
            <summary>
            Creates a checkpoint of the current state.
            </summary>
            <param name="state">State to checkpoint</param>
            <param name="checkpointName">Checkpoint name</param>
            <returns>Unique ID of the created checkpoint</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when checkpointName is null/empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.RestoreCheckpoint(SemanticKernel.Graph.State.GraphState,System.String)">
            <summary>
            Restores a state from a checkpoint.
            </summary>
            <param name="state">State containing the checkpoint</param>
            <param name="checkpointId">Checkpoint ID to restore</param>
            <returns>Restored GraphState</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when checkpointId is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when checkpoint is not found</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CreateSerializableStateData(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Creates serializable data from a GraphState.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.RestoreStateFromData(SemanticKernel.Graph.State.StateHelpers.SerializableStateData)">
            <summary>
            Restores a GraphState from serializable data.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers.SerializableStateData">
            <summary>
            Serializable state data.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers.SerializableStateDataConverter">
            <summary>
            Custom JSON converter for SerializableStateData.
            Handles proper deserialization of parameters with correct types.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers.StateCheckpoint">
            <summary>
            State checkpoint.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers.CompressionStats">
            <summary>
            Compression statistics for state data.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CompressionStats.#ctor(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of CompressionStats.
            </summary>
            <param name="originalSize">Original data size in bytes</param>
            <param name="compressedSize">Compressed data size in bytes</param>
            <param name="compressionRatio">Compression ratio (0.0 to 1.0)</param>
            <param name="wouldCompress">Whether compression would be beneficial</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.CompressionStats.OriginalSize">
            <summary>
            Gets the original data size in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.CompressionStats.CompressedSize">
            <summary>
            Gets the compressed data size in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.CompressionStats.CompressionRatio">
            <summary>
            Gets the compression ratio (0.0 = no compression, 1.0 = perfect compression).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.CompressionStats.WouldCompress">
            <summary>
            Gets whether compression would be beneficial (compressed size &lt; original size).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.CompressionStats.SpaceSaved">
            <summary>
            Gets the space saved in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.CompressionStats.CompressionPercentage">
            <summary>
            Gets the compression percentage (e.g., 75% means 75% reduction in size).
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.CompressionStats.ToString">
            <summary>
            Returns a string representation of the compression statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats">
            <summary>
            Serialization cache statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.#ctor(System.Int32,System.Int32,System.Double,System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of SerializationCacheStats.
            </summary>
            <param name="totalEntries">Total number of cache entries</param>
            <param name="totalAccesses">Total number of cache accesses</param>
            <param name="averageAgeMinutes">Average age of cache entries in minutes</param>
            <param name="maxCacheSize">Maximum cache size</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.TotalEntries">
            <summary>
            Gets the total number of cache entries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.TotalAccesses">
            <summary>
            Gets the total number of cache accesses.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.AverageAgeMinutes">
            <summary>
            Gets the average age of cache entries in minutes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.MaxCacheSize">
            <summary>
            Gets the maximum cache size.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.HitCount">
            <summary>
            Gets the number of cache hits since process start.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.MissCount">
            <summary>
            Gets the number of cache misses since process start.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.HitRatePercentage">
            <summary>
            Gets the cache hit rate percentage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.UtilizationPercentage">
            <summary>
            Gets the cache utilization percentage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.AverageAccessesPerEntry">
            <summary>
            Gets the average accesses per entry.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.IsNearCapacity">
            <summary>
            Gets whether the cache is near full capacity.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.SerializationCacheStats.ToString">
            <summary>
            Returns a string representation of the cache statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics">
            <summary>
            Serialization metrics captured during state serialization.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.#ctor(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan,System.Int32,System.Int32,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of SerializationMetrics.
            </summary>
            <param name="startedAt">Start time of serialization</param>
            <param name="finishedAt">End time of serialization</param>
            <param name="elapsed">Elapsed duration</param>
            <param name="originalSizeBytes">Original uncompressed size in bytes</param>
            <param name="resultSizeBytes">Final serialized size in bytes</param>
            <param name="wasCompressed">Whether compression was applied</param>
            <param name="compressionRatio">Compression ratio (0-1), positive means reduction</param>
            <param name="cacheHit">Whether the result came from cache</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.StartedAt">
            <summary>
            Gets when the serialization started.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.FinishedAt">
            <summary>
            Gets when the serialization finished.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.Elapsed">
            <summary>
            Gets the elapsed serialization duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.OriginalSizeBytes">
            <summary>
            Gets the original uncompressed size in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.ResultSizeBytes">
            <summary>
            Gets the final serialized size in bytes.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.WasCompressed">
            <summary>
            Gets whether compression was applied.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.CompressionRatio">
            <summary>
            Gets the compression ratio (0-1), where 0 means no reduction, 1 means fully reduced.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.CacheHit">
            <summary>
            Gets whether the serialized result was served from cache.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateHelpers.SerializationMetrics.ToString">
            <summary>
            Returns a string summary.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateMergeConflictPolicy">
            <summary>
            Conflict resolution policy for state merges during parallel branch joins.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateMergeConflictPolicy.PreferFirst">
            <summary>
            Prefer the value from the first (base) state when there is a conflict.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateMergeConflictPolicy.PreferSecond">
            <summary>
            Prefer the value from the second (overlay) state when there is a conflict.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateMergeConflictPolicy.ThrowOnConflict">
            <summary>
            Throw an exception if a conflict is detected.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateMergeConflictPolicy.LastWriteWins">
            <summary>
            Use last-write-wins based on timestamp metadata.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateMergeConflictPolicy.FirstWriteWins">
            <summary>
            Use first-write-wins based on timestamp metadata.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateMergeConflictPolicy.Reduce">
            <summary>
            Apply reduce function for compatible types (numbers, collections).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateMergeConflictPolicy.CrdtLike">
            <summary>
            Use CRDT-like merge semantics for supported types.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateMergeConflictPolicy.Custom">
            <summary>
            Use custom merge function defined per key/type.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateMergeConfiguration">
            <summary>
            Configuration for merge strategies per key or type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConfiguration.DefaultPolicy">
            <summary>
            Gets or sets the default merge policy when no specific rule applies.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConfiguration.KeyPolicies">
            <summary>
            Gets merge policies configured per specific parameter key.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConfiguration.TypePolicies">
            <summary>
            Gets merge policies configured per .NET type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConfiguration.CustomKeyMergers">
            <summary>
            Gets custom merge functions per parameter key.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConfiguration.CustomTypeMergers">
            <summary>
            Gets custom merge functions per .NET type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMergeConfiguration.ReduceFunctions">
            <summary>
            Gets reduce functions for numeric and collection types.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeConfiguration.SetKeyPolicy(System.String,SemanticKernel.Graph.State.StateMergeConflictPolicy)">
            <summary>
            Configures a merge policy for a specific parameter key.
            </summary>
            <param name="key">Parameter key</param>
            <param name="policy">Merge policy</param>
            <returns>This configuration instance for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeConfiguration.SetTypePolicy(System.Type,SemanticKernel.Graph.State.StateMergeConflictPolicy)">
            <summary>
            Configures a merge policy for a specific .NET type.
            </summary>
            <param name="type">Value type</param>
            <param name="policy">Merge policy</param>
            <returns>This configuration instance for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeConfiguration.SetCustomKeyMerger(System.String,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Configures a custom merge function for a specific parameter key.
            </summary>
            <param name="key">Parameter key</param>
            <param name="merger">Custom merge function (base, overlay) => merged</param>
            <returns>This configuration instance for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeConfiguration.SetCustomTypeMerger(System.Type,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Configures a custom merge function for a specific .NET type.
            </summary>
            <param name="type">Value type</param>
            <param name="merger">Custom merge function (base, overlay) => merged</param>
            <returns>This configuration instance for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeConfiguration.SetReduceFunction(System.Type,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Configures a reduce function for a specific .NET type.
            </summary>
            <param name="type">Value type</param>
            <param name="reducer">Reduce function (base, overlay) => reduced</param>
            <returns>This configuration instance for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeConfiguration.GetEffectivePolicy(System.String,System.Type)">
            <summary>
            Gets the effective merge policy for a specific key and value type.
            </summary>
            <param name="key">Parameter key</param>
            <param name="valueType">Value type</param>
            <returns>Effective merge policy</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMergeConfiguration.WithDefaultReducers">
            <summary>
            Initializes default reduce functions for common types.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.IStateMigration">
            <summary>
            Interface for state migrations between different versions.
            </summary>
            <remarks>
            Migrations should be deterministic and idempotent for the same input. Implementations must only transform
            serialized state and not access external systems. Use <see cref="T:SemanticKernel.Graph.State.StateMigrationManager"/> to register.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.State.IStateMigration.FromVersion">
            <summary>
            Gets the source version that this migration handles.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.IStateMigration.ToVersion">
            <summary>
            Gets the target version that this migration produces.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.IStateMigration.Description">
            <summary>
            Gets a description of what this migration does.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.IStateMigration.CanMigrate(SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Checks if this migration can handle the given version.
            </summary>
            <param name="version">Version to check</param>
            <returns>True if this migration can handle the version</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.IStateMigration.Migrate(System.String)">
            <summary>
            Migrates state data from the source version to the target version.
            </summary>
            <param name="serializedState">Serialized state data</param>
            <returns>Migrated state data</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when migration fails</exception>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateMigrationManager">
            <summary>
            Registry and manager for state migrations.
            Handles automatic migration of state data between versions.
            </summary>
            <remarks>
            Maintains an ordered list of registered migrations and computes a path from an older <see cref="T:SemanticKernel.Graph.State.StateVersion"/>
            to <see cref="F:SemanticKernel.Graph.State.StateVersion.Current"/>. Thread-safe via internal locking; operations throw on invalid inputs.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.RegisterMigration(SemanticKernel.Graph.State.IStateMigration)">
            <summary>
            Registers a migration.
            </summary>
            <param name="migration">Migration to register</param>
            <exception cref="T:System.ArgumentNullException">Thrown when migration is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.RegisterMigrations(System.Collections.Generic.IEnumerable{SemanticKernel.Graph.State.IStateMigration})">
            <summary>
            Registers multiple migrations.
            </summary>
            <param name="migrations">Migrations to register</param>
            <exception cref="T:System.ArgumentNullException">Thrown when migrations is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.ClearMigrations">
            <summary>
            Clears all registered migrations.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.IsMigrationNeeded(SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Checks if migration is needed for the given version.
            </summary>
            <param name="version">Version to check</param>
            <returns>True if migration is needed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.MigrateToCurrentVersion(System.String,SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Migrates state data to the current version.
            </summary>
            <param name="serializedState">Serialized state data</param>
            <param name="fromVersion">Source version</param>
            <returns>Migrated state data</returns>
            <exception cref="T:System.ArgumentException">Thrown when serializedState is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when migration fails</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.GetMigrationPath(SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Gets the migration path from source to target version.
            </summary>
            <param name="fromVersion">Source version</param>
            <param name="toVersion">Target version</param>
            <returns>Ordered list of migrations to apply</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.GetAllMigrations">
            <summary>
            Gets all registered migrations.
            </summary>
            <returns>List of all registered migrations</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.GetMigrationsForVersion(SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Gets migrations that can handle a specific version.
            </summary>
            <param name="version">Version to check</param>
            <returns>List of applicable migrations</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationManager.GetMigrationStats">
            <summary>
            Gets migration statistics.
            </summary>
            <returns>Migration statistics</returns>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateMigrationBase">
            <summary>
            Base implementation of IStateMigration with common functionality.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationBase.#ctor(SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion,System.String)">
            <summary>
            Initializes a new instance of StateMigrationBase.
            </summary>
            <param name="fromVersion">Source version</param>
            <param name="toVersion">Target version</param>
            <param name="description">Migration description</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMigrationBase.FromVersion">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMigrationBase.ToVersion">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.State.StateMigrationBase.Description">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationBase.CanMigrate(SemanticKernel.Graph.State.StateVersion)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationBase.Migrate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationBase.ParseJson(System.String)">
            <summary>
            Helper method to parse JSON safely.
            </summary>
            <param name="json">JSON to parse</param>
            <returns>JsonDocument</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when JSON is invalid</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateMigrationBase.ToString">
            <summary>
            Returns a string representation of this migration.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.MigrationStats">
            <summary>
            Migration statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.MigrationStats.#ctor(System.Int32,SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion,System.Int32)">
            <summary>
            Initializes a new instance of MigrationStats.
            </summary>
            <param name="totalMigrations">Total number of registered migrations</param>
            <param name="oldestVersion">Oldest supported version</param>
            <param name="newestVersion">Newest supported version</param>
            <param name="totalVersions">Total number of versions covered</param>
        </member>
        <member name="P:SemanticKernel.Graph.State.MigrationStats.TotalMigrations">
            <summary>
            Gets the total number of registered migrations.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.MigrationStats.OldestVersion">
            <summary>
            Gets the oldest supported version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.MigrationStats.NewestVersion">
            <summary>
            Gets the newest supported version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.MigrationStats.TotalVersions">
            <summary>
            Gets the total number of versions covered.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.MigrationStats.ToString">
            <summary>
            Returns a string representation of the migration statistics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateValidator">
            <summary>
            Integrity validator for graph states.
            Provides comprehensive checks to ensure data consistency.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateState(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Validates the complete integrity of a GraphState.
            </summary>
            <param name="state">State to validate</param>
            <returns>Validation result</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateCriticalProperties(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Validates only the critical properties of the state.
            </summary>
            <param name="state">State to validate</param>
            <returns>True if critical properties are valid</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateSerializability(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Validates if the state can be serialized without issues.
            </summary>
            <param name="state">State to validate</param>
            <returns>Serialization validation result</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when state is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateBasicProperties(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Validates the basic properties of the state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateStateData(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Validates the state data.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateParameterValue(System.String,System.Object,SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Validates a specific parameter value.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateExecutionHistory(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Validates the execution history.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateExecutionStep(SemanticKernel.Graph.State.ExecutionStep,SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Validates an individual execution step.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateVersion(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Validates the state version.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.ValidateStateSize(SemanticKernel.Graph.State.GraphState,SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Validates the total state size.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.EstimateSerializedSize(SemanticKernel.Graph.State.GraphState)">
            <summary>
            Estimates the serialized size of the state.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateValidator.EstimateObjectSize(System.Object)">
            <summary>
            Estimates the size of an object.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.StateVersion">
            <summary>
            Represents the state version for compatibility control and migration.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateVersion.Current">
            <summary>
            Current state version.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.StateVersion.MinimumSupported">
            <summary>
            Minimum supported version for compatibility.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateVersion.Major">
            <summary>
            Gets the major version number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateVersion.Minor">
            <summary>
            Gets the minor version number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateVersion.Patch">
            <summary>
            Gets the patch version number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateVersion.IsCompatible">
            <summary>
            Indicates if this version is compatible with the current version.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.StateVersion.RequiresMigration">
            <summary>
            Indicates if this version requires migration.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of StateVersion.
            </summary>
            <param name="major">Major version</param>
            <param name="minor">Minor version</param>
            <param name="patch">Patch version</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when any value is negative</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.Parse(System.String)">
            <summary>
            Creates a StateVersion from a string in "major.minor.patch" format.
            </summary>
            <param name="version">Version string</param>
            <returns>Corresponding StateVersion</returns>
            <exception cref="T:System.ArgumentException">Thrown when the format is invalid</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.TryParse(System.String,SemanticKernel.Graph.State.StateVersion@)">
            <summary>
            Tries to create a StateVersion from a string.
            </summary>
            <param name="version">Version string</param>
            <param name="result">Resulting StateVersion if parsing succeeds</param>
            <returns>True if parsing was successful</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.op_Equality(SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.op_Inequality(SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.op_LessThan(SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Less than operator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.op_LessThanOrEqual(SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Less than or equal operator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.op_GreaterThan(SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Greater than operator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.op_GreaterThanOrEqual(SemanticKernel.Graph.State.StateVersion,SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Greater than or equal operator.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.Equals(SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Checks if this version is equal to another.
            </summary>
            <param name="other">Other version to compare</param>
            <returns>True if versions are equal</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.Equals(System.Object)">
            <summary>
            Checks if this version is equal to another object.
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the object is an equal StateVersion</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.GetHashCode">
            <summary>
            Gets the hash code for this version.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.CompareTo(SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Compares this version with another.
            </summary>
            <param name="other">Other version to compare</param>
            <returns>Negative value if less, zero if equal, positive if greater</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.IsCompatibleWith(SemanticKernel.Graph.State.StateVersion)">
            <summary>
            Checks if this version is compatible with another version.
            </summary>
            <param name="other">Other version to check compatibility with</param>
            <returns>True if versions are compatible</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.StateVersion.ToString">
            <summary>
            Returns the string representation of this version.
            </summary>
            <returns>String in "major.minor.patch" format</returns>
        </member>
        <member name="T:SemanticKernel.Graph.State.ValidationIssue">
            <summary>
            Represents an individual issue found during validation.
            </summary>
            <remarks>
            Includes severity, message, optional context and timestamp to aid troubleshooting and auditing. Two
            issues are considered equal if they share severity, message and context.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationIssue.#ctor(SemanticKernel.Graph.State.ValidationSeverity,System.String,System.String)">
            <summary>
            Initializes a new instance of ValidationIssue.
            </summary>
            <param name="severity">Issue severity</param>
            <param name="message">Descriptive message of the issue</param>
            <param name="context">Additional context (optional)</param>
            <exception cref="T:System.ArgumentException">Thrown when message is null or empty</exception>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationIssue.Severity">
            <summary>
            Gets the issue severity.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationIssue.Message">
            <summary>
            Gets the descriptive message of the issue.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationIssue.Context">
            <summary>
            Gets the additional context of the issue (if available).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationIssue.Timestamp">
            <summary>
            Gets the timestamp when the issue was identified.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationIssue.IsError">
            <summary>
            Indicates if this is a critical error.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationIssue.IsWarning">
            <summary>
            Indicates if this is a warning.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationIssue.Equals(System.Object)">
            <summary>
            Checks if this issue is equal to another.
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationIssue.GetHashCode">
            <summary>
            Gets the hash code of this issue.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationIssue.ToString">
            <summary>
            Returns a string representation of this issue.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.ValidationResult">
            <summary>
            Represents the result of a graph state validation.
            Contains errors, warnings, and information about the executed validation.
            </summary>
            <remarks>
            Aggregates <see cref="T:SemanticKernel.Graph.State.ValidationIssue"/> entries and exposes convenience counters and summaries.
            Instances are not thread-safe for concurrent mutation. Prefer creating new instances per validation
            run and use <see cref="M:SemanticKernel.Graph.State.ValidationResult.Merge(SemanticKernel.Graph.State.ValidationResult)"/> to compose results. Only <see cref="M:SemanticKernel.Graph.State.ValidationResult.ThrowIfInvalid"/>
            throws; other members are non-throwing besides argument validation.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of ValidationResult.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.Timestamp">
            <summary>
            Gets the validation timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.IsValid">
            <summary>
            Indicates whether the validation passed without errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.HasErrors">
            <summary>
            Indicates whether there are errors in the validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.HasWarnings">
            <summary>
            Indicates whether there are warnings in the validation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.Issues">
            <summary>
            Gets all found issues (read-only).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.Errors">
            <summary>
            Gets only the found errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.Warnings">
            <summary>
            Gets only the found warnings.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.TotalIssues">
            <summary>
            Gets the total number of issues.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.ErrorCount">
            <summary>
            Gets the number of errors.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.State.ValidationResult.WarningCount">
            <summary>
            Gets the number of warnings.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.AddError(System.String,System.String)">
            <summary>
            Adds an error to the validation.
            </summary>
            <param name="message">Error message</param>
            <param name="context">Additional context (optional)</param>
            <exception cref="T:System.ArgumentException">Thrown when message is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning to the validation.
            </summary>
            <param name="message">Warning message</param>
            <param name="context">Additional context (optional)</param>
            <exception cref="T:System.ArgumentException">Thrown when message is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.AddIssue(SemanticKernel.Graph.State.ValidationIssue)">
            <summary>
            Adds a custom issue to the validation.
            </summary>
            <param name="issue">Issue to add</param>
            <exception cref="T:System.ArgumentNullException">Thrown when issue is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.Merge(SemanticKernel.Graph.State.ValidationResult)">
            <summary>
            Merges another validation result with this one.
            </summary>
            <param name="other">Other result to merge</param>
            <exception cref="T:System.ArgumentNullException">Thrown when other is null</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.Clear">
            <summary>
            Removes all issues from the validation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.GetIssuesBySeverity(SemanticKernel.Graph.State.ValidationSeverity)">
            <summary>
            Gets issues by severity.
            </summary>
            <param name="severity">Desired severity</param>
            <returns>Issues with the specified severity</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.FindIssues(System.String,System.Boolean)">
            <summary>
            Searches for issues that contain a specific message.
            </summary>
            <param name="messagePattern">Pattern to search for in the message</param>
            <param name="ignoreCase">Whether to ignore case</param>
            <returns>Issues that match the pattern</returns>
            <exception cref="T:System.ArgumentException">Thrown when messagePattern is null or empty</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.CreateSummary(System.Boolean)">
            <summary>
            Creates a textual summary of the validation.
            </summary>
            <param name="includeDetails">Whether to include issue details</param>
            <returns>Validation summary</returns>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.ThrowIfInvalid">
            <summary>
            Throws an exception if there are errors in the validation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if there are errors</exception>
        </member>
        <member name="M:SemanticKernel.Graph.State.ValidationResult.ToString">
            <summary>
            Returns a string representation of the validation result.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.State.ValidationSeverity">
            <summary>
            Represents the severity of a validation issue.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ValidationSeverity.Info">
            <summary>
            Informational message that doesn't indicate a problem.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ValidationSeverity.Warning">
            <summary>
            Warning that does not prevent functioning but indicates a possible issue.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ValidationSeverity.Medium">
            <summary>
            Medium severity issue that should be addressed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ValidationSeverity.Error">
            <summary>
            Error that prevents correct functioning.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ValidationSeverity.High">
            <summary>
            High severity error that requires immediate attention.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.State.ValidationSeverity.Critical">
            <summary>
            Critical error that prevents system operation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionEvent">
            <summary>
            Base class for all graph execution events in the streaming system.
            Provides common event properties and timestamp tracking.
            </summary>
            <remarks>
            These immutable event DTOs are designed for streaming and logging. They carry essential context (ids,
            timestamps, node info, result/state snapshots) and avoid heavy payloads by default.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEvent.#ctor(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of GraphExecutionEvent.
            </summary>
            <param name="executionId">Unique identifier for the execution</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEvent.EventId">
            <summary>
            Gets the unique identifier for this event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEvent.ExecutionId">
            <summary>
            Gets the execution identifier this event belongs to.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEvent.Timestamp">
            <summary>
            Gets the timestamp when this event occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEvent.EventType">
            <summary>
            Gets the type of this event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEvent.HighPrecisionTimestamp">
            <summary>
            Monotonic high-precision timestamp captured at event creation (Stopwatch ticks).
            Useful for precise ordering and latency measurements across threads.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEvent.HighPrecisionFrequency">
            <summary>
            Frequency of the high-precision timer used for <see cref="P:SemanticKernel.Graph.Streaming.GraphExecutionEvent.HighPrecisionTimestamp"/>.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionStartedEvent">
            <summary>
            Event fired when graph execution starts.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionStartedEvent.#ctor(System.String,SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of GraphExecutionStartedEvent.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="startNode">Starting node</param>
            <param name="initialState">Initial graph state</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionStartedEvent.StartNode">
            <summary>
            Gets the starting node for execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionStartedEvent.InitialState">
            <summary>
            Gets the initial graph state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionStartedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.NodeExecutionStartedEvent">
            <summary>
            Event fired when a node starts executing.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.NodeExecutionStartedEvent.#ctor(System.String,SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of NodeExecutionStartedEvent.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="node">Node that started executing</param>
            <param name="currentState">Current graph state</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionStartedEvent.Node">
            <summary>
            Gets the node that started executing.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionStartedEvent.CurrentState">
            <summary>
            Gets the current graph state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionStartedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.NodeExecutionCompletedEvent">
            <summary>
            Event fired when a node completes execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.NodeExecutionCompletedEvent.#ctor(System.String,SemanticKernel.Graph.Core.IGraphNode,Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState,System.TimeSpan,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of NodeExecutionCompletedEvent.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="node">Node that completed</param>
            <param name="result">Execution result</param>
            <param name="updatedState">Updated graph state</param>
            <param name="executionDuration">Node execution duration</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionCompletedEvent.Node">
            <summary>
            Gets the node that completed execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionCompletedEvent.Result">
            <summary>
            Gets the execution result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionCompletedEvent.UpdatedState">
            <summary>
            Gets the updated graph state after node execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionCompletedEvent.ExecutionDuration">
            <summary>
            Gets the duration of node execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionCompletedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.NodeExecutionFailedEvent">
            <summary>
            Event fired when a node fails execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.NodeExecutionFailedEvent.#ctor(System.String,SemanticKernel.Graph.Core.IGraphNode,System.Exception,SemanticKernel.Graph.State.GraphState,System.TimeSpan,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of NodeExecutionFailedEvent.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="node">Node that failed</param>
            <param name="exception">Exception that occurred</param>
            <param name="currentState">Current graph state</param>
            <param name="executionDuration">Duration before failure</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionFailedEvent.Node">
            <summary>
            Gets the node that failed execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionFailedEvent.Exception">
            <summary>
            Gets the exception that occurred during execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionFailedEvent.CurrentState">
            <summary>
            Gets the current graph state at the time of failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionFailedEvent.ExecutionDuration">
            <summary>
            Gets the duration of execution before failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExecutionFailedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionCompletedEvent">
            <summary>
            Event fired when graph execution completes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionCompletedEvent.#ctor(System.String,Microsoft.SemanticKernel.FunctionResult,SemanticKernel.Graph.State.GraphState,System.TimeSpan,System.Int32,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of GraphExecutionCompletedEvent.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="finalResult">Final execution result</param>
            <param name="finalState">Final graph state</param>
            <param name="totalDuration">Total execution duration</param>
            <param name="nodesExecuted">Number of nodes executed</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCompletedEvent.FinalResult">
            <summary>
            Gets the final execution result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCompletedEvent.FinalState">
            <summary>
            Gets the final graph state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCompletedEvent.TotalDuration">
            <summary>
            Gets the total execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCompletedEvent.NodesExecuted">
            <summary>
            Gets the number of nodes executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCompletedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionFailedEvent">
            <summary>
            Event fired when graph execution fails.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionFailedEvent.#ctor(System.String,System.Exception,SemanticKernel.Graph.State.GraphState,System.TimeSpan,System.Int32,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of GraphExecutionFailedEvent.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="exception">Exception that caused the failure</param>
            <param name="finalState">Final graph state</param>
            <param name="totalDuration">Total execution duration</param>
            <param name="nodesExecuted">Number of nodes executed before failure</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionFailedEvent.Exception">
            <summary>
            Gets the exception that caused the failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionFailedEvent.FinalState">
            <summary>
            Gets the final graph state at the time of failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionFailedEvent.TotalDuration">
            <summary>
            Gets the total execution duration before failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionFailedEvent.NodesExecuted">
            <summary>
            Gets the number of nodes executed before failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionFailedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionCancelledEvent">
            <summary>
            Event fired when graph execution is cancelled.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionCancelledEvent.#ctor(System.String,SemanticKernel.Graph.State.GraphState,System.TimeSpan,System.Int32,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of GraphExecutionCancelledEvent.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="finalState">Final graph state</param>
            <param name="totalDuration">Total execution duration</param>
            <param name="nodesExecuted">Number of nodes executed before cancellation</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCancelledEvent.FinalState">
            <summary>
            Gets the final graph state at the time of cancellation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCancelledEvent.TotalDuration">
            <summary>
            Gets the total execution duration before cancellation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCancelledEvent.NodesExecuted">
            <summary>
            Gets the number of nodes executed before cancellation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionCancelledEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.NodeEnteredEvent">
            <summary>
            Event fired when the executor enters a node (selected as current node), regardless of execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.NodeEnteredEvent.#ctor(System.String,SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of NodeEnteredEvent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeEnteredEvent.Node">
            <summary>
            Gets the node that was entered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeEnteredEvent.CurrentState">
            <summary>
            Gets the current graph state upon entering the node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeEnteredEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.NodeExitedEvent">
            <summary>
            Event fired when the executor exits a node (after navigation decision), regardless of execution result.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.NodeExitedEvent.#ctor(System.String,SemanticKernel.Graph.Core.IGraphNode,SemanticKernel.Graph.State.GraphState,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of NodeExitedEvent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExitedEvent.Node">
            <summary>
            Gets the node that was exited.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExitedEvent.UpdatedState">
            <summary>
            Gets the updated graph state upon exiting the node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.NodeExitedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent">
            <summary>
            Event fired when a condition is evaluated by a conditional node.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.TimeSpan,SemanticKernel.Graph.State.GraphState,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of ConditionEvaluatedEvent.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent.NodeId">
            <summary>
            Gets the id of the conditional node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent.NodeName">
            <summary>
            Gets the name of the conditional node.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent.Expression">
            <summary>
            Gets the evaluated expression (if template-based), otherwise null.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent.Result">
            <summary>
            Gets the boolean evaluation result.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent.EvaluationDuration">
            <summary>
            Gets the time taken to evaluate the condition.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent.State">
            <summary>
            Gets the graph state at evaluation time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConditionEvaluatedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StateMergeConflictEvent">
            <summary>
            Event fired when a state merge conflict is detected during execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.#ctor(System.String,System.String,System.Object,System.Object,SemanticKernel.Graph.State.StateMergeConflictPolicy,System.Object,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of StateMergeConflictEvent.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="conflictKey">Parameter key where conflict occurred</param>
            <param name="baseValue">Value from base state</param>
            <param name="overlayValue">Value from overlay state</param>
            <param name="conflictPolicy">Merge policy that detected the conflict</param>
            <param name="resolvedValue">Value used after conflict resolution (if any)</param>
            <param name="nodeId">Node ID where conflict occurred (optional)</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.ConflictKey">
            <summary>
            Gets the parameter key where the conflict occurred.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.BaseValue">
            <summary>
            Gets the value from the base state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.OverlayValue">
            <summary>
            Gets the value from the overlay state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.ConflictPolicy">
            <summary>
            Gets the merge policy that detected the conflict.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.ResolvedValue">
            <summary>
            Gets the value used after conflict resolution (if resolved).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.NodeId">
            <summary>
            Gets the node ID where the conflict occurred (if applicable).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.WasResolved">
            <summary>
            Gets whether the conflict was resolved automatically.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.EventType">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.CreateConflictSummary(System.Boolean)">
            <summary>
            Creates a summary description of the conflict.
            </summary>
            <param name="includeValues">Whether to include actual values</param>
            <returns>Conflict description</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StateMergeConflictEvent.FormatValue(System.Object)">
            <summary>
            Formats a value for display.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionEventType">
            <summary>
            Enumeration of different types of graph execution events.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.ExecutionStarted">
            <summary>
            Graph execution started.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.NodeStarted">
            <summary>
            Node execution started.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.NodeCompleted">
            <summary>
            Node execution completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.NodeFailed">
            <summary>
            Node execution failed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.ExecutionCompleted">
            <summary>
            Graph execution completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.ExecutionFailed">
            <summary>
            Graph execution failed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.ExecutionCancelled">
            <summary>
            Graph execution was cancelled.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.NodeEntered">
            <summary>
            Executor entered a node (selected current node).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.NodeExited">
            <summary>
            Executor exited a node (after navigation decision).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.ConditionEvaluated">
            <summary>
            A conditional expression or function was evaluated.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.StateMergeConflictDetected">
            <summary>
            A state merge conflict was detected during execution.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.CircuitBreakerStateChanged">
            <summary>
            A circuit breaker state changed (opened, closed, half-open).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.CircuitBreakerOperationAttempted">
            <summary>
            A circuit breaker operation was attempted.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.CircuitBreakerOperationBlocked">
            <summary>
            A circuit breaker operation was blocked (circuit open).
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.ResourceBudgetExhausted">
            <summary>
            Resource budget was exhausted for a node.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.RetryScheduled">
            <summary>
            A retry will be attempted for a failed node due to error policy.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.GraphExecutionEventType.NodeSkippedDueToErrorPolicy">
            <summary>
            A failed node was skipped due to error policy.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.CircuitBreakerStateChangedEvent">
            <summary>
            Event emitted when a circuit breaker state changes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.CircuitBreakerStateChangedEvent.#ctor(System.String,System.String,SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState,SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new circuit breaker state changed event.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier</param>
            <param name="oldState">Previous circuit breaker state</param>
            <param name="newState">New circuit breaker state</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerStateChangedEvent.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerStateChangedEvent.OldState">
            <summary>
            Gets the previous circuit breaker state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerStateChangedEvent.NewState">
            <summary>
            Gets the new circuit breaker state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerStateChangedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.CircuitBreakerOperationAttemptedEvent">
            <summary>
            Event emitted when a circuit breaker operation is attempted.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.CircuitBreakerOperationAttemptedEvent.#ctor(System.String,System.String,System.String,SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new circuit breaker operation attempted event.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier</param>
            <param name="operationType">Type of operation attempted</param>
            <param name="circuitState">Current circuit breaker state</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationAttemptedEvent.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationAttemptedEvent.OperationType">
            <summary>
            Gets the type of operation attempted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationAttemptedEvent.CircuitState">
            <summary>
            Gets the current circuit breaker state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationAttemptedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.CircuitBreakerOperationBlockedEvent">
            <summary>
            Event emitted when a circuit breaker blocks an operation.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.CircuitBreakerOperationBlockedEvent.#ctor(System.String,System.String,System.String,SemanticKernel.Graph.Core.AcademicPatterns.CircuitBreakerState,System.Int32,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new circuit breaker operation blocked event.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier</param>
            <param name="reason">Reason for blocking the operation</param>
            <param name="circuitState">Current circuit breaker state</param>
            <param name="failureCount">Current failure count</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationBlockedEvent.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationBlockedEvent.Reason">
            <summary>
            Gets the reason for blocking the operation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationBlockedEvent.CircuitState">
            <summary>
            Gets the current circuit breaker state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationBlockedEvent.FailureCount">
            <summary>
            Gets the current failure count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.CircuitBreakerOperationBlockedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ResourceBudgetExhaustedEvent">
            <summary>
            Event emitted when resource budget is exhausted.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.ResourceBudgetExhaustedEvent.#ctor(System.String,System.String,System.String,System.Double,System.Double,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new resource budget exhausted event.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="nodeId">Node identifier</param>
            <param name="resourceType">Type of resource that was exhausted</param>
            <param name="requestedAmount">Amount of resource requested</param>
            <param name="availableAmount">Amount of resource available</param>
            <param name="timestamp">Event timestamp</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ResourceBudgetExhaustedEvent.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ResourceBudgetExhaustedEvent.ResourceType">
            <summary>
            Gets the type of resource that was exhausted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ResourceBudgetExhaustedEvent.RequestedAmount">
            <summary>
            Gets the amount of resource requested.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ResourceBudgetExhaustedEvent.AvailableAmount">
            <summary>
            Gets the amount of resource available.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ResourceBudgetExhaustedEvent.EventType">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.RetryScheduledEvent">
            <summary>
            Event emitted when a retry is scheduled due to an error policy decision.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.NodeSkippedDueToErrorPolicyEvent">
            <summary>
            Event emitted when a node is skipped due to an error policy decision.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionEventStream">
            <summary>
            Default implementation of IGraphExecutionEventStream using System.Threading.Channels for efficient streaming.
            Provides buffering, filtering, and reconnection capabilities for graph execution events.
            </summary>
            <remarks>
            Backpressure: bounded channel with wait policy. Safety: cancellation-aware and disposal-safe; emits a
            completion result on termination. Filtering/buffering are implemented as lightweight wrappers that
            delegate to the source stream.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.#ctor(System.String,SemanticKernel.Graph.Streaming.StreamingExecutionOptions,System.String)">
            <summary>
            Initializes a new instance of GraphExecutionEventStream.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="options">Streaming options</param>
            <param name="graphId">Optional graph identifier for standardized metric tags</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.ExecutionId">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.GraphId">
            <summary>
            Graph identifier associated with this stream (when known), used for standardized metric tags.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.Status">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.EventCount">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.IsCompleted">
            <inheritdoc />
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.CompletionResult">
            <inheritdoc />
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.StatusChanged">
            <inheritdoc />
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.EventEmitted">
            <inheritdoc />
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.SerializedEventEmitted">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.WaitForCompletionAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.Filter(SemanticKernel.Graph.Streaming.GraphExecutionEventType[])">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.Buffer(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.Dispose">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.EmitEventAsync(SemanticKernel.Graph.Streaming.GraphExecutionEvent,System.Threading.CancellationToken)">
            <summary>
            Emits an event to the stream.
            </summary>
            <param name="event">Event to emit</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if event was successfully emitted</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.EmitEventValueTaskAsync(SemanticKernel.Graph.Streaming.GraphExecutionEvent,System.Threading.CancellationToken)">
            <summary>
            Emits an event to the stream with a fast-path that can complete synchronously.
            Uses TryWrite to avoid allocations when the channel has capacity; otherwise defers to the slow path.
            </summary>
            <param name="event">Event to emit</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if event was successfully emitted</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.CompleteStream(SemanticKernel.Graph.Streaming.StreamCompletionResult)">
            <summary>
            Marks the stream as completed.
            </summary>
            <param name="result">Completion result</param>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.FilteredEventStream">
            <summary>
            Filtered event stream implementation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionEventStream.BufferedEventStream">
            <summary>
            Buffered event stream implementation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool">
            <summary>
            Thread-safe connection pool for <see cref="T:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream"/>.
            Provides round-robin selection among healthy connections and integrates with
            <see cref="T:SemanticKernel.Graph.Streaming.StreamingReconnectionManager"/> for health checks and reconnection.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool.#ctor(SemanticKernel.Graph.Streaming.StreamingReconnectionManager,SemanticKernel.Graph.Streaming.StreamingPoolOptions)">
            <summary>
            Initializes a new instance of the connection pool.
            </summary>
            <param name="reconnectionManager">Optional reconnection manager (uses default if null)</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool.ConnectionIds">
            <summary>
            Gets the registered connection identifiers.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool.RegisterConnection(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{SemanticKernel.Graph.Streaming.IGraphExecutionEventStream}},System.Func{SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,System.Threading.Tasks.Task{System.Boolean}},SemanticKernel.Graph.Streaming.ReconnectionOptions,System.Nullable{System.Int32})">
            <summary>
            Registers a connection with factory and health check functions.
            </summary>
            <param name="connectionId">Unique connection identifier</param>
            <param name="connectionFactory">Factory to establish the connection</param>
            <param name="healthChecker">Async health checker for the connection</param>
            <param name="options">Optional reconnection options</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool.UnregisterConnection(System.String)">
            <summary>
            Unregisters a connection.
            </summary>
            <param name="connectionId">Connection identifier</param>
            <returns>True if the connection was unregistered</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool.RentAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a healthy connection using round-robin selection. Attempts to connect
            using the reconnection manager if the candidate is not currently connected.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A healthy <see cref="T:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream"/> or null if none are available</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool.ReportFailure(System.String,System.Exception)">
            <summary>
            Reports a connection failure to trigger reconnection logic.
            </summary>
            <param name="connectionId">Connection identifier</param>
            <param name="exception">Exception that caused the failure</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool.GetStatusSnapshot">
            <summary>
            Returns a snapshot of connection statuses.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool.Dispose">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream">
            <summary>
            Represents a stream of graph execution events in real-time.
            Provides asynchronous iteration over execution events as they occur.
            </summary>
            <remarks>
            Streams are cold until enumeration begins. Implementations should be backpressure-aware and
            cancellation-friendly. Event handlers are optional and should not throw; exceptions are surfaced
            via <see cref="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.Exception"/> when they cause failure.
            </remarks>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.ExecutionId">
            <summary>
            Gets the execution identifier for this stream.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.Status">
            <summary>
            Gets the current status of the execution stream.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.CreatedAt">
            <summary>
            Gets the timestamp when the stream was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.EventCount">
            <summary>
            Gets the total number of events emitted by this stream.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.IsCompleted">
            <summary>
            Indicates whether the stream has completed (successfully, failed, or cancelled).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.CompletionResult">
            <summary>
            Gets the completion result (if completed).
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.StatusChanged">
            <summary>
            Event fired when the stream status changes.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.EventEmitted">
            <summary>
            Event fired when a new event is emitted to the stream.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.SerializedEventEmitted">
            <summary>
            Event fired when a serialized payload for an event is available (optionally compressed).
            Useful for high-throughput transports that prefer binary payloads.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.WaitForCompletionAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Waits for the stream to complete (successfully, failed, or cancelled).
            </summary>
            <param name="timeout">Optional timeout for waiting</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Stream completion result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.Filter(SemanticKernel.Graph.Streaming.GraphExecutionEventType[])">
            <summary>
            Gets a filtered stream that only emits events of the specified types.
            </summary>
            <param name="eventTypes">Event types to include</param>
            <returns>Filtered stream</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.Buffer(System.Int32)">
            <summary>
            Gets a buffered version of this stream with the specified buffer size.
            </summary>
            <param name="bufferSize">Number of events to buffer</param>
            <returns>Buffered stream</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.IBinaryEventSerializer">
            <summary>
            Abstraction for binary serialization of lightweight event envelopes.
            Implementations may use JSON, MessagePack, Protobuf, or any custom format.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IBinaryEventSerializer.Serialize(System.Object)">
            <summary>
            Serializes the provided lightweight envelope object into a binary payload.
            The input is a compact anonymous object created by the stream for transport.
            </summary>
            <param name="envelope">Lightweight envelope to serialize</param>
            <returns>Binary payload</returns>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.IBinaryEventSerializer.Format">
            <summary>
            Gets a short identifier for the format (e.g., "json", "msgpack", "protobuf").
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.IStreamingGraphExecutor">
            <summary>
            Interface for streaming graph executors that emit events during execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IStreamingGraphExecutor.ExecuteStreamAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Streaming.StreamingExecutionOptions,System.Threading.CancellationToken)">
            <summary>
            Executes a graph and returns a stream of execution events.
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="options">Optional streaming execution options</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Stream of execution events</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IStreamingGraphExecutor.ExecuteStreamFromAsync(System.String,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Streaming.StreamingExecutionOptions,System.Threading.CancellationToken)">
            <summary>
            Executes a graph starting from a specific node and returns a stream of execution events.
            </summary>
            <param name="startNodeId">ID of the node to start from</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="options">Optional streaming execution options</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Stream of execution events</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.IGraphExecutionEventHandler">
            <summary>
            Interface for event handlers that can process streaming events.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphExecutionEventHandler.HandleEventAsync(SemanticKernel.Graph.Streaming.GraphExecutionEvent,System.Threading.CancellationToken)">
            <summary>
            Handles a graph execution event.
            </summary>
            <param name="event">Event to handle</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the handling operation</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphExecutionEventHandler.CanHandle(SemanticKernel.Graph.Streaming.GraphExecutionEventType)">
            <summary>
            Indicates whether this handler can process the specified event type.
            </summary>
            <param name="eventType">Event type to check</param>
            <returns>True if the handler can process this event type</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamStatus">
            <summary>
            Status of an execution stream.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamStatus.NotStarted">
            <summary>
            Stream is not yet started.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamStatus.Active">
            <summary>
            Stream is active and emitting events.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamStatus.Buffering">
            <summary>
            Stream is buffering events due to backpressure.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamStatus.Completed">
            <summary>
            Stream completed successfully.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamStatus.Failed">
            <summary>
            Stream failed with an error.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamStatus.Cancelled">
            <summary>
            Stream was cancelled.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamStatus.Reconnecting">
            <summary>
            Stream is disconnected and attempting reconnection.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamStatus.Disposed">
            <summary>
            Stream is disposed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamCompletionResult">
            <summary>
            Result of stream completion.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamCompletionResult.#ctor(SemanticKernel.Graph.Streaming.StreamStatus,System.Int64,System.TimeSpan,System.Exception,SemanticKernel.Graph.Streaming.GraphExecutionEvent)">
            <summary>
            Initializes a new instance of StreamCompletionResult.
            </summary>
            <param name="status">Final stream status</param>
            <param name="totalEvents">Total number of events emitted</param>
            <param name="duration">Stream duration</param>
            <param name="exception">Exception if failed</param>
            <param name="finalEvent">Final execution event</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.Status">
            <summary>
            Gets the final stream status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.TotalEvents">
            <summary>
            Gets the total number of events emitted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.Duration">
            <summary>
            Gets the stream duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.Exception">
            <summary>
            Gets the exception if the stream failed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.FinalEvent">
            <summary>
            Gets the final execution event.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.CompletedAt">
            <summary>
            Gets the completion timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.IsSuccess">
            <summary>
            Indicates whether the stream completed successfully.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.IsFailed">
            <summary>
            Indicates whether the stream failed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamCompletionResult.IsCancelled">
            <summary>
            Indicates whether the stream was cancelled.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs">
            <summary>
            Describes a serialized representation of a streaming event, potentially compressed.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.#ctor(System.String,SemanticKernel.Graph.Streaming.GraphExecutionEventType,System.DateTimeOffset,System.ReadOnlyMemory{System.Byte},System.Boolean,System.Nullable{SemanticKernel.Graph.Streaming.CompressionAlgorithm})">
            <summary>
            Initializes a new instance of <see cref="T:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs"/>.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="eventType">Original event type</param>
            <param name="timestamp">Event timestamp</param>
            <param name="payload">Serialized payload (compressed or raw)</param>
            <param name="isCompressed">Whether the payload is compressed</param>
            <param name="compressionAlgorithm">Compression algorithm if compressed</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.#ctor(System.String,SemanticKernel.Graph.Streaming.GraphExecutionEventType,System.DateTimeOffset,System.String,System.Int64,System.Int32,System.Boolean,System.Nullable{SemanticKernel.Graph.Streaming.CompressionAlgorithm})">
            <summary>
            Initializes a new instance that references a memory-mapped file region instead of in-memory payload.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.ExecutionId">
            <summary>
            Gets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.EventType">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.Timestamp">
            <summary>
            Gets the event timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.Payload">
            <summary>
            Gets the serialized payload.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.IsCompressed">
            <summary>
            Indicates whether the payload is compressed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.CompressionAlgorithm">
            <summary>
            Gets the compression algorithm used (if compressed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.IsMemoryMapped">
            <summary>
            Indicates whether the payload is stored in a memory-mapped file region.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.MemoryMappedFilePath">
            <summary>
            Full path to the memory-mapped backing file, when <see cref="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.IsMemoryMapped"/> is true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.MemoryMappedOffset">
            <summary>
            Byte offset inside the memory-mapped file for this payload.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.SerializedEventEmittedEventArgs.MemoryMappedLength">
            <summary>
            Length in bytes of the memory-mapped payload.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamStatusChangedEventArgs">
            <summary>
            Event arguments for stream status changes.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamStatusChangedEventArgs.#ctor(SemanticKernel.Graph.Streaming.StreamStatus,SemanticKernel.Graph.Streaming.StreamStatus,System.String)">
            <summary>
            Initializes a new instance of StreamStatusChangedEventArgs.
            </summary>
            <param name="previousStatus">Previous stream status</param>
            <param name="newStatus">New stream status</param>
            <param name="reason">Reason for status change</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamStatusChangedEventArgs.PreviousStatus">
            <summary>
            Gets the previous stream status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamStatusChangedEventArgs.NewStatus">
            <summary>
            Gets the new stream status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamStatusChangedEventArgs.Reason">
            <summary>
            Gets the reason for the status change (optional).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamStatusChangedEventArgs.Timestamp">
            <summary>
            Gets the timestamp when the status changed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingExecutionOptions">
            <summary>
            Configuration options for streaming execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.BufferSize">
            <summary>
            Gets or sets the buffer size for event streams.
            Default: 100 events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MaxBufferSize">
            <summary>
            Gets or sets the maximum buffer size before backpressure is applied.
            Default: 1000 events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.EnableAutoReconnect">
            <summary>
            Gets or sets whether to enable automatic reconnection on stream interruption.
            Default: true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MaxReconnectAttempts">
            <summary>
            Gets or sets the maximum number of reconnection attempts.
            Default: 3 attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.InitialReconnectDelay">
            <summary>
            Gets or sets the initial reconnection delay.
            Default: 1 second.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MaxReconnectDelay">
            <summary>
            Gets or sets the maximum reconnection delay (for exponential backoff).
            Default: 30 seconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.IncludeStateSnapshots">
            <summary>
            Gets or sets whether to include intermediate state snapshots in events.
            Default: false (to reduce event size).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.EventTypesToEmit">
            <summary>
            Gets or sets the types of events to emit.
            Default: all event types.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.EventHandlers">
            <summary>
            Gets or sets custom event handlers to attach to the stream.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.EnableHeartbeat">
            <summary>
            Gets or sets whether to emit heartbeat events during long-running executions.
            Default: false.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.HeartbeatInterval">
            <summary>
            Gets or sets the heartbeat interval.
            Default: 30 seconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.ProducerBatchSize">
            <summary>
            Gets or sets the producer-side batch size before flushing events to consumers.
            When set to 1, events are flushed immediately. Default: 1.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.ProducerFlushInterval">
            <summary>
            Gets or sets the optional flush interval. When set, pending events are flushed
            at this interval even if the batch size is not reached. Default: null (disabled).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.EnableEventCompression">
            <summary>
            Gets or sets a value indicating whether to serialize and optionally compress
            events as payloads for the <see cref="E:SemanticKernel.Graph.Streaming.IGraphExecutionEventStream.SerializedEventEmitted"/> hook.
            Default: false.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.CompressionAlgorithm">
            <summary>
            Gets or sets the compression algorithm to use when compression is enabled.
            Default: Gzip.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.CompressionThresholdBytes">
            <summary>
            Gets or sets the minimum serialized payload size (in bytes) before compression is applied.
            Default: 8 KB.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.AdaptiveEventCompressionEnabled">
            <summary>
            Gets or sets whether to use an adaptive decision policy for event compression
            based on the observed compression savings of recent payloads.
            When enabled, the effective compression threshold is dynamically tuned to
            maximize expected gains and avoid wasteful compression.
            Default: true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.AdaptiveEventCompressionWindowSize">
            <summary>
            Sliding window size for adaptive compression statistics.
            Larger windows stabilize the decision at the cost of slower reaction.
            Default: 32.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.AdaptiveEventCompressionMinSavingsRatio">
            <summary>
            Minimum savings ratio required to treat a compression attempt as beneficial.
            For example, 0.10 means at least 10% size reduction.
            Default: 0.10 (10%).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.UseMemoryMappedSerializedBuffer">
            <summary>
            Gets or sets whether to buffer serialized event payloads using memory-mapped files for large payloads.
            Default: false.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MemoryMappedSerializedThresholdBytes">
            <summary>
            Minimum payload size in bytes to store in memory-mapped buffer when enabled.
            Default: 64 KB.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MemoryMappedBufferDirectory">
            <summary>
            Directory where memory-mapped buffer files are created.
            Default: system temp directory.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MemoryMappedFileSizeBytes">
            <summary>
            Maximum size per memory-mapped buffer file in bytes before rolling over.
            Default: 64 MB.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MemoryMappedMaxFiles">
            <summary>
            Maximum number of buffer files per stream before cycling/cleanup.
            Default: 16.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MemoryMappedCleanupOnDispose">
            <summary>
            Whether to delete memory-mapped buffer files when the stream is disposed/completed.
            Default: true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.EnableMetrics">
            <summary>
            Gets or sets whether to enable metrics emission for streaming (counters/histograms).
            Default: true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.MetricsMeterName">
            <summary>
            Gets or sets the meter name to use when emitting metrics.
            Default: "SemanticKernel.Graph.Streaming".
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionOptions.EventSerializer">
            <summary>
            Optional custom binary serializer for event envelopes.
            When provided, the stream uses this serializer instead of JSON.
            Useful to plug MessagePack or Protobuf without changing stream logic.
            Default: null (uses JSON).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.CompressionAlgorithm">
            <summary>
            Supported compression algorithms for serialized event payloads.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.CompressionAlgorithm.Gzip">
            <summary>
            Gzip compression.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.CompressionAlgorithm.Brotli">
            <summary>
            Brotli compression.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.IGraphStreamingApi">
            <summary>
            API interface for streaming graph execution endpoints.
            Provides REST-compatible methods for streaming graph execution.
            </summary>
            <remarks>
            This is a transport-agnostic contract intended for HTTP adapters. Methods should be non-blocking and
            backpressure-aware when returning IAsyncEnumerable. DTOs are minimal to keep payloads small.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphStreamingApi.StartExecutionAsync(System.String,SemanticKernel.Graph.Streaming.StreamingExecutionRequest,System.Threading.CancellationToken)">
            <summary>
            Starts streaming execution of a graph.
            </summary>
            <param name="graphId">Graph identifier</param>
            <param name="executionRequest">Execution request parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Streaming execution response</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphStreamingApi.GetExecutionStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the status of a streaming execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Execution status</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphStreamingApi.ConnectToExecutionAsync(System.String,SemanticKernel.Graph.Streaming.StreamingConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Connects to a streaming execution to receive events.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="connectionOptions">Connection options</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Async enumerable of streaming events</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphStreamingApi.CancelExecutionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a streaming execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Cancellation response</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphStreamingApi.GetExecutionResultAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the final result of a completed streaming execution.
            </summary>
            <param name="executionId">Execution identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.IGraphStreamingApi.GetActiveExecutionsAsync(SemanticKernel.Graph.Streaming.ExecutionListFilter,System.Threading.CancellationToken)">
            <summary>
            Lists active streaming executions.
            </summary>
            <param name="filter">Optional filter criteria</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of active executions</returns>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingExecutionRequest">
            <summary>
            Request model for starting streaming execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionRequest.Arguments">
            <summary>
            Gets or sets the initial kernel arguments for execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionRequest.StartNodeId">
            <summary>
            Gets or sets the optional start node ID.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionRequest.Options">
            <summary>
            Gets or sets the streaming execution options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionRequest.Metadata">
            <summary>
            Gets or sets custom metadata for the execution.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingExecutionResponse">
            <summary>
            Response model for streaming execution startup.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionResponse.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionResponse.GraphId">
            <summary>
            Gets or sets the graph identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionResponse.Status">
            <summary>
            Gets or sets the execution status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionResponse.StartedAt">
            <summary>
            Gets or sets the execution start timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionResponse.Endpoints">
            <summary>
            Gets or sets the streaming endpoint URLs.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingExecutionResponse.Warnings">
            <summary>
            Gets or sets any warning messages.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingEndpoints">
            <summary>
            Streaming endpoint URLs for connecting to execution events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEndpoints.WebSocket">
            <summary>
            Gets or sets the WebSocket endpoint URL.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEndpoints.ServerSentEvents">
            <summary>
            Gets or sets the Server-Sent Events endpoint URL.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEndpoints.Polling">
            <summary>
            Gets or sets the polling endpoint URL.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ExecutionStatusResponse">
            <summary>
            Response model for execution status queries.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.Status">
            <summary>
            Gets or sets the current execution status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.CurrentNodeId">
            <summary>
            Gets or sets the current node being executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.NodesExecuted">
            <summary>
            Gets or sets the number of nodes executed so far.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.EventCount">
            <summary>
            Gets or sets the total number of events emitted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.StartedAt">
            <summary>
            Gets or sets the execution start timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.Duration">
            <summary>
            Gets or sets the execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.ErrorMessage">
            <summary>
            Gets or sets error information (if failed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionStatusResponse.Metrics">
            <summary>
            Gets or sets performance metrics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ExecutionMetrics">
            <summary>
            Performance metrics for streaming execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionMetrics.AverageNodeExecutionTime">
            <summary>
            Gets or sets the average node execution time.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionMetrics.EventsPerSecond">
            <summary>
            Gets or sets the events per second rate.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionMetrics.NodesPerSecond">
            <summary>
            Gets or sets the throughput in nodes per second.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionMetrics.MemoryUsageBytes">
            <summary>
            Gets or sets memory usage information.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingEventResponse">
            <summary>
            Response model for streaming events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEventResponse.EventId">
            <summary>
            Gets or sets the event identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEventResponse.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEventResponse.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEventResponse.Timestamp">
            <summary>
            Gets or sets the event timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEventResponse.Payload">
            <summary>
            Gets or sets the event payload.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEventResponse.SequenceNumber">
            <summary>
            Gets or sets the sequence number for ordering.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingEventResponse.IsHeartbeat">
            <summary>
            Gets or sets whether this is a heartbeat event.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingConnectionOptions">
            <summary>
            Options for streaming connections.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingConnectionOptions.ConnectionType">
            <summary>
            Gets or sets the connection type preference.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingConnectionOptions.BufferSize">
            <summary>
            Gets or sets the buffer size for client-side buffering.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingConnectionOptions.EnableCompression">
            <summary>
            Gets or sets whether to enable compression.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingConnectionOptions.HeartbeatInterval">
            <summary>
            Gets or sets the heartbeat interval.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingConnectionOptions.EventTypesToReceive">
            <summary>
            Gets or sets the event types to receive.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingConnectionOptions.IncludeStateSnapshots">
            <summary>
            Gets or sets whether to include state snapshots.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingConnectionOptions.Reconnection">
            <summary>
            Gets or sets the reconnection options.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingConnectionType">
            <summary>
            Connection type for streaming.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamingConnectionType.Auto">
            <summary>
            Automatically select the best connection type.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamingConnectionType.WebSocket">
            <summary>
            Use WebSockets for bidirectional communication.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamingConnectionType.ServerSentEvents">
            <summary>
            Use Server-Sent Events for unidirectional streaming.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.StreamingConnectionType.HttpPolling">
            <summary>
            Use HTTP polling for compatibility.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ReconnectionOptions">
            <summary>
            Reconnection configuration options.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.EnableAutoReconnect">
            <summary>
            Gets or sets whether to enable automatic reconnection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.MaxRetries">
            <summary>
            Gets or sets the maximum number of reconnection attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.InitialDelay">
            <summary>
            Gets or sets the initial reconnection delay.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.MaxDelay">
            <summary>
            Gets or sets the maximum reconnection delay.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.BackoffMultiplier">
            <summary>
            Gets or sets the backoff multiplier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.EnableCircuitBreaker">
            <summary>
            Gets or sets whether to enable the circuit breaker to avoid hammering failing connections.
            Default: true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.CircuitBreakerFailureThreshold">
            <summary>
            Gets or sets the number of consecutive failures required to open the circuit.
            Default: 5.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.CircuitBreakerBreakDuration">
            <summary>
            Gets or sets how long the circuit stays open before transitioning to half-open.
            Default: 30 seconds.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.CircuitBreakerHalfOpenMaxAttempts">
            <summary>
            Gets or sets the maximum number of trial reconnection attempts allowed while half-open.
            Default: 1.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionOptions.CircuitBreakerSuccessesToClose">
            <summary>
            Gets or sets the number of consecutive successful attempts required to close the circuit from half-open.
            Default: 1.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ExecutionCancellationResponse">
            <summary>
            Response model for execution cancellation.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionCancellationResponse.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionCancellationResponse.Success">
            <summary>
            Gets or sets whether the cancellation was successful.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionCancellationResponse.CancelledAt">
            <summary>
            Gets or sets the cancellation timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionCancellationResponse.Message">
            <summary>
            Gets or sets any message related to cancellation.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ExecutionResultResponse">
            <summary>
            Response model for final execution results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.FinalStatus">
            <summary>
            Gets or sets the final execution status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.Result">
            <summary>
            Gets or sets the final result value.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.FinalState">
            <summary>
            Gets or sets the final graph state.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.TotalDuration">
            <summary>
            Gets or sets the total execution duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.NodesExecuted">
            <summary>
            Gets or sets the number of nodes executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.TotalEvents">
            <summary>
            Gets or sets the total number of events emitted.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.ErrorMessage">
            <summary>
            Gets or sets error information (if failed).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionResultResponse.Metrics">
            <summary>
            Gets or sets the execution metrics.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ExecutionListFilter">
            <summary>
            Filter criteria for listing executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionListFilter.Statuses">
            <summary>
            Gets or sets the status filter.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionListFilter.GraphIds">
            <summary>
            Gets or sets the graph ID filter.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionListFilter.StartedAfter">
            <summary>
            Gets or sets the start date filter.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionListFilter.StartedBefore">
            <summary>
            Gets or sets the end date filter.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionListFilter.Limit">
            <summary>
            Gets or sets the maximum number of results.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionListFilter.Skip">
            <summary>
            Gets or sets the skip count for pagination.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ActiveExecutionsResponse">
            <summary>
            Response model for active executions list.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ActiveExecutionsResponse.Executions">
            <summary>
            Gets or sets the list of active executions.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ActiveExecutionsResponse.TotalCount">
            <summary>
            Gets or sets the total count (may be more than returned).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ActiveExecutionsResponse.Timestamp">
            <summary>
            Gets or sets the response timestamp.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ExecutionSummary">
            <summary>
            Summary information for an execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionSummary.ExecutionId">
            <summary>
            Gets or sets the execution identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionSummary.GraphId">
            <summary>
            Gets or sets the graph identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionSummary.Status">
            <summary>
            Gets or sets the execution status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionSummary.StartedAt">
            <summary>
            Gets or sets the start timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionSummary.Duration">
            <summary>
            Gets or sets the current duration.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionSummary.NodesExecuted">
            <summary>
            Gets or sets the number of nodes executed.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ExecutionSummary.CurrentNodeId">
            <summary>
            Gets or sets the current node being executed.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.MemoryMappedEventBuffer">
            <summary>
            Rolling memory-mapped file buffer optimized for large serialized event payloads.
            Thread-safe append-only writer; consumers receive file path, offset and length to read directly.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.MemoryMappedEventBuffer.Append(System.ReadOnlySpan{System.Byte})">
            <summary>
            Appends a payload to the buffer, returning the file path, offset and length.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingBuffer">
            <summary>
            Intelligent buffer for streaming graph execution events.
            Provides adaptive buffering, backpressure management, and overflow protection.
            </summary>
            <remarks>
            Uses a bounded primary channel and an optional overflow queue. Overflow policy controls behavior
            under sustained load (drop-oldest/newest or block). Methods are cancellation-aware and avoid throwing
            except for invalid arguments or object disposal.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingBuffer.#ctor(SemanticKernel.Graph.Streaming.StreamingBufferOptions)">
            <summary>
            Initializes a new instance of StreamingBuffer.
            </summary>
            <param name="options">Buffer configuration options</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBuffer.TotalEventsBuffered">
            <summary>
            Gets the total number of events that have been buffered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBuffer.EventsDropped">
            <summary>
            Gets the number of events that were dropped due to overflow.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBuffer.OverflowEvents">
            <summary>
            Gets the number of events currently in overflow buffer.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBuffer.BufferUtilization">
            <summary>
            Gets the current buffer utilization as a percentage (0-100).
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBuffer.IsOverflowing">
            <summary>
            Indicates whether the buffer is currently overflowing to secondary storage.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingBuffer.GetStats">
            <summary>
            Gets buffer performance statistics.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingBuffer.BufferEventAsync(SemanticKernel.Graph.Streaming.GraphExecutionEvent,System.Threading.CancellationToken)">
            <summary>
            Buffers an event for streaming.
            </summary>
            <param name="event">Event to buffer</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if event was successfully buffered</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingBuffer.ReadEventsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a reader for consuming buffered events.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Async enumerable of buffered events</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingBuffer.ReadBatchAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Gets a batch of events up to the specified batch size.
            </summary>
            <param name="batchSize">Maximum number of events to return</param>
            <param name="timeout">Maximum time to wait for events</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of events</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingBuffer.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes all buffered events immediately.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of flushed events</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingBuffer.ClearAsync">
            <summary>
            Clears all buffered events.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingBuffer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingBufferOptions">
            <summary>
            Configuration options for streaming buffer.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferOptions.PrimaryBufferSize">
            <summary>
            Gets or sets the primary buffer size.
            Default: 1000 events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferOptions.EnableOverflow">
            <summary>
            Gets or sets whether to enable overflow buffering.
            Default: true.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferOptions.MaxOverflowSize">
            <summary>
            Gets or sets the maximum overflow buffer size.
            Default: 10000 events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferOptions.OverflowPolicy">
            <summary>
            Gets or sets the overflow policy when buffers are full.
            Default: DropOldest.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferOptions.FlushInterval">
            <summary>
            Gets or sets the flush interval for moving overflow events.
            Default: 1 second.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferOptions.FlushBatchSize">
            <summary>
            Gets or sets the number of events to move per flush operation.
            Default: 100 events.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.BufferOverflowPolicy">
            <summary>
            Policy for handling buffer overflow situations.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.BufferOverflowPolicy.DropOldest">
            <summary>
            Drop the oldest events to make room for new ones.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.BufferOverflowPolicy.DropNewest">
            <summary>
            Drop the newest events when buffer is full.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.BufferOverflowPolicy.Block">
            <summary>
            Block until space is available (may cause backpressure).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingBufferStats">
            <summary>
            Statistics for streaming buffer performance.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferStats.TotalEventsBuffered">
            <summary>
            Gets or sets the total number of events buffered.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferStats.EventsDropped">
            <summary>
            Gets or sets the number of events dropped.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferStats.OverflowEvents">
            <summary>
            Gets or sets the current overflow events count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferStats.BufferUtilization">
            <summary>
            Gets or sets the buffer utilization percentage.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferStats.IsOverflowing">
            <summary>
            Gets or sets whether the buffer is overflowing.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferStats.PrimaryBufferSize">
            <summary>
            Gets or sets the primary buffer size.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferStats.MaxOverflowSize">
            <summary>
            Gets or sets the maximum overflow size.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingBufferStats.DropRate">
            <summary>
            Gets the drop rate as a percentage.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingGraphExecutor">
            <summary>
            Streaming-enabled graph executor that emits real-time events during execution.
            Uses composition to add streaming capabilities to graph execution for real-time monitoring.
            </summary>
            <remarks>
            Produces a per-execution <see cref="T:SemanticKernel.Graph.Streaming.GraphExecutionEventStream"/> and emits start/node/complete/fail
            events. Enumeration of the stream is consumer-driven. Cancellation and failures are surfaced via
            completion results and specific events. This wrapper does not change core execution semantics.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.#ctor(System.String,System.String,SemanticKernel.Graph.Integration.IGraphLogger)">
            <summary>
            Initializes a new instance of StreamingGraphExecutor.
            </summary>
            <param name="name">Name of this graph</param>
            <param name="description">Description of what this graph does</param>
            <param name="logger">Optional logger for graph execution</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.#ctor(SemanticKernel.Graph.Core.GraphExecutor)">
            <summary>
            Initializes a new instance of StreamingGraphExecutor from an existing GraphExecutor.
            </summary>
            <param name="graphExecutor">Existing graph executor to wrap</param>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.Name">
            <summary>
            Gets the name of this graph executor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.Description">
            <summary>
            Gets the description of this graph executor.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.GraphId">
            <summary>
            Gets the unique identifier for this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.CreatedAt">
            <summary>
            Gets when this graph was created.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.StartNode">
            <summary>
            Gets the start node for execution.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.NodeCount">
            <summary>
            Gets the number of nodes in this graph.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.IsReadyForExecution">
            <summary>
            Indicates whether the graph is ready for execution.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.AddNode(SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Adds a node to the graph.
            </summary>
            <param name="node">Node to add</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.GetNode(System.String)">
            <summary>
            Gets a node by its ID.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>Node or null if not found</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.HasNode(System.String)">
            <summary>
            Checks if a node exists.
            </summary>
            <param name="nodeId">Node identifier</param>
            <returns>True if node exists</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.GetAllNodes">
            <summary>
            Gets all nodes in the graph.
            </summary>
            <returns>Collection of all nodes</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.SetStartNode(System.String)">
            <summary>
            Sets the start node for execution.
            </summary>
            <param name="nodeId">ID of the start node</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.Connect(System.String,System.String,System.String)">
            <summary>
            Connects two nodes in the graph.
            </summary>
            <param name="sourceNodeId">Source node ID</param>
            <param name="targetNodeId">Target node ID</param>
            <param name="edgeName">Optional edge name</param>
            <returns>This executor for chaining</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.ValidateGraphIntegrity">
            <summary>
            Validates the graph integrity.
            </summary>
            <returns>Validation result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.ExecuteAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the graph (delegates to underlying executor).
            </summary>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.ExecuteStreamAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Streaming.StreamingExecutionOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.ExecuteStreamFromAsync(System.String,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,SemanticKernel.Graph.Streaming.StreamingExecutionOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.ExecuteWithStreamingAsync(SemanticKernel.Graph.Streaming.GraphExecutionEventStream,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the graph with streaming events from the configured start node.
            </summary>
            <param name="eventStream">Event stream to emit to</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.ExecuteFromWithStreamingAsync(SemanticKernel.Graph.Streaming.GraphExecutionEventStream,System.String,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Executes the graph with streaming events from a specific node.
            </summary>
            <param name="eventStream">Event stream to emit to</param>
            <param name="startNodeId">ID of the node to start from</param>
            <param name="kernel">Semantic kernel instance</param>
            <param name="arguments">Initial arguments for execution</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.ExecuteSequentialWithStreamingAsync(SemanticKernel.Graph.Streaming.GraphExecutionEventStream,SemanticKernel.Graph.Execution.GraphExecutionContext,SemanticKernel.Graph.Core.IGraphNode)">
            <summary>
            Executes the graph sequentially with streaming events.
            </summary>
            <param name="eventStream">Event stream to emit to</param>
            <param name="context">Execution context</param>
            <param name="startNode">Optional start node (defaults to configured start node)</param>
            <returns>Final execution result</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.EmitExecutionFailedEventAsync(SemanticKernel.Graph.Streaming.GraphExecutionEventStream,System.Exception,System.Object,System.TimeSpan,System.Int32)">
            <summary>
            Emits an execution failed event.
            </summary>
            <param name="eventStream">Event stream</param>
            <param name="exception">Exception that caused the failure</param>
            <param name="state">Current state (either KernelArguments or GraphState)</param>
            <param name="duration">Execution duration</param>
            <param name="nodesExecuted">Number of nodes executed</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.EmitStateMergeConflictEventAsync(SemanticKernel.Graph.Streaming.GraphExecutionEventStream,SemanticKernel.Graph.State.StateMergeConflict,System.String,System.Threading.CancellationToken)">
            <summary>
            Emits a state merge conflict event to the stream.
            </summary>
            <param name="eventStream">Event stream to emit to</param>
            <param name="conflict">Conflict information</param>
            <param name="nodeId">Node ID where conflict occurred (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.Dispose">
            <summary>
            Disposes of the streaming executor and cleans up resources.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingGraphExecutor.Dispose(System.Boolean)">
            <summary>
            Dispose method that cleans up active streams.
            </summary>
            <param name="disposing">Whether we're disposing managed resources</param>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingPoolOptions">
            <summary>
            Configuration options for <see cref="T:SemanticKernel.Graph.Streaming.GraphExecutionEventStreamConnectionPool"/>.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingPoolOptions.EnableMetrics">
            <summary>
            Gets or sets whether metrics collection is enabled for the pool.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingPoolOptions.MaxConcurrentRentals">
            <summary>
            Gets or sets the maximum number of concurrent Rent operations across the pool.
            Set to 0 or negative to disable the global limit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingPoolOptions.MaxConcurrentRentalsPerConnection">
            <summary>
            Gets or sets the maximum number of concurrent Rent operations per connection.
            Set to 0 or negative to disable the per-connection limit.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingPoolOptions.DefaultPriority">
            <summary>
            Gets or sets the default priority to assign to connections when none is specified.
            1 means lowest priority. Higher numbers indicate higher weight in selection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.StreamingPoolOptions.MetricsMeterName">
            <summary>
            Gets or sets the meter name for metrics emission.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.StreamingReconnectionManager">
            <summary>
            Manages automatic reconnection for streaming graph execution connections.
            Provides exponential backoff, connection health monitoring, and automatic recovery.
            </summary>
            <remarks>
            Thread-safe manager tracking multiple connections. Health checks run periodically; failures trigger
            reconnection attempts with exponential backoff limited by <see cref="T:SemanticKernel.Graph.Streaming.ReconnectionOptions"/>. Events are
            raised for lifecycle transitions. Dispose stops checks and closes active streams.
            </remarks>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.#ctor(SemanticKernel.Graph.Streaming.ReconnectionOptions)">
            <summary>
            Initializes a new instance of StreamingReconnectionManager.
            </summary>
            <param name="defaultOptions">Default reconnection options</param>
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.ConnectionLost">
            <summary>
            Event fired when a connection is lost.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.ReconnectionAttempting">
            <summary>
            Event fired when a reconnection attempt starts.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.ReconnectionSucceeded">
            <summary>
            Event fired when a reconnection succeeds.
            </summary>
        </member>
        <member name="E:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.ReconnectionFailed">
            <summary>
            Event fired when all reconnection attempts fail.
            </summary>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.RegisterConnection(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{SemanticKernel.Graph.Streaming.IGraphExecutionEventStream}},System.Func{SemanticKernel.Graph.Streaming.IGraphExecutionEventStream,System.Threading.Tasks.Task{System.Boolean}},SemanticKernel.Graph.Streaming.ReconnectionOptions)">
            <summary>
            Registers a connection for monitoring and automatic reconnection.
            </summary>
            <param name="connectionId">Connection identifier</param>
            <param name="connectionFactory">Factory to create new connections</param>
            <param name="healthChecker">Health check function</param>
            <param name="options">Connection-specific reconnection options</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.ConnectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Connects or reconnects to a registered connection.
            </summary>
            <param name="connectionId">Connection identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Connected event stream, or null if failed</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.ReportConnectionFailure(System.String,System.Exception)">
            <summary>
            Reports a connection failure for automatic reconnection handling.
            </summary>
            <param name="connectionId">Connection identifier</param>
            <param name="exception">Exception that caused the failure</param>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.GetConnectionStatuses">
            <summary>
            Gets the status of all registered connections.
            </summary>
            <returns>Dictionary of connection statuses</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.UnregisterConnection(System.String)">
            <summary>
            Unregisters a connection from monitoring.
            </summary>
            <param name="connectionId">Connection identifier</param>
            <returns>True if connection was unregistered</returns>
        </member>
        <member name="M:SemanticKernel.Graph.Streaming.StreamingReconnectionManager.Dispose">
            <inheritdoc />
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ConnectionStatus">
            <summary>
            Status of a streaming connection.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.ConnectionStatus.Disconnected">
            <summary>
            Connection is disconnected.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.ConnectionStatus.Connecting">
            <summary>
            Connection is being established.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.ConnectionStatus.Connected">
            <summary>
            Connection is active and healthy.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.ConnectionStatus.Failed">
            <summary>
            Connection failed and may be retrying.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.ConnectionStatus.PermanentlyFailed">
            <summary>
            Connection permanently failed (all retries exhausted).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ConnectionStatusInfo">
            <summary>
            Information about a connection's status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.Status">
            <summary>
            Gets or sets the connection status.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.ConnectedAt">
            <summary>
            Gets or sets when the connection was established.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.LastHealthCheck">
            <summary>
            Gets or sets the last health check timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.LastFailure">
            <summary>
            Gets or sets the last failure timestamp.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.ConsecutiveFailures">
            <summary>
            Gets or sets the consecutive failure count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.ReconnectionAttempts">
            <summary>
            Gets or sets the reconnection attempts count.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.IsHealthy">
            <summary>
            Gets or sets whether the connection is healthy.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.CircuitState">
            <summary>
            Gets or sets the current circuit breaker state for the connection.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionStatusInfo.CircuitOpenedAt">
            <summary>
            Gets or sets when the circuit was opened (if applicable).
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ConnectionLostEventArgs">
            <summary>
            Event arguments for connection lost events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionLostEventArgs.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionLostEventArgs.Exception">
            <summary>
            Gets or sets the exception that caused the failure.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ConnectionLostEventArgs.FailureTime">
            <summary>
            Gets or sets when the failure occurred.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ReconnectionAttemptEventArgs">
            <summary>
            Event arguments for reconnection attempt events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionAttemptEventArgs.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionAttemptEventArgs.AttemptNumber">
            <summary>
            Gets or sets the attempt number.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionAttemptEventArgs.MaxAttempts">
            <summary>
            Gets or sets the maximum number of attempts.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionAttemptEventArgs.Delay">
            <summary>
            Gets or sets the delay before this attempt.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ReconnectionSuccessEventArgs">
            <summary>
            Event arguments for successful reconnection events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionSuccessEventArgs.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionSuccessEventArgs.AttemptNumber">
            <summary>
            Gets or sets the attempt number that succeeded.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionSuccessEventArgs.ReconnectedAt">
            <summary>
            Gets or sets when the reconnection succeeded.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.CircuitState">
            <summary>
            Circuit breaker state for a streaming connection.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.CircuitState.Closed">
            <summary>
            Normal operation; attempts allowed.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.CircuitState.Open">
            <summary>
            Blocking attempts for a break duration after repeated failures.
            </summary>
        </member>
        <member name="F:SemanticKernel.Graph.Streaming.CircuitState.HalfOpen">
            <summary>
            Allowing limited trial attempts; transitions to Closed on success or back to Open on failure.
            </summary>
        </member>
        <member name="T:SemanticKernel.Graph.Streaming.ReconnectionFailedEventArgs">
            <summary>
            Event arguments for failed reconnection events.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionFailedEventArgs.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionFailedEventArgs.TotalAttempts">
            <summary>
            Gets or sets the total number of attempts made.
            </summary>
        </member>
        <member name="P:SemanticKernel.Graph.Streaming.ReconnectionFailedEventArgs.LastException">
            <summary>
            Gets or sets the last exception encountered.
            </summary>
        </member>
    </members>
</doc>
